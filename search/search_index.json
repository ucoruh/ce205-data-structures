{"config":{"lang":["en","tr"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blank","text":""},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":""},{"location":"license/#code-license","title":"Code License","text":"<p>MIT License</p> <p>Copyright \u00a9 2019-2024 U\u011fur CORUH</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"license/#content-licence","title":"Content Licence","text":"<p>Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License (CC BY-NC-ND 4.0)</p> <p></p> <p>You are free to:</p> <ul> <li>Share: Copy and redistribute the material in any medium or format.</li> </ul> <p>Under the following terms:</p> <ul> <li>Attribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial: You may not use the material for commercial purposes.</li> <li>NoDerivatives: If you remix, transform, or build upon the material, you may not distribute the modified material.</li> </ul> <p>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</p> <p>For more details, visit: Creative Commons CC BY-NC-ND 4.0</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<p>This file contains a global index of all tags used on the pages.</p>"},{"location":"tags/#tag:advanced-tree-structures","title":"advanced-tree-structures","text":"<ul> <li>            Week-10 (Advanced Tree Structures)          </li> </ul>"},{"location":"tags/#tag:algorithms","title":"algorithms","text":"<ul> <li>            Week-2 (Linked Lists)          </li> <li>            Week-3 (Stacks and Queues)          </li> <li>            Week-5 (Grapy Data Structures)          </li> </ul>"},{"location":"tags/#tag:alignment-algorithms","title":"alignment-algorithms","text":"<ul> <li>            Week-11 (String Data Structures)          </li> </ul>"},{"location":"tags/#tag:arrays","title":"arrays","text":"<ul> <li>            Week-2 (Linked Lists)          </li> </ul>"},{"location":"tags/#tag:asn-1","title":"asn-1","text":"<ul> <li>            Syllabus          </li> <li>            Week-1 (Introduction to Data Structures)          </li> </ul>"},{"location":"tags/#tag:avl-tree","title":"avl-tree","text":"<ul> <li>            Week-10 (Advanced Tree Structures)          </li> </ul>"},{"location":"tags/#tag:backtracking","title":"backtracking","text":"<ul> <li>            Week-6 (Graph Algorithms)          </li> </ul>"},{"location":"tags/#tag:ber-tlv","title":"ber-tlv","text":"<ul> <li>            Week-1 (Introduction to Data Structures)          </li> </ul>"},{"location":"tags/#tag:binary-search","title":"binary-search","text":"<ul> <li>            Week-7 (Search and Hashing)          </li> </ul>"},{"location":"tags/#tag:binary-search-tree","title":"binary-search-tree","text":"<ul> <li>            Week-10 (Advanced Tree Structures)          </li> </ul>"},{"location":"tags/#tag:binary-tree","title":"binary-tree","text":"<ul> <li>            Week-4 (Tree Data Structures)          </li> </ul>"},{"location":"tags/#tag:binarytree","title":"binarytree","text":"<ul> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:binsearch","title":"binsearch","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:bloomfilter","title":"bloomfilter","text":"<ul> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:btree","title":"btree","text":"<ul> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:ce205","title":"ce205","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> <li>            Week-16 (Final)          </li> </ul>"},{"location":"tags/#tag:ce205-syllabus","title":"ce205-syllabus","text":"<ul> <li>            Syllabus          </li> </ul>"},{"location":"tags/#tag:ce205-week-1","title":"ce205-week-1","text":"<ul> <li>            Week-1 (Introduction to Data Structures)          </li> </ul>"},{"location":"tags/#tag:ce205-week-10","title":"ce205-week-10","text":"<ul> <li>            Week-10 (Advanced Tree Structures)          </li> </ul>"},{"location":"tags/#tag:ce205-week-11","title":"ce205-week-11","text":"<ul> <li>            Week-11 (String Data Structures)          </li> </ul>"},{"location":"tags/#tag:ce205-week-12","title":"ce205-week-12","text":"<ul> <li>            Week-12 (String Algorithms)          </li> </ul>"},{"location":"tags/#tag:ce205-week-2","title":"ce205-week-2","text":"<ul> <li>            Week-2 (Linked Lists)          </li> </ul>"},{"location":"tags/#tag:ce205-week-3","title":"ce205-week-3","text":"<ul> <li>            Week-3 (Stacks and Queues)          </li> </ul>"},{"location":"tags/#tag:ce205-week-4","title":"ce205-week-4","text":"<ul> <li>            Week-4 (Tree Data Structures)          </li> </ul>"},{"location":"tags/#tag:ce205-week-5","title":"ce205-week-5","text":"<ul> <li>            Week-5 (Grapy Data Structures)          </li> </ul>"},{"location":"tags/#tag:ce205-week-6","title":"ce205-week-6","text":"<ul> <li>            Week-6 (Graph Algorithms)          </li> </ul>"},{"location":"tags/#tag:ce205-week-7","title":"ce205-week-7","text":"<ul> <li>            Week-7 (Search and Hashing)          </li> </ul>"},{"location":"tags/#tag:ce205-week-8","title":"ce205-week-8","text":"<ul> <li>            Week-8 (Midterm)          </li> </ul>"},{"location":"tags/#tag:ce205-week-9","title":"ce205-week-9","text":"<ul> <li>            Week-9 (Sorting)          </li> </ul>"},{"location":"tags/#tag:coalesced","title":"coalesced","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:collision","title":"collision","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:comparison-algorithms","title":"comparison-algorithms","text":"<ul> <li>            Week-11 (String Data Structures)          </li> </ul>"},{"location":"tags/#tag:comparisons","title":"comparisons","text":"<ul> <li>            Week-9 (Sorting)          </li> </ul>"},{"location":"tags/#tag:data-structures","title":"data-structures","text":"<ul> <li>            Syllabus          </li> </ul>"},{"location":"tags/#tag:datastruct","title":"datastruct","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:dblhash","title":"dblhash","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:directfile","title":"directfile","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:disjoint-sets","title":"disjoint-sets","text":"<ul> <li>            Week-12 (String Algorithms)          </li> </ul>"},{"location":"tags/#tag:dynamic","title":"dynamic","text":"<ul> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tags/#tag:extendible","title":"extendible","text":"<ul> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tags/#tag:fall-2024","title":"fall-2024","text":"<ul> <li>            Syllabus          </li> </ul>"},{"location":"tags/#tag:fileorg","title":"fileorg","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:filesorting","title":"filesorting","text":"<ul> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tags/#tag:final","title":"final","text":"<ul> <li>            Week-16 (Final)          </li> </ul>"},{"location":"tags/#tag:graph-algorithms","title":"graph-algorithms","text":"<ul> <li>            Week-6 (Graph Algorithms)          </li> </ul>"},{"location":"tags/#tag:graph-structures","title":"graph-structures","text":"<ul> <li>            Week-5 (Grapy Data Structures)          </li> </ul>"},{"location":"tags/#tag:graph-traversals","title":"graph-traversals","text":"<ul> <li>            Week-5 (Grapy Data Structures)          </li> </ul>"},{"location":"tags/#tag:hashfunc","title":"hashfunc","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:hashing","title":"hashing","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> <li>            Week-7 (Search and Hashing)          </li> </ul>"},{"location":"tags/#tag:hashtable","title":"hashtable","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:heaps","title":"heaps","text":"<ul> <li>            Week-4 (Tree Data Structures)          </li> </ul>"},{"location":"tags/#tag:interpsearch","title":"interpsearch","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:invfile","title":"invfile","text":"<ul> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:linked-lists","title":"linked-lists","text":"<ul> <li>            Week-2 (Linked Lists)          </li> </ul>"},{"location":"tags/#tag:linprobe","title":"linprobe","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:matrices","title":"matrices","text":"<ul> <li>            Week-2 (Linked Lists)          </li> </ul>"},{"location":"tags/#tag:max-flow","title":"max-flow","text":"<ul> <li>            Week-6 (Graph Algorithms)          </li> </ul>"},{"location":"tags/#tag:midterm","title":"midterm","text":"<ul> <li>            Week-8 (Midterm)          </li> </ul>"},{"location":"tags/#tag:mst","title":"mst","text":"<ul> <li>            Week-6 (Graph Algorithms)          </li> </ul>"},{"location":"tags/#tag:multilist","title":"multilist","text":"<ul> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:overflow","title":"overflow","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:patricia","title":"patricia","text":"<ul> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tags/#tag:per-tlv","title":"per-tlv","text":"<ul> <li>            Week-1 (Introduction to Data Structures)          </li> </ul>"},{"location":"tags/#tag:perfect-hashing","title":"perfect-hashing","text":"<ul> <li>            Week-7 (Search and Hashing)          </li> </ul>"},{"location":"tags/#tag:perhash","title":"perhash","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:quadprobe","title":"quadprobe","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:queues","title":"queues","text":"<ul> <li>            Week-3 (Stacks and Queues)          </li> </ul>"},{"location":"tags/#tag:red-black-tree","title":"red-black-tree","text":"<ul> <li>            Week-10 (Advanced Tree Structures)          </li> </ul>"},{"location":"tags/#tag:search-algorithms","title":"search-algorithms","text":"<ul> <li>            Week-7 (Search and Hashing)          </li> </ul>"},{"location":"tags/#tag:secondarykey","title":"secondarykey","text":"<ul> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tags/#tag:selfsearch","title":"selfsearch","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:seqfile","title":"seqfile","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:signature","title":"signature","text":"<ul> <li>            Week-14 (Direct File Organization and B Tree Structures for File)          </li> </ul>"},{"location":"tags/#tag:simhash","title":"simhash","text":"<ul> <li>            Week-13 (Sequential and Direct File Organization)          </li> </ul>"},{"location":"tags/#tag:sorting-algorithms","title":"sorting-algorithms","text":"<ul> <li>            Week-9 (Sorting)          </li> </ul>"},{"location":"tags/#tag:stacks","title":"stacks","text":"<ul> <li>            Week-3 (Stacks and Queues)          </li> </ul>"},{"location":"tags/#tag:string-data-structure","title":"string-data-structure","text":"<ul> <li>            Week-11 (String Data Structures)          </li> </ul>"},{"location":"tags/#tag:string-search-algorithms","title":"string-search-algorithms","text":"<ul> <li>            Week-12 (String Algorithms)          </li> </ul>"},{"location":"tags/#tag:stringmatching","title":"stringmatching","text":"<ul> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tags/#tag:subsequence-search","title":"subsequence-search","text":"<ul> <li>            Week-11 (String Data Structures)          </li> </ul>"},{"location":"tags/#tag:taxonomy","title":"taxonomy","text":"<ul> <li>            Week-9 (Sorting)          </li> </ul>"},{"location":"tags/#tag:topological-sorting","title":"topological-sorting","text":"<ul> <li>            Week-6 (Graph Algorithms)          </li> </ul>"},{"location":"tags/#tag:traversals","title":"traversals","text":"<ul> <li>            Week-4 (Tree Data Structures)          </li> </ul>"},{"location":"tags/#tag:tree-structures","title":"tree-structures","text":"<ul> <li>            Week-4 (Tree Data Structures)          </li> </ul>"},{"location":"tags/#tag:trie","title":"trie","text":"<ul> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tags/#tag:tries","title":"tries","text":"<ul> <li>            Week-12 (String Algorithms)          </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#6b4e2e1","title":"6b4e2e1 _ 1 year, 11 months ago","text":"<ul> <li>week-4 tree structure course notes are updated</li> </ul> <p>### d511d2c _ 1 year, 11 months ago { id='d511d2c' } - week-2 linkedlist and week-3 stack notes are divided into slides and images are downloaded</p> <p>### f35de68 _ 2 years ago { id='f35de68' } - mkdocs material theme markdown format errors are fixed</p> <p>### 50b9e60 _ 2 years ago { id='50b9e60' } - Week-2 markdown format fixed</p> <p>### 8438912 _ 2 years ago { id='8438912' } - Week-2 and Week-3 Draft Content Generated.</p> <p>### 16c23b3 _ 2 years ago { id='16c23b3' } - Week-3 ASN.1 workshop content updated for Payment, Telco and Digital Signature domains.</p> <p>### 8782e22 _ 2 years ago { id='8782e22' } - git committer and tags plugin enabled</p> <p>### dddf2a8 _ 2 years ago { id='dddf2a8' } - git committer plugin enabled and bat scripts are updated</p> <p>### 74e88d2 _ 2 years ago { id='74e88d2' } - Documentation Updated</p> <p>### 65da8d8 _ 2 years ago { id='65da8d8' } - syllabus updated, week-1-6 notes updated</p> <p>### d35807c _ 2 years, 7 months ago { id='d35807c' } - mathjax scrollbar error fixed</p> <p>### 8e8d187 _ 2 years, 8 months ago { id='8e8d187' } - plantuml.jar updated</p> <p>### 6ac39b8 _ 2 years, 8 months ago { id='6ac39b8' } - object-oriented programming course note link added</p> <p>### a3e0a15 _ 2 years, 8 months ago { id='a3e0a15' } - quick start button broken link fixed</p> <p>### af29ec6 _ 2 years, 8 months ago { id='af29ec6' } - course plan button broken link fixed</p> <p>### a1458cc _ 2 years, 8 months ago { id='a1458cc' } - color updated</p> <p>### be1f10c _ 2 years, 8 months ago { id='be1f10c' } - week-16 final broken link bugfix</p> <p>### 09e0343 _ 2 years, 8 months ago { id='09e0343' } - bugfix for broken links and output regeneration</p> <p>### 74a250b _ 2 years, 8 months ago { id='74a250b' } - plantuml files added</p> <p>### c74a2d7 _ 2 years, 8 months ago { id='c74a2d7' } - outputs generated, bat files added links are added home page</p> <p>### 7441354 _ 2 years, 9 months ago { id='7441354' } - local link updated</p> <p>### ce8fce0 _ 2 years, 9 months ago { id='ce8fce0' } - default files added</p> <p>### c56e021 _ 2 years, 9 months ago { id='c56e021' } - initial commit</p>"},{"location":"project-guide/","title":"Project Guide","text":""},{"location":"project-guide/#homework-project-guideline","title":"Homework &amp; Project Guideline","text":"<ul> <li> <p>Complete the homework requirements, prepare them in the format given in the description below until the deadline and time, and upload them to the classroom\u2019s related assignment.</p> </li> <li> <p>You will develop applications and find feasible use-case for following algorithms and will implement your solution.</p> </li> </ul> <p>***Wishing you the best of luck! The grading rubric can be found on Microsoft Teams.**</p>"},{"location":"project-guide/#algorithm-examples","title":"Algorithm Examples","text":"<ul> <li> <p>Double Linked List</p> </li> <li> <p>Sparse Matrix</p> </li> <li> <p>Stack and Queue</p> </li> <li> <p>Heap / Heap Sort</p> </li> <li> <p>Huffman Coding</p> </li> <li> <p>BFS / DFS</p> </li> <li> <p>Strongly Connected Components</p> </li> <li> <p>Hash Table**</p> </li> <li> <p>Huffman Coding for Content Compression</p> </li> <li> <p>B+ Tree for Storage Operations</p> </li> <li> <p>KMP for String Search**</p> </li> <li> <p>File Operations with at least one of them for Fast Search Operations</p> </li> <li> <p>Progressive Overflow</p> </li> <li> <p>Linear Probing</p> </li> <li> <p>Quadratic Probing</p> </li> <li> <p>Double Hashing</p> </li> <li> <p>Use of Buckets</p> </li> <li> <p>Linear Quotient</p> </li> <li> <p>Brent\u2019s Method</p> </li> </ul>"},{"location":"project-guide/#project-description","title":"Project Description","text":""},{"location":"project-guide/#project-selection","title":"Project Selection","text":"<p>Choose an application from the provided appendix. Ensure no two teams select the same application to prevent plagiarism. Teams are self-formed; projects are not pre-assigned by us. Also, if you have taken this course again do not select the same project as other courses. You will select a single project idea and you will use develop same project in C/C++, Java and Csharp with prepared project templates for you.</p>"},{"location":"project-guide/#project-setup","title":"Project Setup:","text":"<p>Fork the templates from following repositories</p> <ul> <li> <p>C/C++ Cmake </p> </li> <li> <p>https://github.com/ucoruh/cpp-cmake-ctest-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-cpp</code></p> </li> <li> <p>Net Core Csharp </p> </li> <li> <p>https://github.com/ucoruh/vs-net-core-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-csharp</code></p> </li> <li> <p>Java Maven </p> </li> <li> <p>https://github.com/ucoruh/eclipse-java-maven-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-java</code></p> </li> </ul> <p>Your code must reside in a private GitHub repository, accessible only to us.</p>"},{"location":"project-guide/#development","title":"Development:","text":"<p>Construct a console application where the main functionality is housed within a separate library. This console application will utilize the said library for its operations. If There is a storage operation use binary files to record data. If There is a socket communications, APIs or Integrations with Remote services generate mockups to simulate operations. Each project idea has menu tree to define operations you should complete all operations and for console menu operations use keyboard arrows or tab for option and menu selections.</p>"},{"location":"project-guide/#team-collaboration","title":"Team Collaboration:","text":"<p>Include your team members in the GitHub project. There should be only one project repository for each team.</p>"},{"location":"project-guide/#instructor-collaboration","title":"Instructor Collaboration:","text":"<p>Add your instructor as a collaborator on the project.</p>"},{"location":"project-guide/#repository-privacy","title":"Repository Privacy:","text":"<p>Maintain the privacy of your repository. Public repositories will be treated as instances of plagiarism.</p>"},{"location":"project-guide/#development-documentation","title":"Development &amp; Documentation:","text":"<p>Develop the application and its accompanying unit tests. Document both the application and the library using Doxygen.</p>"},{"location":"project-guide/#template-usage","title":"Template Usage:","text":"<p>Ensure comprehensive utilization of the provided template. The template aids in building, testing, generating documentation, measuring test and documentation coverages, and packaging essential files. Failure to adhere to the template standards will result in non-acceptance.</p>"},{"location":"project-guide/#coverage-thresholds","title":"Coverage Thresholds:","text":"<p>Achieve a minimum of 100%-unit test coverage and 100% documentation coverage for project acceptance.</p>"},{"location":"project-guide/#platform-compatibility","title":"Platform Compatibility:","text":"<p>Ensure your application is compatible with both WSL/Linux and Windows OS.</p>"},{"location":"project-guide/#coding-standards","title":"Coding Standards:","text":"<p>Pay meticulous attention to your coding style, including function and variable naming conventions.</p>"},{"location":"project-guide/#presentation","title":"Presentation:","text":"<p>Prepare a presentation deck, with a limit of 10 slides, detailing your project.</p>"},{"location":"project-guide/#video-submission","title":"Video Submission:","text":"<p>Record a video presentation of your project. Each team member should contribute to the video, which should not exceed 4 minutes in total duration.</p>"},{"location":"project-guide/#contribution-tracking","title":"Contribution Tracking:","text":"<p>Individual contributions will be tracked via git commits. Commit frequently to reflect your involvement accurately.</p>"},{"location":"project-guide/#repository-management","title":"Repository Management:","text":"<p>On your GitHub, ensure well-maintained README.md files, gitignore, git usage notes, collaboration ratios, and manage merges/conflict resolutions. Documentation coverage will be evaluated in your repository.</p>"},{"location":"project-guide/#report-submission","title":"Report Submission:","text":"<p>Submit a detailed report named ce205-final-name-surname.docx.</p>"},{"location":"project-guide/#classroom-code-submission","title":"Classroom Code Submission:","text":"<p>Share your code in Classroom, excluding binaries. Any binary files present will result in a penalty. Remove any superfluous files.</p>"},{"location":"project-guide/#code-understanding","title":"Code Understanding:","text":"<p>Comment on your code thoroughly, providing explanations for your logic. Only submit work you understand.</p>"},{"location":"project-guide/#code-aesthetics","title":"Code Aesthetics:","text":"<p>Ensure your code is neatly formatted and indented for clarity.</p>"},{"location":"project-guide/#file-management","title":"File Management:","text":"<p>Ensure correct project and file types.</p>"},{"location":"project-guide/#code-quality","title":"Code Quality:","text":"<p>Do not submit malfunctioning or bug-ridden code.</p>"},{"location":"project-guide/#test-results","title":"Test Results:","text":"<p>Your project's test outcomes must be accurate.</p>"},{"location":"project-guide/#algorithm-explanation","title":"Algorithm Explanation:","text":"<p>If your project involves algorithmic solutions, provide a step-by-step explanation of your methods.</p>"},{"location":"project-guide/#source-code-naming","title":"Source Code Naming:","text":"<p>The source code should be archived and named as ce205-final-name-surname.rar. This archive should contain the Visual Studio solution cloned from GitHub.</p>"},{"location":"project-guide/#originality","title":"Originality:","text":"<p>Do not replicate someone else's code. We will employ software to detect similarities. Take ownership of the provided source codes and make them uniquely yours. Strict plagiarism checks will be in place.</p>"},{"location":"project-guide/#documentation-sharing","title":"Documentation Sharing:","text":"<p>Only share the Doxygen-generated PDF documentation. Refrain from sending any HTML or other auto-generated documentation components.</p>"},{"location":"project-guide/#warning","title":"Warning:","text":"<p>Relying on tools like ChatGPT for your project development or documentation is discouraged. Authenticity and originality are paramount.</p>"},{"location":"project-guide/#devops","title":"DevOps:","text":"<p>Csharp and Java templates should create releases.</p>"},{"location":"project-guide/#homework-check-thresholds","title":"Homework Check Thresholds","text":"<p>(If Below are Not Provided Homework won\u2019t be Accepted)</p> <ul> <li> <p>If No Submission or Missing Submission, No Github Repository or No Collaborative Work. </p> </li> <li> <p>No Releases for Csharp and Java Templates</p> </li> <li> <p>If Documentation Coverage and Unit Test Coverage is Below %100</p> </li> <li> <p>If Release Folders with All Files Are Not Generated Correctly, if you cannot use CMake, Maven and .Net Core Templates correctly. </p> </li> <li> <p>If Unit Tests are Not Exist</p> </li> <li> <p>If Plagiarism Detected</p> </li> </ul>"},{"location":"project-guide/#these-questions-will-be-asked-to-you-during-review","title":"These Questions Will Be Asked to You During Review","text":""},{"location":"project-guide/#github-and-git-usage","title":"Github and Git Usage","text":"<ul> <li> <p>Did you used following templates </p> </li> <li> <p>C/C++ Cmake</p> </li> <li> <p>https://github.com/ucoruh/cpp-cmake-ctest-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-cpp</p> </li> <li> <p>.Net Core Csharp</p> </li> <li> <p>https://github.com/ucoruh/vs-net-core-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-csharp</p> </li> <li> <p>Java Maven</p> </li> <li> <p>https://github.com/ucoruh/eclipse-java-maven-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-java</p> </li> <li> <p>Did you open Private Github Repository with Correct naming ce205-final-name-surname prefix, there should be three repository for each team. </p> </li> <li> <p>Did you work with your friend is there any collaboration commits?</p> </li> <li> <p>Did you commit frequently?</p> </li> <li> <p>What are merger and conflict operations?</p> </li> <li> <p>Did you work on separate branches?</p> </li> <li> <p>Did you configure your e-mail with the correct name surname to profile and make your profile public?</p> </li> <li> <p>Did you upload your picture to Github repository?</p> </li> <li> <p>Did you configure pre-commit scripts with 1-configure-pre-commit.bat to avoid errors. </p> </li> <li> <p>Did you configure your gitignore file if there is a file that should be in projects?</p> </li> <li> <p>Did you generated releases on Github for maven and .netcore templates.</p> </li> </ul>"},{"location":"project-guide/#homework-submission","title":"Homework Submission","text":"<ul> <li> <p>Did you generate release files and submit your homework to Microsoft Teams?</p> </li> <li> <p>Project repository without files that configured in gitignore</p> </li> <li> <p>Windows and Linux also MacOS Release Files (example outputs)</p> </li> <li> <p>Did you submit Video 4 minute for each team member that you explained project?</p> </li> <li> <p>Did you submit Presentation 10 Pages that you prepared as startup concept to explain your project.</p> </li> </ul>"},{"location":"project-guide/#development-environment-setup","title":"Development Environment Setup","text":"<ul> <li> <p>Did you install WSL for Linux Development</p> </li> <li> <p>Did you install choco and scoop on Both Windows and WSL</p> </li> <li> <p>Test with choco \u2013version and scoop \u2013version</p> </li> <li> <p>Installed with 3-install-package-manager.bat. </p> </li> <li> <p>Did you install Windows and Linux Environment with Batch Scripts</p> </li> <li> <p>Windows Environment Installed with 4-install-windows-enviroment.bat.</p> </li> <li> <p>Linux Environment Installed with 4-install-wsl-environment.sh.</p> </li> <li> <p>Did you configure the project with 9-clean-configure-app-windows.bat to generate a Visual Studio Community Edition Solution for Programming. </p> </li> <li> <p>Did you try Open Project Folder with Visual Studio Community Edition to Develop Directly from Cmakelist.txt Scripts. </p> </li> </ul>"},{"location":"project-guide/#project-folder-structure-and-cmake-configuration","title":"Project Folder Structure and CMake Configuration","text":"<ul> <li> <p>Did you organize the project as an app, lib, and test like calculator examples?</p> </li> <li> <p>Did you locate your project\u2019s common functions in lib? </p> </li> <li> <p>Did you develop unit tests for library function these are located on test project?</p> </li> <li> <p>Did you integrate unit tests?</p> </li> <li> <p>Did you reference lib from both app and test projects? </p> </li> </ul>"},{"location":"project-guide/#project-feature-checklist","title":"Project Feature Checklist","text":"<ul> <li> <p>Does your application work on both Windows and WSL, Open Windows Command line and WSL and Show Running Applications. Run Application from Directly Executables. </p> </li> <li> <p>Did you complete your application requirement features, open console application and show usage?</p> </li> <li> <p>Show file operations adding, editing, deleting, and listing records etc. </p> </li> <li> <p>Show menu operations, are they managed with keyboards.</p> </li> <li> <p>In file operations did you use structures.</p> </li> <li> <p>Did you use binary files to store your records?</p> </li> <li> <p>Show your unit tests and unit test coverages.</p> </li> <li> <p>Show your documentation and documentation coverage.</p> </li> <li> <p>Open Doxygen outputs, did you configure Doxygen files.</p> </li> <li> <p>Did you test inputs with unit tests?</p> </li> </ul>"},{"location":"project-guide/#programming-skills-checklist-cc-java-and-csharp-net-core-maven-and-cmake","title":"Programming Skills Checklist C/C++, Java and Csharp .Net Core, Maven and CMake","text":"<ul> <li> <p>Ask Questions about C/C++ Flow Controls</p> </li> <li> <p>If/Else, While, For etc.</p> </li> <li> <p>Ask Questions about Pointers and Arrays</p> </li> <li> <p>Ask Questions about Structures</p> </li> <li> <p>Ask Questions about Dynamic Memory Allocations Malloc/Free New/Delete</p> </li> <li> <p>Ask Questions about File Read/Write Operations</p> </li> <li> <p>Ask Questions about Preprocessors</p> </li> <li> <p>Ask Questions about Functions and Types, Function Parameter Usage, Passing Parameters as a Reference etc.</p> </li> <li> <p>Ask Questions about Cross-Compile Operations.</p> </li> <li> <p>Ask Questions about to show how Call stack checked on Visual Studio</p> </li> <li> <p>Ask Questions about how to debug applications and see variables.</p> </li> <li> <p>Ask Questions about how to see memory during debug.</p> </li> <li> <p>Ask Questions about configuration types x86/Wind32 and x64 Differences. </p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"project-guide/#appendix-application-list","title":"Appendix \u2013 Application List","text":""},{"location":"project-guide/#01-book-exchange-platform","title":"01-Book Exchange Platform:","text":"<ul> <li> <p>Listing books for exchange.</p> </li> <li> <p>Managing exchange requests.</p> </li> <li> <p>Rating system for users.</p> </li> <li> <p>Tracking exchange history.</p> </li> </ul>"},{"location":"project-guide/#common-features","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Implement a login system to allow registered users to access the platform. Users should be able to create accounts and log in securely.</p> </li> <li> <p>Book Database: Create a file to store information about books available for exchange. Each book entry should include details like title, author, genre, and owner.</p> </li> <li> <p>Menu System: Design a user-friendly console menu system to navigate through various options in the application. Users can use keyboard inputs to select menu items.</p> </li> <li> <p>Search and Listing: Allow users to search for books based on criteria like title, author, or genre. Users should also be able to list their own books for exchange.</p> </li> <li> <p>Exchange Requests: Users should be able to send and receive exchange requests for books. Include options to accept or decline requests from console application.</p> </li> <li> <p>Rating System: Implement a rating system where users can rate and leave reviews for each other after a successful exchange. Display user ratings alongside their profiles.</p> </li> <li> <p>History Tracking: Keep a record of all past exchange transactions, including details of the books exchanged, date, and user information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store book information and transaction history in binary files.</p> </li> <li> <p>Implement a text-based UI for the console menu.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details","title":"C# Specific Details:","text":"<ul> <li>Use C#'s file handling capabilities to manage data storage.</li> </ul> <p>Create a well-structured console application using the Console class for user interactions. Remember to optimize the code for efficient data storage and retrieval, error handling, and user experience. These are the core features you can include in your console application for a Book Exchange Platform in these programming languages. You can further enhance the functionality based on your specific requirements.</p> <p></p>"},{"location":"project-guide/#02-personal-time-tracker","title":"02-Personal Time Tracker:","text":"<ul> <li> <p>Activity logging.</p> </li> <li> <p>Time spent analysis.</p> </li> <li> <p>Productivity reports.</p> </li> <li> <p>Break reminders.</p> </li> </ul>"},{"location":"project-guide/#common-features_1","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts and log in securely to track their time. Implement user profiles with usernames and passwords.</p> </li> <li> <p>Activity Logging: Provide a way for users to log their activities throughout the day. They should be able to enter details such as activity name, start time, and end time.</p> </li> <li> <p>Time Spent Analysis: Calculate and display the total time spent on each activity, both daily and over longer periods. Present this information in a clear and concise manner.</p> </li> <li> <p>Productivity Reports: Generate productivity reports based on the logged data. These reports can include graphs or charts to visualize time spent on different activities.</p> </li> <li> <p>Break Reminders: Implement a feature to remind users to take regular breaks. Users can set the duration between breaks and receive notifications.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_1","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store activity logs and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log activities and view reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_1","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_1","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like data export (e.g., exporting reports to a CSV file), customizable break reminders, and the ability to categorize activities for more detailed analysis. Ensure that the application is optimized for performance and user-friendly for efficient time tracking and analysis.</p> <p></p>"},{"location":"project-guide/#03-digital-journaldiary","title":"03-Digital Journal/Diary:","text":"<ul> <li> <p>Daily entry logging.</p> </li> <li> <p>Search and filter entries.</p> </li> <li> <p>Password protection.</p> </li> <li> <p>Mood tracking.</p> </li> </ul>"},{"location":"project-guide/#common-features_2","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. Password protection ensures the privacy and security of journal entries.</p> </li> <li> <p>Daily Entry Logging: Provide users with the ability to create daily journal entries. Each entry should include a date, time, and the option to write down thoughts, experiences, or notes.</p> </li> <li> <p>Search and Filter Entries: Implement a search functionality that allows users to find specific journal entries by date, keyword, or mood. Users can filter their entries based on criteria of their choice.</p> </li> <li> <p>Password Protection: Ensure that the journal is password-protected, so only authorized users can access their entries. Passwords should be securely stored.</p> </li> <li> <p>Mood Tracking: Allow users to record their mood for each journal entry, such as happy, sad, stressed, or relaxed. This can help users track their emotional journey over time.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_2","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store journal entries and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, search, and read journal entries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_2","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_2","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider enhancing the application with additional features like the ability to attach images or files to entries, tagging entries with keywords, and generating summary reports based on mood or specific date ranges. Ensure that the application is optimized for performance and provides a secure and user-friendly environment for journaling.</p> <p></p>"},{"location":"project-guide/#04-expense-sharing-among-friends","title":"04-Expense Sharing Among Friends:","text":"<ul> <li> <p>Expense recording and splitting.</p> </li> <li> <p>Balance tracking.</p> </li> <li> <p>Notifications for settlements.</p> </li> <li> <p>Summary of shared expenses.</p> </li> </ul>"},{"location":"project-guide/#common-features_3","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. User accounts will help track expenses and balances accurately.</p> </li> <li> <p>Expense Recording and Splitting: Provide a way for users to record their expenses and split them among friends. Users should be able to enter details such as the expense amount, description, and the friends with whom they are sharing the expense.</p> </li> <li> <p>Balance Tracking: Keep track of the balances between users, showing who owes money to whom. Update balances automatically when expenses are added or settled.</p> </li> <li> <p>Notifications for Settlements: Implement a notification system to inform users when they have pending settlements or when someone has settled an expense with them.</p> </li> <li> <p>Summary of Shared Expenses: Generate a summary of all shared expenses, showing each user's contributions, shared expenses, and balances. This summary can be viewed for individual users or groups of friends.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_3","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store expense data, user accounts, and balances in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to record expenses, view balances, and settle debts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_3","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_3","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense categories, the ability to create and manage groups of friends for shared expenses, and exporting reports to a file for record-keeping. Ensure that the application efficiently handles expense calculations and provides a convenient way for friends to track shared expenses and settle debts.</p> <p></p>"},{"location":"project-guide/#05-virtual-study-timer-pomodoro-technique","title":"05-Virtual Study Timer (Pomodoro Technique):","text":"<ul> <li> <p>Customizable work/break intervals.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder alarms.</p> </li> <li> <p>Statistics on study patterns.</p> </li> </ul>"},{"location":"project-guide/#common-features_4","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts if they want to save their study statistics and preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customizable Work/Break Intervals: Let users customize the length of their work (study) and break intervals. They should be able to set the duration of work sessions and breaks according to their preferences.</p> </li> <li> <p>Progress Tracking: Display a timer that counts down during work sessions and break periods. Users should be able to see the remaining time for their current task.</p> </li> <li> <p>Reminder Alarms: Provide users with optional reminder alarms at the end of each work session and break to notify them to switch tasks. Allow them to choose their preferred sound or notification method.</p> </li> <li> <p>Statistics on Study Patterns: Keep track of study patterns, such as the number of completed work sessions, total study time, and average session length. Generate statistics and charts to help users analyze their study habits.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_4","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user preferences and study statistics in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to start, pause, and customize study sessions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_4","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_4","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to set long-term study goals, analyze historical study data, and export statistics for future reference. Ensure that the application is optimized for efficient time management and provides a motivating environment for productive study sessions.</p> <p></p>"},{"location":"project-guide/#06-diet-planner","title":"06-Diet Planner:","text":"<ul> <li> <p>Meal planning and logging.</p> </li> <li> <p>Calorie and nutrient tracking.</p> </li> <li> <p>Personalized diet recommendations.</p> </li> <li> <p>Shopping list generator.</p> </li> </ul>"},{"location":"project-guide/#common-features_5","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their diet plans and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Meal Planning and Logging: Provide a way for users to plan their meals for the day or week. Allow users to log the foods and portions they consume for each meal.</p> </li> <li> <p>Calorie and Nutrient Tracking: Implement a calorie and nutrient tracker that calculates the total calorie intake and nutritional values based on the logged foods. Users can set daily calorie and nutrient goals.</p> </li> <li> <p>Personalized Diet Recommendations: Offer personalized diet recommendations based on user profiles, including age, gender, weight, height, and dietary preferences (e.g., vegetarian, vegan, or low-carb).</p> </li> <li> <p>Shopping List Generator: Generate a shopping list based on the meal plans and recipes selected by the user. The list should include the quantities of ingredients needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_5","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, meal plans, and diet data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan meals, log food, and view nutrition information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_5","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_5","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a food database with nutritional information, the ability to track weight and fitness goals, and meal plan sharing with friends or nutritionists. Ensure that the application provides accurate nutritional information and helps users make healthier dietary choices.</p> <p></p>"},{"location":"project-guide/#07-personal-career-tracker","title":"07-Personal Career Tracker:","text":"<ul> <li> <p>Job application tracker.</p> </li> <li> <p>Skill development progress.</p> </li> <li> <p>Interview preparation notes.</p> </li> <li> <p>Career milestone logging.</p> </li> </ul>"},{"location":"project-guide/#common-features_6","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their career tracking and store their data securely.</p> </li> <li> <p>Job Application Tracker: Provide a way for users to track their job applications. Users can log details such as the company name, position applied for, application date, and status of the application (e.g., pending, rejected, interview scheduled).</p> </li> <li> <p>Skill Development Progress: Implement a skill development tracker where users can list their skills and track their progress in acquiring and improving those skills. They can set goals and log achievements.</p> </li> <li> <p>Interview Preparation Notes: Allow users to create and store interview preparation notes for specific job applications. This can include details about the company, job role, common interview questions, and personal notes.</p> </li> <li> <p>Career Milestone Logging: Enable users to log and celebrate career milestones and achievements, such as promotions, certifications, or completed projects.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_6","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, job application data, skill progress, interview notes, and career milestones in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, edit, and view career-related information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_6","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_6","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like goal setting for career development, the ability to export reports for job applications and skill progress, and integration with job search websites for streamlined application tracking. Ensure that the application helps users stay organized and motivated in their career pursuits.</p> <p></p>"},{"location":"project-guide/#08-password-manager","title":"08-Password Manager:","text":"<ul> <li> <p>Secure storage of passwords.</p> </li> <li> <p>Password generator.</p> </li> <li> <p>Auto-login feature.</p> </li> <li> <p>Multi-platform compatibility.</p> </li> </ul>"},{"location":"project-guide/#common-features_7","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create a master password to access the password manager securely. This master password should be securely stored and used to encrypt and decrypt stored passwords.</p> </li> <li> <p>Secure Storage of Passwords: Implement secure storage for passwords using encryption algorithms to protect sensitive data. Passwords should be organized by categories or accounts for easy retrieval.</p> </li> <li> <p>Password Generator: Provide a password generation feature to create strong, unique passwords for various online accounts. Users can specify password length and complexity.</p> </li> <li> <p>Auto-Login Feature: Allow users to configure auto-login for selected accounts. When enabled, the password manager can automatically enter the credentials for a specific website or application.</p> </li> <li> <p>Multi-Platform Compatibility: Ensure that the password manager is compatible with multiple platforms, such as Windows, macOS, Linux, and mobile devices (Android and iOS). You can create separate versions for different platforms if needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_7","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store encrypted password data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage passwords, generate passwords, and enable auto-login.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_7","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_7","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For multi-platform compatibility, consider creating a command-line interface (CLI) version of the password manager that can run on different operating systems. Additionally, ensure that the application follows industry best practices for encryption and security to protect user passwords effectively.</p> <p></p>"},{"location":"project-guide/#09-yogameditation-scheduler","title":"09-Yoga/Meditation Scheduler:","text":"<ul> <li> <p>Session scheduling.</p> </li> <li> <p>Pose and technique library.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder for daily practice.</p> </li> </ul>"},{"location":"project-guide/#common-features_8","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their yoga/meditation practice and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Session Scheduling: Provide a way for users to schedule their yoga or meditation sessions. Users can specify the date, time, duration, and type of practice (e.g., yoga, meditation, specific poses).</p> </li> <li> <p>Pose and Technique Library: Include a library with a collection of yoga poses, meditation techniques, and breathing exercises. Users can browse and select from this library when scheduling their sessions.</p> </li> <li> <p>Progress Tracking: Implement a progress tracker that records the user's practice history. Track factors like the number of sessions completed, session duration, and improvements in flexibility or mindfulness.</p> </li> <li> <p>Reminder for Daily Practice: Allow users to set reminders for their daily yoga or meditation practice. Users can choose to receive notifications or alarms at their preferred practice times.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_8","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, session data, and progress tracking in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to schedule sessions, view progress, and set reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_8","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_8","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to create custom sessions, track mood or stress levels before and after practice, and provide guided audio or video instructions for sessions. Ensure that the application encourages regular yoga and meditation practice and helps users improve their well-being.</p> <p></p>"},{"location":"project-guide/#10-coding-snippet-manager","title":"10-Coding Snippet Manager:","text":"<ul> <li> <p>Storing and categorizing code snippets.</p> </li> <li> <p>Search functionality.</p> </li> <li> <p>Sharing snippets with others.</p> </li> <li> <p>Integrations with popular IDEs.</p> </li> </ul>"},{"location":"project-guide/#common-features_9","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized code snippet management and tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Storing and Categorizing Code Snippets: Provide a way for users to store and categorize their code snippets based on programming languages, frameworks, or specific projects. Users can add titles, descriptions, and tags to each snippet.</p> </li> <li> <p>Search Functionality: Implement a robust search functionality that allows users to search for code snippets using keywords, tags, or programming languages. Display search results with relevant snippets.</p> </li> <li> <p>Sharing Snippets with Others: Enable users to share their code snippets with others, either through a public repository or by sharing a link. Users can set visibility options for their snippets (public, private, or shared with specific users).</p> </li> <li> <p>Integrations with Popular IDEs: Integrate the code snippet manager with popular Integrated Development Environments (IDEs) like Visual Studio Code, IntelliJ IDEA, or Visual Studio. Users can easily import and export snippets directly from their development environment.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_9","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, code snippets, and sharing settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage snippets, search, and share.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_9","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_9","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For integrations with IDEs, consider creating plugins or extensions that seamlessly connect the code snippet manager to developers' preferred development environments. Additionally, allow users to rate and comment on shared code snippets to foster a collaborative coding community. Ensure that the application helps developers manage and find code snippets efficiently.</p> <p></p>"},{"location":"project-guide/#11-home-renovation-planner","title":"11-Home Renovation Planner:","text":"<ul> <li> <p>Project and budget planning.</p> </li> <li> <p>Task assignment and tracking.</p> </li> <li> <p>Cost analysis and reporting.</p> </li> <li> <p>Supplier and contractor database.</p> </li> </ul>"},{"location":"project-guide/#common-features_10","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their renovation projects and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project and Budget Planning: Provide a way for users to plan their home renovation projects. Users can specify project details, including scope, timeline, and budget. They can also set milestones and goals.</p> </li> <li> <p>Task Assignment and Tracking: Implement task management features that allow users to assign tasks to team members or contractors. Users can track the status of each task and set deadlines.</p> </li> <li> <p>Cost Analysis and Reporting: Create tools for users to track project expenses. Users can enter costs for materials, labor, and other expenses. Generate reports that provide a breakdown of expenses and budget status.</p> </li> <li> <p>Supplier and Contractor Database: Include a database where users can store information about suppliers, contractors, and service providers. Users can add contact details, reviews, and project history.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_10","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, task assignments, and cost records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan projects, assign tasks, and view cost reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_10","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_10","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like document management for project plans and contracts, a calendar for scheduling tasks and deadlines, and the ability to export reports in various formats (PDF, CSV). Ensure that the application helps users efficiently plan and manage their home renovation projects within budget and on schedule.</p> <p></p>"},{"location":"project-guide/#12-car-maintenance-log","title":"12-Car Maintenance Log:","text":"<ul> <li> <p>Service history tracking.</p> </li> <li> <p>Maintenance reminders.</p> </li> <li> <p>Expense logging.</p> </li> <li> <p>Fuel efficiency reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_11","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized car maintenance tracking and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Service History Tracking: Provide a way for users to log and track the service history of their vehicles. Users can record details such as service date, type of service (e.g., oil change, tire rotation), service provider, and cost.</p> </li> <li> <p>Maintenance Reminders: Implement a reminder system that notifies users when it's time for scheduled maintenance tasks (e.g., oil change, brake inspection) based on mileage or time intervals.</p> </li> <li> <p>Expense Logging: Allow users to log and categorize expenses related to their vehicles, including fuel costs, repairs, and maintenance. Users can track expenses over time and generate reports.</p> </li> <li> <p>Fuel Efficiency Reports: Calculate and provide fuel efficiency reports that show metrics like miles per gallon (MPG) or liters per 100 kilometers (L/100km). Users can see their vehicle's fuel efficiency trends.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_11","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vehicle data, service records, expense logs, and reminders in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log maintenance, view reminders, and generate reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_11","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_11","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to store vehicle specifications (make, model, year), upload and store service invoices, and generate charts or graphs to visualize maintenance and fuel efficiency trends. Ensure that the application helps users keep their vehicles well-maintained and cost-efficient.</p> <p></p>"},{"location":"project-guide/#13-music-practice-scheduler","title":"13-Music Practice Scheduler:","text":"<ul> <li> <p>Instrument practice logging.</p> </li> <li> <p>Set goals and track progress.</p> </li> <li> <p>Reminder for practice sessions.</p> </li> <li> <p>Music theory reference.</p> </li> </ul>"},{"location":"project-guide/#common-features_12","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized music practice tracking and progress monitoring. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Instrument Practice Logging: Provide a way for users to log their instrument practice sessions. Users can record details such as practice date, instrument played, duration, and specific exercises or pieces practiced.</p> </li> <li> <p>Goal Setting and Progress Tracking: Implement goal-setting features that allow users to set specific practice goals (e.g., learning a new song, mastering a technique) and track their progress over time. Show statistics and progress reports.</p> </li> <li> <p>Reminder for Practice Sessions: Set up a reminder system to notify users of scheduled practice sessions. Users can configure practice session reminders at preferred times.</p> </li> <li> <p>Music Theory Reference: Include a built-in music theory reference section where users can access information on music theory concepts, scales, chords, and more to aid their practice.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_12","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, practice session data, practice goals, and progress records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log practice sessions, set goals, and view progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_12","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_12","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a metronome tool, the ability to record and playback practice sessions, and practice session sharing with teachers or fellow musicians. Ensure that the application motivates users to practice regularly and helps them achieve their musical goals.</p> <p></p>"},{"location":"project-guide/#14-household-chore-scheduler","title":"14-Household Chore Scheduler:","text":"<ul> <li> <p>Chore assignment for family members.</p> </li> <li> <p>Schedule and reminder setup.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reward system for completed chores.</p> </li> </ul>"},{"location":"project-guide/#common-features_13","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow family members to create accounts or profiles within the application. This can help personalize chore assignments and tracking for each user.</p> </li> <li> <p>Chore Assignment for Family Members: Implement a system for assigning chores to family members. Users can specify the chore, assign it to a family member, and set due dates or frequencies (e.g., daily, weekly).</p> </li> <li> <p>Schedule and Reminder Setup: Enable users to set up schedules for chore completion and receive reminders when chores are due. Reminders can be sent through notifications or emails.</p> </li> <li> <p>Progress Tracking: Create a progress tracker that records completed chores and shows which family members are actively participating in household tasks. Users can view their own progress and that of others.</p> </li> <li> <p>Reward System for Completed Chores: Implement a reward or incentive system where family members earn points or rewards for completing chores. Users can redeem points for rewards determined by the family.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_13","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, chore assignments, progress records, and reward data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to assign chores, set schedules, and track progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_13","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_13","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a leaderboard to track the most active family members in completing chores, a messaging system for communication between family members, and the ability to customize rewards based on the family's preferences. Ensure that the application promotes a fair distribution of household responsibilities and encourages family members to contribute to chores.</p> <p></p>"},{"location":"project-guide/#15-personal-energy-consumption-tracker","title":"15-Personal Energy Consumption Tracker:","text":"<ul> <li> <p>Monitoring energy use in the home.</p> </li> <li> <p>Tips for reducing consumption.</p> </li> <li> <p>Cost calculation based on usage.</p> </li> <li> <p>Carbon footprint analysis.</p> </li> </ul>"},{"location":"project-guide/#common-features_14","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their energy consumption tracking and access historical data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Monitoring Energy Use in the Home: Implement a system for monitoring energy consumption in the home. Users can input data from utility bills or use smart meters to track electricity and gas usage. The application can also integrate with IoT devices to capture real-time data.</p> </li> <li> <p>Tips for Reducing Consumption: Provide energy-saving tips and recommendations to help users reduce their energy consumption. These tips can be based on usage patterns and historical data.</p> </li> <li> <p>Cost Calculation Based on Usage: Calculate and display the cost of energy consumption based on usage. Users can input their utility rates, and the application calculates and displays the cost of energy use over time.</p> </li> <li> <p>Carbon Footprint Analysis: Analyze the carbon footprint associated with energy consumption. Show users the environmental impact of their energy use and provide suggestions for reducing carbon emissions.</p> </li> </ul> <p>#### C/C++ Specific Details:</p> <ul> <li> <p>Use file handling to store user profiles, energy consumption data, and cost calculations in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to input data, view energy usage, and receive tips and reports.</p> </li> </ul> <p>#### Java Specific Details:</p> <ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul> <p>#### C# Specific Details:</p> <ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to set energy-saving goals, view historical consumption trends, and receive notifications or alerts when energy usage exceeds predefined thresholds. Ensure that the application helps users make informed decisions about their energy consumption and contributes to environmental sustainability.</p> <p></p>"},{"location":"project-guide/#16-kids-activity-planner","title":"16-Kids\u2019 Activity Planner:","text":"<ul> <li> <p>Educational resource integration.</p> </li> <li> <p>Scheduling activities and playdates.</p> </li> <li> <p>Development milestone tracker.</p> </li> <li> <p>Parental notes and reminders.</p> </li> </ul>"},{"location":"project-guide/#common-features_15","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow parents or caregivers to create accounts to personalize the activity planning for their children. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Scheduling Activities and Playdates: Implement a calendar or scheduling system where parents can plan and schedule activities, playdates, and events for their kids. Parents can set date, time, location, and descriptions for each activity.</p> </li> <li> <p>Educational Resource Integration: Integrate educational resources such as educational games, videos, or articles relevant to children's    development. Parents can access and share these resources with their kids.</p> </li> <li> <p>Development Milestone Tracker: Provide a milestone tracking feature that helps parents monitor their child's developmental progress. Parents can record and view milestones achieved in areas like language development, motor skills, and social interactions.</p> </li> <li> <p>Parental Notes and Reminders: Allow parents to add notes and reminders related to their children's activities and development. These can include specific instructions, appointments, or important dates.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_14","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, activity schedules, milestone records, and notes in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan activities, track milestones, and view reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_14","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_14","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a child-friendly interface for age-appropriate educational resources, a growth chart to visualize development progress, and the ability to share activities and milestones with other family members or caregivers. Ensure that the application supports parents in planning engaging and educational activities for their kids and helps track their developmental milestones.</p> <p></p>"},{"location":"project-guide/#17-freelance-client-manager","title":"17-Freelance Client Manager:","text":"<ul> <li> <p>Client information storage.</p> </li> <li> <p>Project tracking and deadlines.</p> </li> <li> <p>Payment reminders.</p> </li> <li> <p>Communication log.</p> </li> </ul>"},{"location":"project-guide/#common-features_16","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelancers to create accounts to personalize their client management and project tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Client Information Storage: Implement a system for storing client information, including contact details, project history, and any specific preferences or requirements.</p> </li> <li> <p>Project Tracking and Deadlines: Provide tools for freelancers to track ongoing projects, including project names, descriptions, deadlines, and progress status. The application can help manage multiple projects simultaneously.</p> </li> <li> <p>Payment Reminders: Set up a reminder system to notify freelancers of upcoming payment deadlines or milestones. Users can configure payment reminders based on project terms.</p> </li> <li> <p>Communication Log: Create a log for recording and storing communication with clients. This can include emails, messages, and notes related to specific projects or clients.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_15","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, client data, project details, payment records, and communication logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add and manage client information, track projects, and set payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_15","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_15","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to generate invoices, track expenses related to freelance work, and export reports for financial analysis. Ensure that the application helps freelancers stay organized, meet deadlines, and effectively manage client relationships.</p> <p></p>"},{"location":"project-guide/#18-personal-reading-challenge-tracker","title":"18-Personal Reading Challenge Tracker:","text":"<ul> <li> <p>Setting reading goals.</p> </li> <li> <p>Tracking books read.</p> </li> <li> <p>Sharing reviews and ratings.</p> </li> <li> <p>Generating reading statistics.</p> </li> </ul>"},{"location":"project-guide/#common-features_17","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized reading challenge tracking and sharing. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Setting Reading Goals: Implement a system where users can set reading goals for a specific time period (e.g., yearly, monthly, or custom). Goals can include the number of books to read or reading time targets.</p> </li> <li> <p>Tracking Books Read: Provide a way for users to log and track the books they've read. Users can record book titles, authors, genres, and dates of completion.</p> </li> <li> <p>Sharing Reviews and Ratings: Allow users to write book reviews and provide ratings for the books they've read. Users can share their reviews with others in the community.</p> </li> <li> <p>Generating Reading Statistics: Generate statistics and charts to show users their reading progress. This can include the number of books read, reading time, genres explored, and more.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_16","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, reading goals, book records, reviews, and statistics in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to set goals, log books, write reviews, and view reading statistics.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_16","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_16","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a book recommendation system based on reading preferences, the ability to join or create reading challenges with friends, and the option to export reading statistics to share on social media. Ensure that the application motivates users to achieve their reading goals and provides a platform for discussing books and sharing recommendations with others.</p> <p></p>"},{"location":"project-guide/#19-greenhouse-management-tool","title":"19-Greenhouse Management Tool:","text":"<ul> <li> <p>Monitoring plant growth.</p> </li> <li> <p>Watering and fertilization schedule.</p> </li> <li> <p>Pest and disease log.</p> </li> <li> <p>Climate control settings.</p> </li> </ul>"},{"location":"project-guide/#common-features_18","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow greenhouse managers or gardeners to create accounts to personalize their greenhouse management and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Monitoring Plant Growth: Implement a system for monitoring the growth of plants in the greenhouse. Users can track the growth stages, health status, and any specific observations for each plant type.</p> </li> <li> <p>Watering and Fertilization Schedule: Provide tools for setting up watering and fertilization schedules based on plant type, soil moisture, and growth stage. Users can receive notifications when it's time to water or fertilize.</p> </li> <li> <p>Pest and Disease Log: Create a log for recording instances of pests and diseases affecting plants. Users can document the issue, treatment applied, and the outcome. This helps in identifying recurring problems.</p> </li> <li> <p>Climate Control Settings: Allow users to manage climate control settings such as temperature, humidity, and ventilation. Users can set ideal conditions for different plant types and receive alerts for climate anomalies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_17","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant growth data, watering schedules, pest logs, and climate control settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to monitor plant growth, set schedules, and record pest and disease occurrences.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_17","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_17","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like data visualization (e.g., charts showing plant growth trends), plant-specific care guides, and the ability to export data for analysis or sharing with gardening communities. Ensure that the application helps greenhouse managers maintain healthy and thriving plants while effectively managing greenhouse conditions.</p> <p></p>"},{"location":"project-guide/#20-music-festival-planner","title":"20-Music Festival Planner:","text":"<ul> <li> <p>Band and artist management.</p> </li> <li> <p>Scheduling performances.</p> </li> <li> <p>Ticket sales tracking.</p> </li> <li> <p>Vendor and sponsor coordination.</p> </li> </ul>"},{"location":"project-guide/#common-features_19","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow festival organizers to create accounts to personalize their festival planning and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Band and Artist Management: Implement a system for managing information about bands and artists scheduled to perform. Users can enter details like band names, genres, contact information, and performance contracts.</p> </li> <li> <p>Scheduling Performances: Create a scheduling feature where festival organizers can schedule performances, set stage times, and create a festival lineup. Users can view the festival schedule with performance details.</p> </li> <li> <p>Ticket Sales Tracking: Track ticket sales, including the number of tickets sold, revenue generated, and attendee demographics. Users can access real-time sales data and generate reports.</p> </li> <li> <p>Vendor and Sponsor Coordination: Include tools for coordinating vendors and sponsors. Users can manage vendor applications, track sponsor agreements, and ensure that all necessary arrangements are made.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_18","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, band/artist data, performance schedules, ticket sales records, and vendor/sponsor information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage festival details, schedule performances, and track ticket sales.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_18","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_18","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like marketing and promotion tools, a budget tracker, and a map layout of the festival grounds. Additionally, provide communication features to facilitate coordination with bands, vendors, and sponsors. Ensure that the application streamlines the festival planning process and helps organizers deliver a successful event.</p> <p></p>"},{"location":"project-guide/#21-public-transportation-scheduler","title":"21-Public Transportation Scheduler:","text":"<ul> <li> <p>Bus and train schedules.</p> </li> <li> <p>Route planning.</p> </li> <li> <p>Fare calculation.</p> </li> <li> <p>Delay and disruption alerts.</p> </li> </ul>"},{"location":"project-guide/#common-features_20","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application. This can help personalize transportation planning and tracking.</p> </li> <li> <p>Bus and Train Schedules: Integrate and display real-time or updated schedules for buses and trains. Users can search for routes, view departure times, and plan their journeys.</p> </li> <li> <p>Route Planning: Provide a route planning feature where users can enter their starting and ending points, and the application suggests the most efficient public transportation routes, including transfers and walking directions.</p> </li> <li> <p>Fare Calculation: Calculate and display fare information based on the selected routes, ticket types, and any applicable discounts or promotions. Users can estimate the cost of their journey.</p> </li> <li> <p>Delay and Disruption Alerts: Implement a system that provides users with alerts or notifications about delays, disruptions, or service changes affecting their planned routes. These updates can be sourced from transportation authorities or crowd-sourced data.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_19","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, route data, fare information, and transportation alerts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan routes, calculate fares, and receive alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_19","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_19","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to save favorite routes, provide real-time tracking of public transportation vehicles, and integrate with payment systems for purchasing tickets or passes within the app. Ensure that the application helps users navigate public transportation systems efficiently and stay informed about any disruptions in their travel plans.</p> <p></p>"},{"location":"project-guide/#22-local-farmers-market-directory","title":"22-Local Farmer's Market Directory:","text":"<ul> <li> <p>Listing of local vendors and products.</p> </li> <li> <p>Seasonal produce guide.</p> </li> <li> <p>Price comparison.</p> </li> <li> <p>Market hours and locations.</p> </li> </ul>"},{"location":"project-guide/#common-features_21","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their farmer's market experience, save favorite vendors, and track their purchases. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Listing of Local Vendors and Products: Implement a directory of local farmers, vendors, and their products available at the market. Users can browse through vendor profiles and product listings.</p> </li> <li> <p>Seasonal Produce Guide: Provide a guide that highlights seasonal produce availability. Users can learn about which fruits and vegetables are in season at different times of the year.</p> </li> <li> <p>Price Comparison: Enable users to compare prices for similar products from different vendors. This feature helps users make informed purchasing decisions.</p> </li> <li> <p>Market Hours and Locations: Display information about various farmer's markets, including their hours of operation, locations, and any special events or promotions.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_20","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vendor and product data, seasonal produce guides, and market information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to browse vendors, view produce guides, compare prices, and access market details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_20","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_20","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a map with directions to the farmer's markets, user reviews and ratings for vendors and products, and the ability to create shopping lists based on the selected produce. Ensure that the application promotes local farming and helps users make fresh and sustainable food choices.</p> <p></p>"},{"location":"project-guide/#23-personal-music-library-organizer","title":"23-Personal Music Library Organizer:","text":"<ul> <li> <p>Cataloging music collection.</p> </li> <li> <p>Playlist creation and management.</p> </li> <li> <p>Metadata editing (artist, album, genre).</p> </li> <li> <p>Music recommendation based on preferences.</p> </li> </ul>"},{"location":"project-guide/#common-features_22","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their music library organization, playlists, and recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Cataloging Music Collection: Implement a system for users to catalog their music collection, including adding songs, albums, and artists. Users can import music files or manually enter details.</p> </li> <li> <p>Playlist Creation and Management: Provide tools for creating and managing playlists. Users can add songs from their catalog, reorder tracks, and create themed playlists.</p> </li> <li> <p>Metadata Editing (Artist, Album, Genre): Enable users to edit and update metadata for their music, including artist names, album titles, and genres. This ensures accurate organization and sorting.</p> </li> <li> <p>Music Recommendation based on Preferences: Implement a recommendation engine that suggests songs, albums, or artists based on the user's listening history and preferences. Users can discover new music.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_21","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, music library data, playlist information, metadata changes, and recommendation history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog music, create playlists, edit metadata, and receive music recommendations.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_21","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_21","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like album art display, the ability to rate songs, and integration with online music databases for automatic metadata retrieval. Additionally, offer sharing options for playlists and music recommendations with friends or social media. Ensure that the application helps users organize and enjoy their music collection efficiently.</p> <p></p>"},{"location":"project-guide/#24-virtual-bookshelf-organizer","title":"24-Virtual Bookshelf Organizer:","text":"<ul> <li> <p>Digital cataloging of personal book collection.</p> </li> <li> <p>Book lending and return tracking.</p> </li> <li> <p>Wish list management.</p> </li> <li> <p>Book recommendations based on reading history.</p> </li> </ul>"},{"location":"project-guide/#common-features_23","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their bookshelf organization, lending, and recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Digital Cataloging of Personal Book Collection: Implement a system for users to catalog their personal book collections. Users can enter book titles, authors, genres, and cover images. ISBN or barcode scanning can simplify data entry.</p> </li> <li> <p>Book Lending and Return Tracking: Provide tools for users to track book loans to friends or family members. Users can record who borrowed a book, set due dates, and receive notifications for book returns.</p> </li> <li> <p>Wish List Management: Enable users to create and manage wish lists of books they want to read or acquire. Users can add books to their wish list and mark them as acquired when purchased or borrowed.</p> </li> <li> <p>Book Recommendations based on Reading History: Implement a recommendation engine that suggests books based on the user's reading history and preferences. Users can discover new titles and authors.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_22","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, book catalog data, lending and return records, wish lists, and recommendation history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog books, manage lending, handle wish lists, and receive book recommendations.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_22","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_22","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to rate and review books, search for books by various criteria, and import book details from online databases. Additionally, offer sharing options for book recommendations with friends or social media. Ensure that the application helps users organize their reading materials and discover new books to enjoy.</p> <p></p>"},{"location":"project-guide/#25-basic-genealogy-tracker","title":"25-Basic Genealogy Tracker:","text":"<ul> <li> <p>Family tree creation and editing.</p> </li> <li> <p>Record keeping for family history.</p> </li> <li> <p>Birthday and anniversary reminders.</p> </li> <li> <p>Import/export GEDCOM files.</p> </li> </ul>"},{"location":"project-guide/#common-features_24","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their genealogy tracking and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Family Tree Creation and Editing: Implement tools for creating and editing family trees. Users can add family members, relationships, and relevant details like birth and death dates.</p> </li> <li> <p>Record Keeping for Family History: Provide a system for users to record family history information, including stories, photos, documents, and other historical records related to family members.</p> </li> <li> <p>Birthday and Anniversary Reminders: Set up a reminder system to notify users of upcoming family member birthdays and anniversaries. Users can configure reminders for important dates.</p> </li> <li> <p>Import/Export GEDCOM Files: Support the import and export of GEDCOM (Genealogical Data Communication) files, which are commonly used for sharing genealogical data with other software and users.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_23","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, family tree data, family history records, reminder settings, and GEDCOM files in binary or text format.</p> </li> <li> <p>Create a text-based interface for the console application to create and edit family trees, add family history records, manage reminders, and import/export GEDCOM files.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_23","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_23","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a family member search function, charts and visual representations of family trees, and the ability to generate reports or family history books. Ensure that the application helps users document and preserve their family's genealogical information and history.</p> <p></p>"},{"location":"project-guide/#26-volunteer-event-coordinator","title":"26-Volunteer Event Coordinator:","text":"<ul> <li> <p>Event creation and scheduling.</p> </li> <li> <p>Volunteer registration and assignment.</p> </li> <li> <p>Hours and contribution tracking.</p> </li> <li> <p>Communication platform for updates and alerts.</p> </li> </ul>"},{"location":"project-guide/#common-features_25","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow event organizers and volunteers to create accounts for personalized event coordination and participation. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Event Creation and Scheduling: Implement a system for event organizers to create and schedule volunteer events. Organizers can set event details, dates, times, locations, and roles needed.</p> </li> <li> <p>Volunteer Registration and Assignment: Provide tools for volunteers to register for events and for organizers to assign volunteers to specific roles or tasks within events.</p> </li> <li> <p>Hours and Contribution Tracking: Enable organizers to track volunteer hours and contributions during events. Volunteers can log their hours and provide details of their work.</p> </li> <li> <p>Communication Platform for Updates and Alerts: Include a communication platform for sending updates, reminders, and alerts to registered volunteers. Organizers can inform volunteers about event changes or important information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_24","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, event data, volunteer registrations, hours logged, and communication records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create events, manage volunteer registrations, track hours, and send alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_24","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_24","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like event performance reports, volunteer performance recognition, and a volunteer rating system. Additionally, ensure that the application facilitates efficient communication between organizers and volunteers, making it easier to coordinate and manage volunteer events effectively.</p> <p></p>"},{"location":"project-guide/#27-personal-finance-advisor","title":"27-Personal Finance Advisor:","text":"<ul> <li> <p>Budget planning and tracking.</p> </li> <li> <p>Investment portfolio management.</p> </li> <li> <p>Financial goal setting.</p> </li> <li> <p>Debt reduction strategies.</p> </li> </ul>"},{"location":"project-guide/#common-features_26","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their financial planning, investment management, and goal tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Budget Planning and Tracking: Implement a budgeting tool where users can create budgets, categorize expenses, and track income and expenditures. Users can set spending limits and receive alerts when they exceed them.</p> </li> <li> <p>Investment Portfolio Management: Provide tools for users to manage their investment portfolios. Users can track investments, view portfolio performance, and receive insights and recommendations.</p> </li> <li> <p>Financial Goal Setting: Allow users to set financial goals, such as saving for a home, retirement, or a vacation. Users can track their progress and receive suggestions on how to achieve their goals.</p> </li> <li> <p>Debt Reduction Strategies: Offer strategies for debt reduction, including creating payoff plans, tracking debts, and optimizing repayment strategies. Users can visualize their debt reduction progress.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_25","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, budget data, investment portfolio information, goal progress, and debt reduction strategies in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan budgets, manage investments, set goals, and track debt reduction.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_25","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_25","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense analysis, investment risk assessment, and the ability to sync with bank accounts for automatic expense tracking. Additionally, provide educational resources on financial planning and investment strategies. Ensure that the application helps users make informed financial decisions and work toward their financial goals.</p> <p></p>"},{"location":"project-guide/#28-custom-workout-routine-planner","title":"28-Custom Workout Routine Planner:","text":"<ul> <li> <p>Personalized workout creation.</p> </li> <li> <p>Exercise demonstration library.</p> </li> <li> <p>Progress tracking and reporting.</p> </li> <li> <p>Injury prevention and recovery tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_27","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their workout routines, track progress, and access injury prevention and recovery tips. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Personalized Workout Creation: Implement a system where users can create personalized workout routines based on their fitness goals, preferences, and available equipment. Users can select exercises, set repetitions and sets, and schedule workouts.</p> </li> <li> <p>Exercise Demonstration Library: Provide a library of exercise demonstrations with videos or images to ensure users perform exercises correctly. Users can access detailed instructions on how to perform each exercise safely and effectively.</p> </li> <li> <p>Progress Tracking and Reporting: Enable users to track their workout progress by recording sets, repetitions, and weights lifted. Generate reports and visualizations to show progress over time and help users adjust their routines accordingly.</p> </li> <li> <p>Injury Prevention and Recovery Tips: Include a section with tips and advice on injury prevention, proper warm-up and cool-down techniques, and strategies for recovering from injuries.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_26","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, workout routines, exercise data, progress records, and injury prevention information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create workouts, track progress, access exercise demonstrations, and read injury prevention tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_26","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_26","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like workout scheduling, nutrition tracking, and the ability to set fitness goals and milestones. Additionally, provide guidance on proper form and technique for exercises, and offer adaptive workout recommendations based on users' progress. Ensure that the application helps users achieve their fitness goals while prioritizing safety and injury prevention.</p> <p></p>"},{"location":"project-guide/#29-local-library-search-tool","title":"29-Local Library Search Tool:","text":"<ul> <li> <p>Catalog search for books, movies, music.</p> </li> <li> <p>Reservation and renewal system.</p> </li> <li> <p>Event and workshop schedule.</p> </li> <li> <p>Library location and hours information.</p> </li> </ul>"},{"location":"project-guide/#common-features_28","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their library experience. This can include saving favorite books, managing reservations, and receiving event notifications. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Catalog Search for Books, Movies, and Music: Implement a search functionality where users can search for books, movies, and music available in the library. Users can search by title, author, genre, or other relevant criteria.</p> </li> <li> <p>Reservation and Renewal System: Allow users to reserve library materials and renew borrowed items through the application. Users can receive notifications about due dates and renew items as needed.</p> </li> <li> <p>Event and Workshop Schedule: Provide information about upcoming library events, workshops, and programs. Users can view event details, register for events, and receive reminders.</p> </li> <li> <p>Library Location and Hours Information: Display information about library locations, including addresses, hours of operation, and contact details. Users can easily find the nearest library branch.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_27","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, catalog data, reservation records, event schedules, and library location information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to search the catalog, manage reservations, view event schedules, and access library location details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_27","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_27","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like user reviews and ratings for library materials, integration with e-book lending services, and a virtual library card for easy access to library services. Additionally, provide a map or directions to library locations and offer reading recommendations based on users' interests. Ensure that the application makes it convenient for users to access and utilize library resources and services.</p> <p></p>"},{"location":"project-guide/#30-camping-and-hiking-trip-planner","title":"30-Camping and Hiking Trip Planner:","text":"<ul> <li> <p>Trail database and recommendations.</p> </li> <li> <p>Gear checklist and management.</p> </li> <li> <p>Weather forecasts and alerts.</p> </li> <li> <p>Emergency contact information storage.</p> </li> </ul>"},{"location":"project-guide/#common-features_29","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their camping and hiking planning. This can include saving favorite trails, managing gear lists, and accessing weather forecasts. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Trail Database and Recommendations: Implement a database of hiking trails, including details such as trail difficulty, length, elevation gain, and user ratings. Offer trail recommendations based on user preferences and location.</p> </li> <li> <p>Gear Checklist and Management: Provide users with pre-made gear checklists for various types of trips (e.g., camping, backpacking, day hikes). Allow users to customize and save gear lists for their specific needs.</p> </li> <li> <p>Weather Forecasts and Alerts: Integrate with weather forecasting services to provide current weather conditions, forecasts, and alerts for the selected hiking location. Users can receive weather-related notifications.</p> </li> <li> <p>Emergency Contact Information Storage: Allow users to store emergency contact information, including names, phone numbers, and medical information. This information can be accessed in case of emergencies during the trip.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_28","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, trail data, gear checklists, weather forecasts, and emergency contact information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to search trails, manage gear lists, check weather forecasts, and access emergency contact information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_28","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_28","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like GPS location tracking, trail maps, wildlife and plant identification guides, and community forums for sharing trip experiences and tips. Additionally, provide safety recommendations and outdoor ethics guidelines to ensure users have a safe and responsible camping and hiking experience.</p> <p></p>"},{"location":"project-guide/#31-simple-weather-station","title":"31-Simple Weather Station:","text":"<ul> <li> <p>Local weather updates.</p> </li> <li> <p>Temperature, humidity, and wind speed tracking.</p> </li> <li> <p>Severe weather alerts.</p> </li> <li> <p>Historical weather data analysis.</p> </li> </ul>"},{"location":"project-guide/#common-features_30","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their weather tracking and access historical data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Local Weather Updates: Integrate with weather data APIs to provide real-time local weather updates, including current conditions, forecasts, and radar imagery.</p> </li> <li> <p>Temperature, Humidity, and Wind Speed Tracking: Implement sensors or data sources to track temperature, humidity, and wind speed. Users can view historical trends and current readings.</p> </li> <li> <p>Severe Weather Alerts: Offer severe weather alerts and warnings based on official sources. Users can receive notifications for events like storms, hurricanes, or extreme temperatures.</p> </li> <li> <p>Historical Weather Data Analysis: Allow users to access historical weather data and generate reports or visualizations to analyze trends, such as temperature fluctuations or annual rainfall patterns.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_29","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, weather data, historical data, and alert records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to display weather updates, track environmental data, receive alerts, and access historical data analysis.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_29","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_29","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like customizable weather widgets, personalized weather forecasts, and a location-based weather map. Additionally, provide educational content on weather phenomena and climate science. Ensure that the application provides users with accurate and up-to-date weather information and tools for weather analysis.</p> <p></p>"},{"location":"project-guide/#32-culinary-technique-tutorial","title":"32-Culinary Technique Tutorial:","text":"<ul> <li> <p>Step-by-step cooking and baking techniques.</p> </li> <li> <p>Ingredient substitution guide.</p> </li> <li> <p>Utensil and equipment reference.</p> </li> <li> <p>Tips for recipe improvisation.</p> </li> </ul>"},{"location":"project-guide/#common-features_31","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their favorite techniques, access personalized tips, and receive updates. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Step-by-Step Cooking and Baking Techniques: Provide a library of culinary techniques with detailed step-by-step instructions and visual aids, such as images or videos. Users can learn how to chop, saut\u00e9, bake, and more.</p> </li> <li> <p>Ingredient Substitution Guide: Offer a guide that suggests ingredient substitutions for common and uncommon ingredients. Users can adapt recipes based on what they have on hand or dietary preferences.</p> </li> <li> <p>Utensil and Equipment Reference: Include a reference section with information on various cooking utensils and equipment, including their uses, care, and maintenance.</p> </li> <li> <p>Tips for Recipe Improvisation: Provide tips and suggestions for improvising recipes, adjusting flavors, and creating new dishes from existing ones. Users can experiment with confidence.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_30","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, technique data, substitution guides, utensil references, and improvisation tips in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to browse techniques, access substitution guides, reference utensils, and get improvisation tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_30","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_30","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recipe collections, a cooking timer, and a meal planning tool. Additionally, offer interactive quizzes and challenges to reinforce culinary knowledge. Ensure that the application empowers users to become more skilled and creative in the kitchen, whether they are beginners or experienced cooks.</p> <p></p>"},{"location":"project-guide/#33-basic-stock-market-tracker","title":"33-Basic Stock Market Tracker:","text":"<ul> <li> <p>Stock price monitoring.</p> </li> <li> <p>Portfolio management.</p> </li> <li> <p>News and market trend analysis.</p> </li> <li> <p>Personalized alerts for stock movement.</p> </li> </ul>"},{"location":"project-guide/#common-features_32","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their stock portfolio, receive alerts, and access news and analysis. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Stock Price Monitoring: Integrate with stock market APIs to provide real-time or delayed stock price updates. Users can search for and track the performance of individual stocks.</p> </li> <li> <p>Portfolio Management: Implement tools for users to create and manage their stock portfolios. Users can add, edit, or remove stocks from their portfolio and view portfolio performance.</p> </li> <li> <p>News and Market Trend Analysis: Provide access to financial news articles, market analysis reports, and charts displaying market trends. Users can stay informed about market developments.</p> </li> <li> <p>Personalized Alerts for Stock Movement: Allow users to set personalized alerts for specific stock price movements (e.g., price reaches a certain level or percentage change). Users receive notifications when conditions are met.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_31","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, stock portfolio data, stock price history, news articles, and alert settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to monitor stock prices, manage portfolios, access news and analysis, and set alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_31","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_31","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like stock performance analysis tools, historical price charting, and integration with financial data providers for real-time market data. Additionally, provide educational content on stock market basics and investment strategies. Ensure that the application helps users make informed investment decisions and stay updated on market developments.</p> <p></p>"},{"location":"project-guide/#34-personal-mindfulness-and-meditation-guide","title":"34-Personal Mindfulness and Meditation Guide:","text":"<ul> <li> <p>Guided meditation sessions.</p> </li> <li> <p>Mindfulness exercises.</p> </li> <li> <p>Tracking mood and stress levels.</p> </li> <li> <p>Customizable meditation timer.</p> </li> </ul>"},{"location":"project-guide/#common-features_33","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their meditation progress, track mood, and access personalized recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Guided Meditation Sessions: Provide a library of guided meditation sessions led by experienced instructors. Users can choose sessions based on themes like relaxation, focus, or stress reduction.</p> </li> <li> <p>Mindfulness Exercises: Offer mindfulness exercises and practices that help users cultivate mindfulness in daily life. These exercises can be brief and integrated into daily routines.</p> </li> <li> <p>Tracking Mood and Stress Levels: Implement tools for users to track their mood and stress levels over time. Users can record their emotional states before and after meditation or mindfulness exercises.</p> </li> <li> <p>Customizable Meditation Timer: Allow users to set their meditation duration and customize the meditation timer with options like interval chimes, background sounds, and visual cues.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_32","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, meditation session data, mood and stress records, and meditation timer settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to access guided meditation sessions, practice mindfulness exercises, track mood, and use the meditation timer.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_32","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_32","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like progress tracking, meditation history analysis, and integration with wearable devices for tracking physiological data during meditation. Additionally, provide educational content on mindfulness concepts and their benefits. Ensure that the application helps users cultivate mindfulness and manage stress effectively.</p> <p></p>"},{"location":"project-guide/#35-comic-book-collection-manager","title":"35-Comic Book Collection Manager:","text":"<ul> <li> <p>Cataloging comic book collection.</p> </li> <li> <p>Wishlist and trade list management.</p> </li> <li> <p>Value estimation based on market trends.</p> </li> <li> <p>Information on comic book events and conventions.</p> </li> </ul>"},{"location":"project-guide/#common-features_34","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their comic book collection, wishlist, and trade list. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Cataloging Comic Book Collection: Implement a system for users to catalog their comic book collections, including details such as title, issue number, condition, and cover art. Users can organize by series, publisher, or other criteria.</p> </li> <li> <p>Wishlist and Trade List Management: Enable users to create and manage wishlists of comics they want to acquire and trade lists for comics they are willing to trade. Users can track their progress in completing series.</p> </li> <li> <p>Value Estimation based on Market Trends: Integrate with comic book market databases or pricing guides to provide estimated values for users' comic books based on market trends and conditions.</p> </li> <li> <p>Information on Comic Book Events and Conventions: Offer information about upcoming comic book events, conventions, signings, and releases. Users can plan attendance and discover new comics.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_33","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, comic book collection data, wishlist, trade list, value estimations, and event information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog comic books, manage wishlists and trade lists, access value estimations, and view event details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_33","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_33","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like comic book cover scanning with image recognition, social sharing of collections, and a comic book grading guide. Additionally, provide access to online comic book marketplaces for buying, selling, and trading comics. Ensure that the application helps users manage their collections effectively and stay informed about the comic book world.</p> <p></p>"},{"location":"project-guide/#36-second-hand-goods-exchange-platform","title":"36-Second-hand Goods Exchange Platform:","text":"<ul> <li> <p>Listing items for exchange or giveaway.</p> </li> <li> <p>Search and filter function for items.</p> </li> <li> <p>User rating and review system.</p> </li> <li> <p>Exchange agreement and meeting coordination.</p> </li> </ul>"},{"location":"project-guide/#common-features_35","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their exchange listings, track reviews, and coordinate exchanges. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Listing Items for Exchange or Giveaway: Implement a system for users to list items they want to exchange or give away. Users can provide item details, photos, and exchange preferences.</p> </li> <li> <p>Search and Filter Function for Items: Offer search and filter options to help users find specific items or browse categories. Users can filter by location, item type, and other relevant criteria.</p> </li> <li> <p>User Rating and Review System: Enable users to rate and review their exchange partners. This helps build trust within the community and encourages responsible exchanges.</p> </li> <li> <p>Exchange Agreement and Meeting Coordination: Provide tools for users to discuss and agree upon the terms of their exchange. Users can coordinate meeting times and locations securely.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_34","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, exchange listings, reviews, and exchange agreements in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to list items, search for items, manage user ratings and reviews, and coordinate exchanges.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_34","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_34","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like messaging and chat functionality between users, item verification mechanisms, and a user reputation system based on successful exchanges. Additionally, ensure that the application promotes a safe and friendly environment for users to exchange their second-hand goods or give away items they no longer need.</p> <p></p>"},{"location":"project-guide/#37-basic-language-translator","title":"37-Basic Language Translator:","text":"<ul> <li> <p>Text input and translation.</p> </li> <li> <p>Language learning tips.</p> </li> <li> <p>Common phrase library.</p> </li> <li> <p>Pronunciation guide.</p> </li> </ul>"},{"location":"project-guide/#common-features_36","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their translation history, access language learning resources, and customize preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Text Input and Translation: Implement a text input interface where users can enter text in one language and receive translations in their chosen target language. Use language translation APIs to perform translations.</p> </li> <li> <p>Language Learning Tips: Provide language learning tips and resources to help users improve their language skills. These can include grammar lessons, vocabulary building exercises, and cultural insights.</p> </li> <li> <p>Common Phrase Library: Offer a library of common phrases and expressions in different languages. Users can browse and learn useful phrases for everyday communication.</p> </li> <li> <p>Pronunciation Guide: Include a pronunciation guide with audio samples to help users learn how to correctly pronounce words and phrases in their target language.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_35","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, translation history, language learning resources, phrase library data, and pronunciation guides in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to input text, receive translations, access language learning tips, and practice pronunciation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_35","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_35","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like language detection, language quizzes, and interactive language exercises. Additionally, provide access to online language learning courses and forums for language enthusiasts to connect and practice. Ensure that the application helps users learn and practice languages effectively and with accurate translations.</p> <p></p>"},{"location":"project-guide/#38-pet-care-reminder-system","title":"38-Pet Care Reminder System:","text":"<ul> <li> <p>Feeding and medication schedules.</p> </li> <li> <p>Veterinary appointment tracking.</p> </li> <li> <p>Pet exercise and grooming reminders.</p> </li> <li> <p>Pet birthday and adoption anniversary celebrations.</p> </li> </ul>"},{"location":"project-guide/#common-features_37","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their pet care reminders, track medical records, and set preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Feeding and Medication Schedules: Enable users to create and manage feeding schedules for their pets, including meal times and portion sizes. Users can also set medication reminders with dosage instructions.</p> </li> <li> <p>Veterinary Appointment Tracking: Implement a calendar or appointment system for users to schedule and track veterinary appointments, vaccinations, and check-ups for their pets.</p> </li> <li> <p>Pet Exercise and Grooming Reminders: Provide tools for users to set exercise and grooming routines for their pets, with reminders for activities like walks, playtime, and grooming sessions.</p> </li> <li> <p>Pet Birthday and Adoption Anniversary Celebrations: Allow users to record and celebrate their pet's birthday and adoption anniversary with reminders and customizable celebrations.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_36","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, pet care schedules, veterinary appointment data, exercise and grooming reminders, and celebration records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage pet care schedules, track appointments, set reminders, and celebrate pet milestones.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_36","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_36","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like pet health record keeping, pet behavior tracking, and integration with pet supply stores for ordering pet supplies and medications. Additionally, provide educational content on pet care, nutrition, and training tips. Ensure that the application helps users keep their pets healthy, happy, and well-cared for.</p> <p></p>"},{"location":"project-guide/#39-indoor-plant-care-guide","title":"39-Indoor Plant Care Guide:","text":"<ul> <li> <p>Plant species information.</p> </li> <li> <p>Watering and fertilization schedule.</p> </li> <li> <p>Sunlight and temperature requirements.</p> </li> <li> <p>Pest and disease management tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_38","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their plant care information, track their indoor plants, and set reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Plant Species Information: Provide a database of indoor plant species with detailed information about each plant, including common names,    scientific names, growth habits, and care requirements.</p> </li> <li> <p>Watering and Fertilization Schedule: Enable users to create customized watering and fertilization schedules for their indoor plants. Users can set frequency and quantity based on plant type and individual needs.</p> </li> <li> <p>Sunlight and Temperature Requirements: Offer guidance on the sunlight and temperature preferences of various indoor plant species. Users can understand the ideal conditions for their plants.</p> </li> <li> <p>Pest and Disease Management Tips: Include a section with advice on identifying and managing common pests and diseases that affect indoor plants. Users can learn how to keep their plants healthy.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_37","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant species data, watering and fertilization schedules, sunlight and temperature requirements, and pest management tips in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to access plant care information, set schedules, receive reminders, and access pest management tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_37","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_37","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like photo uploads for plant identification, a plant care journal, and integration with local weather data for temperature and humidity recommendations. Additionally, provide educational content on indoor gardening techniques and tips for creating a thriving indoor plant environment. Ensure that the application helps users successfully care for their indoor plants and keep them healthy and vibrant.</p> <p></p>"},{"location":"project-guide/#40-bicycle-maintenance-and-route-planner","title":"40-Bicycle Maintenance and Route Planner:","text":"<ul> <li> <p>Bicycle maintenance log.</p> </li> <li> <p>Cycling route planning and tracking.</p> </li> <li> <p>Performance statistics (speed, distance).</p> </li> <li> <p>Gear and equipment checklist.</p> </li> </ul>"},{"location":"project-guide/#common-features_39","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their maintenance records, save routes, and track their cycling performance. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Bicycle Maintenance Log: Implement a maintenance log where users can record and track maintenance activities such as tire changes, brake adjustments, and oiling. Set reminders for upcoming maintenance tasks.</p> </li> <li> <p>Cycling Route Planning and Tracking: Provide tools for users to plan cycling routes, either by entering addresses or selecting points of interest. Users can also track their progress during rides using GPS data.</p> </li> <li> <p>Performance Statistics (Speed and Distance): Display real-time and historical performance statistics such as speed, distance, elevation, and time spent cycling. Users can analyze their progress and set goals.</p> </li> <li> <p>Gear and Equipment Checklist: Allow users to create and manage checklists for gear and equipment needed for rides. This can include helmets, water bottles, spare tubes, and more.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_38","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, maintenance logs, route data, performance statistics, and gear checklists in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to record maintenance, plan and track routes, view performance data, and manage gear checklists.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_38","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_38","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like weather forecasts for route planning, integration with cycling tracking devices, and social sharing of routes and achievements. Additionally, provide educational content on bicycle maintenance best practices and safety tips. Ensure that the application helps cyclists maintain their bikes, plan enjoyable routes, and track their performance effectively.</p> <p></p>"},{"location":"project-guide/#41-book-club-management-system","title":"41-Book Club Management System:","text":"<ul> <li> <p>Member management: Add, update, delete member details.</p> </li> <li> <p>Reading schedule: Organize and track book reading schedules.</p> </li> <li> <p>Meeting planner: Schedule and manage book club meetings.</p> </li> <li> <p>Discussion forum: Enable members to post and respond to discussions.</p> </li> </ul>"},{"location":"project-guide/#common-features_40","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to participate in the book club, manage reading schedules, and engage in discussions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Management: Implement tools for administrators to add, update, and delete member details, including names, contact information, and reading preferences. Members can view and edit their profiles.</p> </li> <li> <p>Reading Schedule: Enable members to organize and track their reading schedules for selected books. Users can set reading goals, track progress, and receive reminders for upcoming reading assignments.</p> </li> <li> <p>Meeting Planner: Provide a scheduling system for book club meetings, including date, time, location, and agenda details. Members can RSVP and receive meeting notifications.</p> </li> <li> <p>Discussion Forum: Create a discussion forum where members can post topics related to books, share thoughts, and engage in discussions. Users can respond to posts, like comments, and follow topics of interest.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_39","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member data, reading schedules, meeting details, and discussion forum posts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member details, reading schedules, meeting planning, and access the discussion forum.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_39","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_39","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like book recommendations, voting on book selections, and integration with e-book platforms for easy access to reading materials. Additionally, provide tools for tracking reading statistics, such as reading speed and favorite genres. Ensure that the application fosters a vibrant book club community where members can connect and discuss literature effectively.</p> <p></p>"},{"location":"project-guide/#42-basic-task-scheduler","title":"42-Basic Task Scheduler:","text":"<ul> <li> <p>Task creation: Add and categorize tasks.</p> </li> <li> <p>Deadline setting: Assign deadlines to tasks.</p> </li> <li> <p>Reminder system: Notify users of upcoming deadlines.</p> </li> <li> <p>Task prioritization: Mark tasks by importance.</p> </li> </ul>"},{"location":"project-guide/#common-features_41","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their task lists, set reminders, and manage their tasks. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Task Creation: Implement tools for users to create tasks, including task names, descriptions, categories, and due dates. Users can organize    tasks by categories such as work, personal, and more.</p> </li> <li> <p>Deadline Setting: Enable users to assign deadlines to tasks. Users can specify due dates and times for each task.</p> </li> <li> <p>Reminder System: Provide a reminder system that notifies users of upcoming task deadlines. Users can receive notifications via email, SMS, or in-app notifications.</p> </li> <li> <p>Task Prioritization: Allow users to prioritize tasks by marking them as high, medium, or low importance. Users can also reorder tasks within categories based on priority.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_40","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, task data, deadline information, reminder settings, and task priorities in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create and manage tasks, set reminders, prioritize tasks, and view upcoming deadlines.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_40","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_40","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recurring tasks, task progress tracking, and integration with calendar applications. Additionally, provide tools for generating task reports, such as completed tasks and overdue tasks. Ensure that the application helps users manage their tasks efficiently and meet their deadlines effectively.</p> <p></p>"},{"location":"project-guide/#43-home-utility-tracker","title":"43-Home Utility Tracker:","text":"<ul> <li> <p>Utility logging: Record electricity, water, gas usage.</p> </li> <li> <p>Expense calculation: Calculate costs based on usage.</p> </li> <li> <p>Trend analysis: Analyze usage patterns over time.</p> </li> <li> <p>Reminder setup: Set reminders for bill payments.</p> </li> </ul>"},{"location":"project-guide/#common-features_42","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their utility tracking, view expense calculations, analyze trends, and set bill payment reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Utility Logging: Implement tools for users to log their utility consumption, including electricity, water, gas, and any other utilities. Users can enter usage data regularly.</p> </li> <li> <p>Expense Calculation: Calculate utility expenses based on consumption data and current rates. Users can view expense summaries by utility type.</p> </li> <li> <p>Trend Analysis: Provide charts and graphs to help users analyze their utility usage patterns over time. Users can identify trends and make informed decisions to reduce consumption.</p> </li> <li> <p>Reminder Setup: Allow users to set reminders for bill payments, based on billing cycles or custom dates. Users can receive notifications before the due date.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_41","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, utility consumption data, expense calculations, trend analysis results, and reminder settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log utility data, view expense calculations, analyze trends, and set bill payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_41","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_41","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like cost projection based on usage trends, energy-saving tips, and integration with utility provider websites for automated bill updates. Additionally, provide tools for tracking and comparing utility providers to find cost-effective options. Ensure that the application helps users manage their home utility expenses efficiently and make informed decisions about energy consumption.</p> <p></p>"},{"location":"project-guide/#44-vehicle-fuel-efficiency-tracker","title":"44-Vehicle Fuel Efficiency Tracker:","text":"<ul> <li> <p>Fuel log: Record fuel purchases and prices.</p> </li> <li> <p>Mileage tracker: Calculate mileage based on fuel and distance.</p> </li> <li> <p>Efficiency analysis: Report on fuel efficiency trends.</p> </li> <li> <p>Cost analysis: Evaluate total fuel expenditures.</p> </li> </ul>"},{"location":"project-guide/#common-features_43","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their fuel efficiency tracking, view mileage calculations, analyze efficiency trends, and assess cost data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Fuel Log: Implement tools for users to log their fuel purchases, including the date, amount of fuel, fuel price, and odometer reading. Users can add entries whenever they refuel their vehicles.</p> </li> <li> <p>Mileage Tracker: Calculate and display mileage information based on fuel consumption and distance traveled. Users can view statistics such as miles per gallon (MPG) or kilometers per liter (KPL).</p> </li> <li> <p>Efficiency Analysis: Provide charts and graphs to help users analyze their vehicle's fuel efficiency trends over time. Users can identify patterns and make adjustments for better fuel economy.</p> </li> <li> <p>Cost Analysis: Evaluate total fuel expenditures by summing up fuel costs over a specified period. Users can see how much they spend on fuel for their vehicles.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_42","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, fuel purchase data, mileage calculations, efficiency trend data, and cost analysis results in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log fuel purchases, calculate mileage, analyze efficiency trends, and view cost analysis reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_42","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_42","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like maintenance tracking, reminders for oil changes and tire rotations, and integration with GPS data for accurate distance tracking. Additionally, provide tools for comparing fuel efficiency among multiple vehicles if the user owns more than one. Ensure that the application helps users monitor their vehicle's fuel efficiency and make informed decisions to save on fuel costs.</p> <p></p>"},{"location":"project-guide/#45-local-sports-team-manager","title":"45-Local Sports Team Manager:","text":"<ul> <li> <p>Team roster: Manage player profiles and positions.</p> </li> <li> <p>Game scheduler: Organize and track game schedules.</p> </li> <li> <p>Statistic tracker: Record and analyze player performance.</p> </li> <li> <p>Communication tool: Coordinate team meetings and practices.</p> </li> </ul>"},{"location":"project-guide/#common-features_44","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to manage team information, schedule games, track statistics, and coordinate team communications. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Team Roster: Implement tools for users to manage player profiles, including names, positions, contact information, and player statistics. Users can add, edit, and remove players from the team roster.</p> </li> <li> <p>Game Scheduler: Create a scheduling system for organizing and tracking game schedules, including dates, times, opponents, and locations. Users can view upcoming games and past results.</p> </li> <li> <p>Statistic Tracker: Enable users to record and analyze player performance statistics during games. Users can track metrics such as goals scored, assists, saves, and more.</p> </li> <li> <p>Communication Tool: Provide features for coordinating team meetings, practices, and announcements. Users can send messages or notifications to team members.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_43","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, team rosters, game schedules, player statistics, and communication records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage team rosters, schedule games, track statistics, and communicate with team members.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_43","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_43","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like player availability tracking, automatic game reminders, and integration with weather forecasts for outdoor games. Additionally, provide tools for generating player performance reports and team statistics. Ensure that the application helps team managers effectively organize and manage their local sports teams.</p> <p></p>"},{"location":"project-guide/#46-recipe-cost-calculator","title":"46-Recipe Cost Calculator:","text":"<ul> <li> <p>Ingredient management: Log and price ingredients.</p> </li> <li> <p>Recipe costing: Calculate cost per recipe.</p> </li> <li> <p>Price adjustment: Adjust costs based on ingredient changes.</p> </li> <li> <p>Budget planner: Plan meals within a budget.</p> </li> </ul>"},{"location":"project-guide/#common-features_45","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their ingredient management, calculate recipe costs, adjust prices, and plan meals within a budget. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Ingredient Management: Implement tools for users to log and price ingredients they commonly use in their recipes. Users can add new ingredients, update prices, and categorize ingredients.</p> </li> <li> <p>Recipe Costing: Enable users to create recipes by specifying ingredient quantities and units. Calculate the total cost of a recipe based on ingredient prices. Users can view the cost per serving.</p> </li> <li> <p>Price Adjustment: Provide the option to adjust ingredient costs based on changes in market prices or personal preferences. Users can update prices for individual ingredients or globally.</p> </li> <li> <p>Budget Planner: Allow users to plan meals and recipes within a specified budget. The application can provide budget recommendations based on user preferences.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_44","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, ingredient data, recipe details, price adjustments, and budget plans in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage ingredients, create recipes, calculate costs, adjust prices, and plan meals within a budget.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_44","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_44","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recipe sharing with friends, generating shopping lists based on selected recipes, and dietary preference tracking. Additionally, provide tools for analyzing and optimizing recipes for cost and nutritional value. Ensure that the application helps users plan meals, manage their grocery expenses, and make informed choices when cooking within their budget.</p> <p></p>"},{"location":"project-guide/#47-garden-planner","title":"47-Garden Planner:","text":"<ul> <li> <p>Plant database: Record plant types and care instructions.</p> </li> <li> <p>Gardening schedule: Track planting and harvesting times.</p> </li> <li> <p>Maintenance reminders: Set reminders for watering, pruning.</p> </li> <li> <p>Garden layout: Plan and visualize garden layouts.</p> </li> </ul>"},{"location":"project-guide/#common-features_46","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their garden plans, track schedules, set reminders, and manage plant information. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Plant Database: Implement a database of plant types with detailed care instructions, including information about planting, watering, sunlight, and other care tips. Users can add, edit, and remove plants from their collection.</p> </li> <li> <p>Gardening Schedule: Provide tools for users to track planting and harvesting times for different plant types. Users can create schedules for each plant, specifying planting dates and expected harvest times.</p> </li> <li> <p>Maintenance Reminders: Set up reminders for maintenance tasks such as watering, pruning, fertilizing, and pest control. Users can receive notifications based on the schedules they create.</p> </li> <li> <p>Garden Layout: Allow users to plan and visualize garden layouts. They can design the layout of their garden beds, assign plants to specific locations, and view a visual representation of their garden.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_45","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant database information, gardening schedules, maintenance reminders, and garden layouts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage plant information, schedule gardening tasks, set reminders, and plan garden layouts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_45","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_45","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like garden journaling for keeping gardening notes, weather forecasts for planning garden activities, and integration with plant nurseries for plant ordering. Additionally, provide tools for tracking plant growth and health, and offer gardening tips and advice based on the user's plant collection. Ensure that the application helps garden enthusiasts plan and maintain their gardens effectively.</p> <p></p>"},{"location":"project-guide/#48-personal-library-catalog","title":"48-Personal Library Catalog:","text":"<ul> <li> <p>Book cataloging: Add, update, delete book entries.</p> </li> <li> <p>Loan management: Track lent and borrowed books.</p> </li> <li> <p>Wishlist: Maintain a list of desired books.</p> </li> <li> <p>Reading tracker: Log reading progress and history.</p> </li> </ul>"},{"location":"project-guide/#common-features_47","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their library catalog, track loans, maintain wishlists, and log reading progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Book Cataloging: Implement tools for users to add, update, and delete book entries in their personal library catalog. Users can include book details such as title, author, ISBN, genre, and cover images.</p> </li> <li> <p>Loan Management: Create a system for tracking lent and borrowed books. Users can record when they lend a book to someone or borrow a book from others, including due dates.</p> </li> <li> <p>Wishlist: Allow users to maintain a wishlist of desired books they intend to read or acquire. Users can add books to their wishlist and remove them when acquired.</p> </li> <li> <p>Reading Tracker: Provide a reading tracker that allows users to log their reading progress, mark books as \"read,\" and maintain a reading history. Users can add notes and ratings to their books.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_46","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, book catalog data, loan records, wishlists, and reading progress in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage book entries, track loans, maintain wishlists, and log reading progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_46","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_46","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like book recommendations based on reading history, book search and filtering options, and integration with online book databases for automatic cataloging. Additionally, provide tools for exporting and importing book catalogs to and from external formats like CSV or Excel. Ensure that the application helps users organize and enjoy their personal library effectively.</p> <p></p>"},{"location":"project-guide/#49-simple-inventory-management-for-crafters","title":"49-Simple Inventory Management for Crafters:","text":"<ul> <li> <p>Material inventory: Track crafting materials and quantities.</p> </li> <li> <p>Project tracking: Organize and monitor craft projects.</p> </li> <li> <p>Expense logging: Record costs of materials.</p> </li> <li> <p>Sales tracker: Keep track of items sold and profits.</p> </li> </ul>"},{"location":"project-guide/#common-features_48","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their material inventory, organize craft projects, log expenses, and track sales and profits. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Material Inventory: Implement tools for users to track crafting materials, including types, quantities, and purchase details. Users can add, edit, and remove materials from their inventory.</p> </li> <li> <p>Project Tracking: Create a system for organizing and monitoring craft projects. Users can associate materials with specific projects, set project goals, and track progress.</p> </li> <li> <p>Expense Logging: Enable users to record the costs of materials used in their projects. Users can link expenses to specific projects or simply log them in the material inventory.</p> </li> <li> <p>Sales Tracker: Provide features for keeping track of items sold, including quantities, prices, and sale dates. Users can calculate profits based on sales and material expenses.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_47","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, material inventory data, project details, expense records, and sales data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage material inventory, track projects, log expenses, and record sales.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_47","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_47","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a crafting calendar for scheduling project timelines, alerts for low material quantities, and integration with e-commerce platforms for online sales management. Additionally, provide tools for generating financial reports and profit analysis. Ensure that the application helps crafters effectively manage their materials, projects, expenses, and sales.</p> <p></p>"},{"location":"project-guide/#50-basic-language-learning-tool","title":"50-Basic Language Learning Tool:","text":"<ul> <li> <p>Vocabulary builder: Add and practice new words.</p> </li> <li> <p>Grammar exercises: Create and complete grammar tests.</p> </li> <li> <p>Progress tracking: Monitor learning milestones.</p> </li> <li> <p>Language resources: Compile useful language learning links.</p> </li> </ul>"},{"location":"project-guide/#common-features_49","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their language learning experience, build vocabulary, complete grammar exercises, track progress, and access language resources. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vocabulary Builder: Implement tools for users to add new words to their vocabulary, including translations, definitions, example sentences, and pronunciation. Users can practice and review their vocabulary.</p> </li> <li> <p>Grammar Exercises: Create a system for creating and completing grammar tests and exercises. Users can choose from different grammar topics,    complete exercises, and receive feedback on their performance.</p> </li> <li> <p>Progress Tracking: Provide progress tracking features that allow users to monitor their learning milestones, track their vocabulary size, and view their performance in grammar exercises.</p> </li> <li> <p>Language Resources: Compile a collection of useful language learning links, including online courses, dictionaries, language forums, and other resources that can help users improve their language skills.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_48","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vocabulary data, grammar exercises, progress records, and language resource links in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vocabulary, complete grammar exercises, track progress, and access language resources.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_48","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_48","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like pronunciation practice with audio samples, flashcards for vocabulary review, and quizzes to test language proficiency. Additionally, provide tools for setting language learning goals and generating reports on progress. Ensure that the application supports users in their language learning journey and provides valuable resources for improvement.</p> <p></p>"},{"location":"project-guide/#51-personal-health-record-keeper","title":"51-Personal Health Record Keeper:","text":"<ul> <li> <p>Health logs: Record medical visits, medications, symptoms.</p> </li> <li> <p>Appointment scheduler: Track upcoming doctor appointments.</p> </li> <li> <p>Health trend analysis: Review health changes over time.</p> </li> <li> <p>Emergency information: Store critical health data.</p> </li> </ul>"},{"location":"project-guide/#common-features_50","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their health records, manage appointments, analyze health trends, and store emergency information. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Health Logs: Implement tools for users to record their medical visits, medications, symptoms, and other health-related information. Users can create detailed entries with dates and descriptions.</p> </li> <li> <p>Appointment Scheduler: Create a scheduling system for tracking upcoming doctor appointments, including appointment dates, times, and healthcare providers. Users can set reminders for appointments.</p> </li> <li> <p>Health Trend Analysis: Provide charts and graphs to help users review changes in their health over time. Users can monitor trends in symptoms, medications, and vital signs.</p> </li> <li> <p>Emergency Information: Allow users to store critical health data such as allergies, medications, blood type, and emergency contacts. This information can be easily accessible in case of emergencies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_49","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, health log data, appointment schedules, health trend analysis results, and emergency information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage health logs, schedule appointments, review health trends, and access emergency information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_49","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_49","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like health goal setting and progress tracking, integration with fitness trackers or wearable devices for health data synchronization, and the ability to generate health reports for sharing with healthcare providers. Additionally, ensure that the application complies with data privacy and security regulations to protect users' sensitive health information.</p> <p></p>"},{"location":"project-guide/#52-hobby-club-organizer","title":"52-Hobby Club Organizer:","text":"<ul> <li> <p>Member registration: Add and manage club members.</p> </li> <li> <p>Event calendar: Schedule club meetings and events.</p> </li> <li> <p>Resource sharing: Exchange hobby resources and tips.</p> </li> <li> <p>Activity log: Track club activities and participation.</p> </li> </ul>"},{"location":"project-guide/#common-features_51","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their club management, manage club members, schedule events, share resources, and track club activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Registration: Implement tools for users to add and manage club members. Users can enter member details such as names, contact information, and hobbies.</p> </li> <li> <p>Event Calendar: Create an event calendar for scheduling and managing club meetings and events. Users can add, edit, and delete events, specify dates, times, and locations, and set reminders.</p> </li> <li> <p>Resource Sharing: Enable users to exchange hobby resources, tips, and recommendations within the club. Users can post and view resources related to their hobbies.</p> </li> <li> <p>Activity Log: Provide a log to track club activities and member participation. Users can record details about past events, attendance, and club achievements.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_50","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member information, event schedules, resource sharing data, and activity logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member registration, schedule events, share resources, and record club activities.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_50","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_50","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like discussion forums for club members, polls and surveys for event planning, and integration with social media platforms for club promotion. Additionally, provide tools for generating club reports and statistics on member participation and event attendance. Ensure that the application helps hobby clubs effectively organize and manage their activities and resources.</p> <p></p>"},{"location":"project-guide/#53-travel-expense-tracker","title":"53-Travel Expense Tracker:","text":"<ul> <li> <p>Trip planning: Organize trip details and itinerary.</p> </li> <li> <p>Expense recording: Log travel expenses.</p> </li> <li> <p>Budget management: Set and adhere to travel budgets.</p> </li> <li> <p>Summary report: Compile trip expenses and experiences.</p> </li> </ul>"},{"location":"project-guide/#common-features_52","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their travel planning, record expenses, manage budgets, and generate summary reports. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Trip Planning: Implement tools for users to organize trip details and create itineraries. Users can specify destinations, dates, accommodations, transportation, and activities.</p> </li> <li> <p>Expense Recording: Create a system for users to log travel expenses, including categories such as accommodation, transportation, meals, and entertainment. Users can enter expense details like date, amount, and payment method.</p> </li> <li> <p>Budget Management: Enable users to set and adhere to travel budgets. The application can provide budget recommendations based on trip details and user preferences.</p> </li> <li> <p>Summary Report: Provide a summary report that compiles trip expenses and experiences. Users can generate reports that include a breakdown of expenses, highlights, and memorable moments from their trips.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_51","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, trip details, expense records, budget information, and summary reports in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan trips, record expenses, manage budgets, and generate summary reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_51","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_51","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like currency conversion for expenses incurred in different currencies, integration with travel booking platforms for automatic expense tracking, and photo uploads to capture trip memories. Additionally, provide tools for generating expense charts and visualizing spending patterns. Ensure that the application helps travelers plan their trips effectively, manage expenses, and create memorable travel experiences.</p> <p></p>"},{"location":"project-guide/#54-simple-auction-tracker","title":"54-Simple Auction Tracker:","text":"<ul> <li> <p>Item catalog: List items available for auction.</p> </li> <li> <p>Bidding system: Track bids and bidders.</p> </li> <li> <p>Auction results: Record and analyze auction outcomes.</p> </li> <li> <p>Participant management: Manage bidder and seller profiles.</p> </li> </ul>"},{"location":"project-guide/#common-features_53","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their auction management, track bids and auctions, record results, and manage participant profiles. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Item Catalog: Implement a catalog system for listing items available for auction. Users can add item details such as descriptions, starting prices, and auction end times.</p> </li> <li> <p>Bidding System: Create a bidding system to track bids and bidders. Users can place bids on items, view current highest bids, and receive notifications when they are outbid.</p> </li> <li> <p>Auction Results: Record and analyze auction outcomes, including the final selling price of items, winning bidders, and auction duration. Users can review past auctions and outcomes.</p> </li> <li> <p>Participant Management: Provide tools for managing bidder and seller profiles. Users can register as bidders or sellers, update their profiles, and view their auction history.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_52","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, item catalog data, bid records, auction results, and participant profiles in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage the item catalog, place bids, record auction results, and manage participant profiles.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_52","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_52","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automatic auction notifications for bidders, a rating and feedback system for sellers and bidders, and a search and filtering option for the item catalog. Additionally, provide tools for sellers to create and manage their auctions easily. Ensure that the application helps users effectively organize and participate in auctions.</p> <p></p>"},{"location":"project-guide/#55-volunteer-management-system","title":"55-Volunteer Management System:","text":"<ul> <li> <p>Volunteer profiles: Register and manage volunteers.</p> </li> <li> <p>Event scheduling: Plan and assign volunteer events.</p> </li> <li> <p>Hours tracking: Record volunteer hours and activities.</p> </li> <li> <p>Recognition: Acknowledge and reward volunteer contributions.</p> </li> </ul>"},{"location":"project-guide/#common-features_54","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their volunteer management, register volunteers, schedule events, track hours, and acknowledge contributions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Volunteer Profiles: Implement tools for users to register and manage volunteer profiles. Users can collect details such as names, contact information, skills, and availability.</p> </li> <li> <p>Event Scheduling: Create a scheduling system for planning and assigning volunteer events. Users can specify event details, dates, times, locations, and the number of volunteers needed.</p> </li> <li> <p>Hours Tracking: Enable users to record volunteer hours and activities. Volunteers can log their hours, and administrators can approve and verify the hours worked.</p> </li> <li> <p>Recognition: Provide features for acknowledging and rewarding volunteer contributions. Recognitions can include certificates, badges, or thank-you messages for outstanding volunteers.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_53","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, volunteer data, event schedules, hours records, and recognition data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage volunteer profiles, schedule events, track hours, and provide recognitions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_53","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_53","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like volunteer role assignments, communication tools for sending event notifications and updates, and reporting tools for generating volunteer activity reports. Additionally, provide a volunteer dashboard where volunteers can view their upcoming events, logged hours, and recognition status. Ensure that the application helps organizations effectively manage their volunteers and recognize their valuable contributions.</p> <p></p>"},{"location":"project-guide/#56-basic-career-planning-tool","title":"56-Basic Career Planning Tool:","text":"<ul> <li> <p>Goal setting: Define career objectives and milestones.</p> </li> <li> <p>Skill tracker: Log skills and professional development.</p> </li> <li> <p>Job search organizer: Track job applications and responses.</p> </li> <li> <p>Interview preparation: Compile interview questions and tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_55","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their career planning, set goals, track skills, manage job searches, and prepare for interviews. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Goal Setting: Implement tools for users to define career objectives and milestones. Users can set specific goals, timelines, and action plans to achieve them.</p> </li> <li> <p>Skill Tracker: Create a system for logging skills and tracking professional development. Users can add skills, certifications, courses, and track their progress in developing these skills.</p> </li> <li> <p>Job Search Organizer: Enable users to track job applications, including details like job titles, companies, application dates, and responses. Users can set reminders for follow-ups.</p> </li> <li> <p>Interview Preparation: Provide features for compiling interview questions, tips, and resources. Users can prepare for interviews by reviewing questions and strategies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_54","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, goal data, skill records, job application details, interview preparation data, and other information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage goal setting, track skills, organize job searches, and prepare for interviews.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_54","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_54","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a networking tracker for managing professional contacts, a resume builder, and integration with job search platforms for automatic job application tracking. Additionally, provide tools for generating career progress reports and setting up reminders for career-related tasks. Ensure that the application helps users effectively plan and manage their career development.</p> <p></p>"},{"location":"project-guide/#57-small-scale-rental-management","title":"57-Small Scale Rental Management:","text":"<ul> <li> <p>Property listing: Manage rental property details.</p> </li> <li> <p>Tenant records: Keep track of tenants and lease terms.</p> </li> <li> <p>Rent tracking: Record rent payments and due dates.</p> </li> <li> <p>Maintenance log: Schedule and track property maintenance.</p> </li> </ul>"},{"location":"project-guide/#common-features_56","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their rental property management, maintain property listings, manage tenant records, track rent payments, and log maintenance activities. This feature is optional but can    enhance the user experience.</p> </li> <li> <p>Property Listing: Implement tools for users to manage rental property details. Users can list properties with information such as property type, address, rent amount, and availability status.</p> </li> <li> <p>Tenant Records: Create a system for keeping track of tenants and lease terms. Users can record tenant details, lease start and end dates, and contact information.</p> </li> <li> <p>Rent Tracking: Enable users to record rent payments and due dates. Users can log payment amounts, methods, and generate rent receipts.</p> </li> <li> <p>Maintenance Log: Provide features for scheduling and tracking property maintenance. Users can schedule maintenance tasks, record maintenance    history, and set reminders for future maintenance.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_55","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, property listings, tenant records, rent payment data, maintenance logs, and other information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage property listings, tenant records, rent tracking, and maintenance logs.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_55","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_55","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense tracking for property-related costs, lease renewal reminders, and integration with payment gateways for online rent payments. Additionally, provide tools for generating financial reports, property occupancy reports, and maintenance schedules. Ensure that the application helps property owners effectively manage their rental properties and tenant relationships.</p> <p></p>"},{"location":"project-guide/#58-personal-fitness-challenge-tracker","title":"58-Personal Fitness Challenge Tracker:","text":"<ul> <li> <p>Challenge creation: Set personal fitness challenges.</p> </li> <li> <p>Progress logging: Record daily or weekly progress.</p> </li> <li> <p>Motivational reminders: Send alerts to stay on track.</p> </li> <li> <p>Achievement record: Celebrate milestones and successes.</p> </li> </ul>"},{"location":"project-guide/#common-features_57","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their fitness challenge tracking, set challenges, log progress, receive reminders, and record achievements. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Challenge Creation: Implement tools for users to set personal fitness challenges. Users can define challenge goals, durations, and specific activities or exercises to complete.</p> </li> <li> <p>Progress Logging: Create a system for users to record daily or weekly progress toward their fitness challenges. Users can log exercise details, duration, repetitions, and other relevant data.</p> </li> <li> <p>Motivational Reminders: Provide features to send alerts and motivational messages to users to help them stay on track with their challenges. Reminders can be scheduled at specific times or based on user preferences.</p> </li> <li> <p>Achievement Record: Enable users to celebrate milestones and successes achieved during their fitness challenges. Users can mark completed challenges, view achievements, and set new goals.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_56","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, challenge data, progress records, reminder settings, and achievement data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage challenge creation, progress logging, receive reminders, and record achievements.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_56","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_56","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like challenge sharing with friends for competition and motivation, integration with fitness trackers or wearables for automatic progress tracking, and the ability to generate fitness reports and statistics. Additionally, provide tools for setting fitness goals and generating workout plans based on user preferences. Ensure that the application helps users achieve their fitness goals and stay motivated throughout their challenges.</p> <p></p>"},{"location":"project-guide/#59-study-group-coordinator","title":"59-Study Group Coordinator:","text":"<ul> <li> <p>Group management: Organize study groups.</p> </li> <li> <p>Session scheduling: Plan study sessions and topics.</p> </li> <li> <p>Resource sharing: Distribute study materials.</p> </li> <li> <p>Discussion board: Facilitate group discussions.</p> </li> </ul>"},{"location":"project-guide/#common-features_58","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their study group coordination, manage study groups, schedule sessions, share resources, and facilitate discussions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Group Management: Implement tools for users to organize study groups. Users can create and manage study groups, set group names, descriptions, and membership criteria.</p> </li> <li> <p>Session Scheduling: Create a scheduling system for planning study sessions and topics. Users can schedule sessions, specify dates, times, locations (virtual or physical), and provide descriptions or agendas.</p> </li> <li> <p>Resource Sharing: Enable users to distribute study materials within study groups. Users can upload and share documents, links, and notes relevant to the study topics.</p> </li> <li> <p>Discussion Board: Provide a discussion board for facilitating group discussions. Users can create discussion topics, post questions, and engage in conversations with fellow group members.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_57","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, study group data, session schedules, resource materials, and discussion board data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage study group creation, session scheduling, resource sharing, and discussions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_57","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_57","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automatic session reminders, polls and surveys for topic selection, and integration with video conferencing tools for virtual study sessions. Additionally, provide tools for generating study progress reports and tracking group attendance. Ensure that the application helps users effectively coordinate and collaborate in study groups for improved learning outcomes.</p> <p></p>"},{"location":"project-guide/#60-attendance-management-system-for-schools","title":"60-Attendance Management System for Schools:","text":"<ul> <li> <p>Student and teacher profiles: Registration, update, and deletion.</p> </li> <li> <p>Attendance tracking: Daily attendance recording for each class.</p> </li> <li> <p>Reporting: Generate monthly attendance reports for students.</p> </li> <li> <p>Summary: Overview of attendance trends and anomalies.</p> </li> </ul>"},{"location":"project-guide/#common-features_59","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including administrators, teachers, and staff, to create accounts or profiles within the application to personalize their attendance management, manage student and teacher profiles, track attendance, generate reports, and view attendance    summaries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Student and Teacher Profiles: Implement tools for users to register, update, and delete student and teacher profiles. Users can collect details such as names, contact information, and class assignments.</p> </li> <li> <p>Attendance Tracking: Create a system for daily attendance recording for each class. Teachers can mark students present or absent for each class session.</p> </li> <li> <p>Reporting: Enable users to generate monthly attendance reports for students. Reports can include individual student attendance records, class-wise reports, and subject-wise reports.</p> </li> <li> <p>Summary: Provide an overview of attendance trends and anomalies. Users can view summary statistics, such as average attendance rates, frequently absent students, and trends over time.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_58","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, student and teacher data, attendance records, monthly reports, and summary data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage profiles, record attendance, generate reports, and view attendance summaries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_58","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_58","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automated notifications to parents for student absences, integration with student information systems for class rosters, and options for marking tardiness and leave requests. Additionally, provide tools for generating visual attendance charts and graphs for better data visualization. Ensure that the application helps schools efficiently manage student attendance records and monitor attendance trends.</p> <p></p>"},{"location":"project-guide/#61-small-business-accounting-software","title":"61-Small Business Accounting Software:","text":"<ul> <li> <p>Transaction recording: Log income and expenses.</p> </li> <li> <p>Financial reporting: Monthly and annual financial statements.</p> </li> <li> <p>Budget planning: Set and track business budgets.</p> </li> <li> <p>Tax preparation: Summarize financial data for tax purposes.</p> </li> </ul>"},{"location":"project-guide/#common-features_60","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including small business owners and accountants, to create accounts or profiles within the application to personalize their accounting, record transactions, generate financial reports, plan budgets, and prepare for taxes. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Transaction Recording: Implement tools for users to log income and expenses. Users can record transaction details, such as date, amount, category (e.g., revenue, cost of goods sold, utilities), and payment method.</p> </li> <li> <p>Financial Reporting: Enable users to generate monthly and annual financial statements. Reports can include profit and loss statements (income statements), balance sheets, and cash flow statements.</p> </li> <li> <p>Budget Planning: Provide features for setting and tracking business budgets. Users can create budget categories, allocate funds, and compare actual expenses to budgeted amounts.</p> </li> <li> <p>Tax Preparation: Assist users in summarizing financial data for tax purposes. Generate reports and summaries that help with tax preparation and filing.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_59","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, transaction records, financial reports, budget data, tax-related information, and other financial data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage transaction recording, generate financial reports, plan budgets, and prepare for taxes.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_59","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_59","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automated expense categorization, bank account reconciliation, support for multiple currencies, and integration with accounting standards and tax regulations. Additionally, provide tools for generating financial graphs and charts for visualizing financial performance. Ensure that the application helps small businesses effectively manage their accounting and financial reporting needs.</p> <p></p>"},{"location":"project-guide/#62-local-event-planner","title":"62-Local Event Planner:","text":"<ul> <li> <p>Event details: Create and manage event information.</p> </li> <li> <p>Attendee management: Register and track attendees.</p> </li> <li> <p>Schedule organizer: Plan event timelines and activities.</p> </li> <li> <p>Feedback collection: Gather post-event feedback from attendees.</p> </li> </ul>"},{"location":"project-guide/#common-features_61","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow event organizers to create accounts or profiles within the application to personalize their event planning, manage event details, register attendees, organize schedules, and collect feedback. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Event Details: Implement tools for event organizers to create and manage event information. Users can specify event names, dates, locations, descriptions, and other relevant details.</p> </li> <li> <p>Attendee Management: Create a system for registering and tracking event attendees. Organizers can record attendee information, ticket details, and payment status.</p> </li> <li> <p>Schedule Organizer: Provide features for planning event timelines and activities. Users can schedule sessions, workshops, performances, and other event activities.</p> </li> <li> <p>Feedback Collection: Enable organizers to gather post-event feedback from attendees. Users can collect feedback on event satisfaction, specific sessions or activities, and suggestions for improvement.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_60","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, event data, attendee records, schedule details, and feedback data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage event details, register attendees, organize schedules, and collect feedback.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_60","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_60","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like ticketing and payment processing, event promotion tools, and integration with calendar applications for attendee reminders. Additionally, provide tools for generating event reports, attendance statistics, and feedback analysis. Ensure that the application helps event organizers efficiently plan and manage local events while collecting valuable feedback for future improvements.</p> <p></p>"},{"location":"project-guide/#63-simple-project-management-tool","title":"63-Simple Project Management Tool:","text":"<ul> <li> <p>Project setup: Define project scope and objectives.</p> </li> <li> <p>Task assignment: Allocate tasks to team members.</p> </li> <li> <p>Progress tracking: Monitor task completion and deadlines.</p> </li> <li> <p>Reporting: Generate project status reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_62","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including project managers and team members, to create accounts or profiles within the application to personalize their project management, define project scopes, assign tasks, track progress, and generate reports. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project Setup: Implement tools for defining project scope and objectives. Users can create projects, set project names, descriptions, objectives, and specify project timelines.</p> </li> <li> <p>Task Assignment: Create a system for allocating tasks to team members. Project managers can assign tasks, set deadlines, and designate responsible team members.</p> </li> <li> <p>Progress Tracking: Provide features for monitoring task completion and deadlines. Users can update task statuses, mark tasks as completed, and view progress timelines.</p> </li> <li> <p>Reporting: Enable users to generate project status reports. Reports can include project timelines, task statuses, completed tasks, and remaining work.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_61","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, task assignments, progress records, and report data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage project setup, task assignment, progress tracking, and report generation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_61","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_61","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like Gantt chart generation for visual project timelines, integration with calendar applications for task reminders, and options for setting task priorities and dependencies. Additionally, provide tools for generating performance metrics and project summary dashboards. Ensure that the application helps project managers efficiently plan and track project progress while providing valuable insights through reports and analytics.</p> <p></p>"},{"location":"project-guide/#64-basic-crm-customer-relationship-management","title":"64-Basic CRM (Customer Relationship Management):","text":"<ul> <li> <p>Customer data: Store and manage customer information.</p> </li> <li> <p>Interaction logging: Record customer interactions and notes.</p> </li> <li> <p>Sales tracking: Monitor sales activities and history.</p> </li> <li> <p>Customer service: Manage customer inquiries and resolutions.</p> </li> </ul>"},{"location":"project-guide/#common-features_63","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including sales representatives and customer support agents, to create accounts or profiles within the application to personalize their CRM activities, store customer data, log interactions, track sales, and manage customer inquiries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customer Data: Implement tools for storing and managing customer information. Users can create customer profiles, record contact details, demographic information, and preferences.</p> </li> <li> <p>Interaction Logging: Create a system for recording customer interactions and notes. Users can log phone calls, emails, meetings, and other    interactions, along with relevant details and follow-up actions.</p> </li> <li> <p>Sales Tracking: Provide features for monitoring sales activities and history. Users can track leads, opportunities, quotes, orders, and invoices associated with each customer.</p> </li> <li> <p>Customer Service: Enable users to manage customer inquiries and resolutions. Users can log and track customer service requests, assign them to agents, and document solutions.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_62","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, customer data, interaction logs, sales records, and customer service data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage customer data, log interactions, track sales, and handle customer service.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_62","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_62","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like task assignment for follow-up actions, contact history timelines, lead conversion tracking, and integration with email and calendar applications for seamless communication. Additionally, provide tools for generating customer reports, sales forecasts, and customer satisfaction surveys. Ensure that the application helps sales and customer service teams effectively manage customer relationships and enhance customer satisfaction.</p> <p></p>"},{"location":"project-guide/#65-employee-performance-review-system","title":"65-Employee Performance Review System:","text":"<ul> <li> <p>Employee profiles: Add, update, and delete employee data.</p> </li> <li> <p>Performance metrics: Track key performance indicators.</p> </li> <li> <p>Review scheduling: Organize periodic review meetings.</p> </li> <li> <p>Feedback compilation: Aggregate feedback from multiple sources.</p> </li> </ul>"},{"location":"project-guide/#common-features_64","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including HR managers, supervisors, and employees, to create accounts or profiles within the application to personalize their performance review activities, manage employee data, track performance metrics, schedule reviews, and compile feedback. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Employee Profiles: Implement tools for adding, updating, and deleting employee data. Users can create employee profiles with details such as names, positions, departments, and contact information.</p> </li> <li> <p>Performance Metrics: Create a system for tracking key performance indicators (KPIs) for each employee. Users can define KPIs relevant to the employee's role and responsibilities.</p> </li> <li> <p>Review Scheduling: Provide features for organizing periodic review meetings. HR managers and supervisors can schedule review dates, set reminders, and invite participants.</p> </li> <li> <p>Feedback Compilation: Enable users to aggregate feedback from multiple sources. Feedback can come from supervisors, peers, self-assessments, and other stakeholders. Users can record feedback, assign scores, and generate performance reports.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_63","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, employee data, performance metrics, review schedules, and feedback data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage employee profiles, track performance metrics, schedule reviews, and compile feedback.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_63","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_63","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like goal setting and tracking, 360-degree feedback capabilities, performance improvement plans, and integration with HR management systems for employee data synchronization. Additionally, provide tools for generating performance dashboards and trend analysis reports. Ensure that the application helps organizations effectively manage employee performance reviews, enhance productivity, and support employee development.</p> <p></p>"},{"location":"project-guide/#66-fitness-center-membership-management","title":"66-Fitness Center Membership Management:","text":"<ul> <li> <p>Member data management: Register and update member profiles.</p> </li> <li> <p>Subscription tracking: Monitor membership status and renewals.</p> </li> <li> <p>Class scheduling: Organize fitness classes and registrations.</p> </li> <li> <p>Payment processing: Manage membership fees and transactions.</p> </li> </ul>"},{"location":"project-guide/#common-features_65","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including fitness center staff and administrators, to create accounts or profiles within the application to personalize their membership management, register members, track subscriptions, schedule classes, and process payments. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Data Management: Implement tools for registering and updating member profiles. Users can create member profiles with details such as names, contact information, membership types, and fitness goals.</p> </li> <li> <p>Subscription Tracking: Create a system for monitoring membership status and renewals. Users can track subscription start and end dates, send renewal reminders, and manage membership tiers.</p> </li> <li> <p>Class Scheduling: Provide features for organizing fitness classes and registrations. Users can schedule classes, specify instructors, set class capacities, and allow members to register for classes.</p> </li> <li> <p>Payment Processing: Enable users to manage membership fees and transactions. Users can process payments for new memberships, renewals, and class registrations. Implement secure payment methods.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_64","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member data, subscription records, class schedules, and payment transactions in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member data, track subscriptions, schedule classes, and process payments.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_64","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_64","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like attendance tracking for fitness classes, membership card generation, waitlist management for fully booked classes, and integration with fitness tracking devices. Additionally, provide tools for generating financial reports, membership statistics, and class utilization reports. Ensure that the application helps fitness centers efficiently manage memberships, improve member experiences, and streamline payment processes.</p> <p></p>"},{"location":"project-guide/#67-personal-document-organizer","title":"67-Personal Document Organizer:","text":"<ul> <li> <p>Document categorization: Sort documents by type or date.</p> </li> <li> <p>Indexing: Create an index for quick document retrieval.</p> </li> <li> <p>Secure storage: Encrypt and save personal documents.</p> </li> <li> <p>Search function: Locate documents using keywords.</p> </li> </ul>"},{"location":"project-guide/#common-features_66","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their document organization, categorization, indexing, secure storage, and search functionalities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Document Categorization: Implement tools for sorting documents by type, date, or custom categories. Users can create folders or tags to organize their documents based on their preferences.</p> </li> <li> <p>Indexing: Create an indexing system for quick document retrieval. The application can automatically generate metadata and index documents based on their content and properties.</p> </li> <li> <p>Secure Storage: Provide secure storage for personal documents. Encrypt and save documents to protect sensitive information. Implement access control to ensure only authorized users can view or modify documents.</p> </li> <li> <p>Search Function: Enable users to locate documents quickly using keywords or search queries. Implement a robust search engine that scans document content, titles, tags, and metadata.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_65","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, document data, indexing information, and encryption keys in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage document categorization, indexing, secure storage, and search functions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_65","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_65","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like document versioning, document sharing with others, document expiration reminders, and synchronization with cloud storage services for backup. Additionally, provide tools for generating document reports, statistics on document types, and document access history logs. Ensure that the application helps users efficiently organize and secure their personal documents while providing convenient search capabilities.</p> <p></p>"},{"location":"project-guide/#68-retail-sales-tracker","title":"68-Retail Sales Tracker:","text":"<ul> <li> <p>Product catalog: Manage product details and prices.</p> </li> <li> <p>Sales recording: Log daily sales transactions.</p> </li> <li> <p>Inventory management: Track stock levels and reorder needs.</p> </li> <li> <p>Revenue analysis: Generate sales performance reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_67","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including store managers and sales staff, to create accounts or profiles within the application to personalize their retail sales tracking, manage product catalog, record sales, monitor inventory, and analyze revenue. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Product Catalog Management: Implement tools for managing product details and prices. Users can create and update a product catalog with information such as product names, descriptions, categories, prices, and stock levels.</p> </li> <li> <p>Sales Recording: Create a system for logging daily sales transactions. Users can record sales data, including product names, quantities sold, prices, and customer information.</p> </li> <li> <p>Inventory Management: Provide features for tracking stock levels and reorder needs. The application can automatically update stock quantities based on sales and generate reorder alerts when stock levels are low.</p> </li> <li> <p>Revenue Analysis: Enable users to generate sales performance reports and revenue analysis. Users can view sales trends, revenue by product category, and profit margins.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_66","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, product catalog data, sales transaction records, inventory data, and sales performance reports in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage the product catalog, record sales, track inventory, and analyze revenue.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_66","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_66","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like sales order management, customer relationship management, integration with barcode scanners or POS systems, and automatic generation of sales invoices. Additionally, provide tools for generating financial statements, sales forecasts, and product performance reports. Ensure that the application helps retailers efficiently manage their product catalog, sales, and inventory while providing insights for revenue growth and cost management.</p> <p></p>"},{"location":"project-guide/#69-freelancer-time-and-invoice-manager","title":"69-Freelancer Time and Invoice Manager:","text":"<ul> <li> <p>Time tracking: Record time spent on different projects.</p> </li> <li> <p>Invoice generation: Create and send invoices to clients.</p> </li> <li> <p>Payment tracking: Monitor received and pending payments.</p> </li> <li> <p>Project management: Organize and track freelance projects.</p> </li> </ul>"},{"location":"project-guide/#common-features_68","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelancers to create accounts or profiles within the application to personalize their time tracking, invoice generation, payment tracking, and project management activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Time Tracking: Implement tools for freelancers to record time spent on different projects. Users can track hours worked, project names, descriptions, and billable hours.</p> </li> <li> <p>Invoice Generation: Create a system for freelancers to generate and send invoices to clients. Invoices can include project details, billable hours, rates, payment terms, and due dates.</p> </li> <li> <p>Payment Tracking: Provide features for monitoring received and pending payments. Users can track payments made by clients, set payment reminders, and view payment history.</p> </li> <li> <p>Project Management: Enable freelancers to organize and track freelance projects. Users can create project profiles, assign tasks, set project milestones, and monitor project progress.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_67","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, time tracking data, invoice records, payment data, and project details in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage time tracking, invoice generation, payment tracking, and project management.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_67","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_67","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense tracking, currency conversion, client contact management, and integration with accounting software for seamless financial management. Additionally, provide tools for generating financial reports, project performance dashboards, and income statements. Ensure that the application helps freelancers efficiently manage their time, finances, and projects while improving client relationships through professional invoicing and payment tracking.</p> <p></p>"},{"location":"project-guide/#70-basic-legal-case-tracker","title":"70-Basic Legal Case Tracker:","text":"<ul> <li> <p>Case management: Add, update, delete legal cases.</p> </li> <li> <p>Client tracking: Record client details and case history.</p> </li> <li> <p>Hearing scheduler: Manage court dates and reminders.</p> </li> <li> <p>Document storage: Organize and retrieve legal documents.</p> </li> </ul>"},{"location":"project-guide/#common-features_69","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including legal professionals, to create accounts or profiles within the application to personalize their case management, client tracking, hearing scheduling, and document storage activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Case Management: Implement tools for adding, updating, and deleting legal cases. Users can create case profiles with details such as case numbers, titles, types, and parties involved.</p> </li> <li> <p>Client Tracking: Create a system for recording client details and case history. Users can associate clients with specific cases, track contact information, case statuses, and client interactions.</p> </li> <li> <p>Hearing Scheduler: Provide features for managing court dates and reminders. Users can schedule hearings, set reminders for important dates, and receive notifications.</p> </li> <li> <p>Document Storage: Enable users to organize and retrieve legal documents related to each case. Users can upload, categorize, and search for documents based on case information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_68","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, case data, client information, hearing schedules, document metadata, and document files in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage case profiles, track clients, schedule hearings, and store and retrieve documents.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_68","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_68","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like task assignment for case activities, legal research tools, deadline tracking, and secure document sharing with clients or other legal professionals. Additionally, provide tools for generating case summaries, legal reports, and document tracking reports. Ensure that the application helps legal professionals efficiently manage their caseload, improve client communication, and streamline document organization and retrieval.</p> <p></p>"},{"location":"project-guide/#71-recipe-and-nutrition-tracker","title":"71-Recipe and Nutrition Tracker:","text":"<ul> <li> <p>Recipe storage: Add and manage personal recipes.</p> </li> <li> <p>Nutritional calculator: Analyze recipes for calorie and nutrient content.</p> </li> <li> <p>Meal planner: Organize daily and weekly meals.</p> </li> <li> <p>Shopping list generator: Create grocery lists based on meal plans.</p> </li> </ul>"},{"location":"project-guide/#common-features_70","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their recipe storage, nutritional analysis, meal planning, and shopping list generation activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Recipe Storage: Implement tools for adding and managing personal recipes. Users can create recipe profiles with details such as recipe names, ingredients, quantities, instructions, and preparation times.</p> </li> <li> <p>Nutritional Calculator: Create a nutritional analysis system for recipes. Users can analyze recipes for calorie and nutrient content, including carbohydrates, proteins, fats, vitamins, and minerals.</p> </li> <li> <p>Meal Planner: Provide features for organizing daily and weekly meals. Users can create meal plans by selecting recipes, specifying serving sizes, and planning meals for breakfast, lunch, dinner, and snacks.</p> </li> <li> <p>Shopping List Generator: Enable users to create grocery lists based on meal plans. The application can automatically generate shopping lists by aggregating ingredients from selected recipes.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_69","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, recipe data, nutritional analysis results, meal plans, and shopping lists in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage recipe storage, nutritional analysis, meal planning, and shopping list generation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_69","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_69","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like dietary preference tracking (e.g., vegetarian, vegan, gluten-free), recipe sharing with other users, and integration with nutritional databases for accurate analysis. Additionally, provide tools for generating nutrition reports, meal preparation schedules, and cost estimates for shopping lists. Ensure that the application helps users manage their recipes, plan balanced meals, and make informed dietary choices based on nutritional analysis.</p> <p></p>"},{"location":"project-guide/#72-language-learning-companion","title":"72-Language Learning Companion:","text":"<ul> <li> <p>Vocabulary builder: Store and review new words and phrases.</p> </li> <li> <p>Grammar exercises: Practice grammar with interactive exercises.</p> </li> <li> <p>Progress tracker: Monitor language learning progress.</p> </li> <li> <p>Daily practice reminders: Set reminders for daily language practice.</p> </li> </ul>"},{"location":"project-guide/#common-features_71","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their language learning, vocabulary building, grammar exercises, progress tracking, and daily practice reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vocabulary Builder: Implement tools for users to store and review new words and phrases. Users can add vocabulary items, categorize them, and practice with flashcards or quizzes.</p> </li> <li> <p>Grammar Exercises: Provide interactive grammar exercises for language practice. Users can complete exercises related to sentence structure, verb conjugation, tenses, and more.</p> </li> <li> <p>Progress Tracker: Enable users to monitor their language learning progress. Users can track their performance in vocabulary, grammar, and overall language proficiency.</p> </li> <li> <p>Daily Practice Reminders: Allow users to set reminders for daily language practice. Users can customize the frequency and timing of reminders to fit their schedules.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_70","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vocabulary items, exercise data, progress records, and reminder settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vocabulary building, grammar exercises, progress tracking, and daily practice reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_70","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_70","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like language-specific pronunciation guides, language proficiency assessments, and language learning goals. Additionally, provide tools for generating progress reports, vocabulary usage statistics, and grammar exercise scores. Ensure that the application helps language learners build their vocabulary, improve their grammar skills, and stay motivated through daily practice reminders.</p> <p></p>"},{"location":"project-guide/#73-personal-vehicle-log","title":"73-Personal Vehicle Log:","text":"<ul> <li> <p>Vehicle details: Record information about personal vehicles.</p> </li> <li> <p>Mileage tracker: Log and analyze vehicle mileage.</p> </li> <li> <p>Fuel log: Keep track of fuel expenses and consumption.</p> </li> <li> <p>Service reminders: Schedule regular maintenance checks.</p> </li> </ul>"},{"location":"project-guide/#common-features_72","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their vehicle details management, mileage tracking, fuel logging, and service reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vehicle Details Management: Implement tools for users to record information about their personal vehicles. Users can add vehicle profiles with details such as make, model, year, registration number, and insurance information.</p> </li> <li> <p>Mileage Tracker: Provide features for logging and analyzing vehicle mileage. Users can record odometer readings at the start and end of trips, track distances traveled, and view mileage trends.</p> </li> <li> <p>Fuel Log: Enable users to keep track of fuel expenses and consumption. Users can record fuel purchases, including fuel type, price, gallons/liters filled, and calculate fuel efficiency.</p> </li> <li> <p>Service Reminders: Allow users to schedule regular maintenance checks and receive reminders. Users can set reminders for oil changes, tire rotations, inspections, and other service tasks.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_71","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vehicle data, mileage records, fuel logs, service reminders, and maintenance history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vehicle details, track mileage, log fuel data, and schedule service reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_71","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_71","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense tracking for maintenance and repairs, service history reports, and integration with GPS data for trip tracking. Additionally, provide tools for generating fuel efficiency reports, cost analysis, and reminders for upcoming service tasks. Ensure that the application helps users efficiently manage their personal vehicle information, monitor fuel consumption, and schedule maintenance to keep their vehicles in top condition.</p> <p></p>"},{"location":"project-guide/#74-freelance-writers-organizer","title":"74-Freelance Writer's Organizer:","text":"<ul> <li> <p>Article tracking: Manage assignments and deadlines.</p> </li> <li> <p>Idea notebook: Store and categorize writing ideas.</p> </li> <li> <p>Submission log: Track submissions to publishers and responses.</p> </li> <li> <p>Income tracker: Monitor earnings from writing assignments.</p> </li> </ul>"},{"location":"project-guide/#common-features_73","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelance writers to create accounts or profiles within the application to personalize their article tracking, idea notebook, submission log, and income tracking activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Article Tracking: Implement tools for managing writing assignments and deadlines. Users can create article profiles with details such as article titles, publishers, submission deadlines, and progress status.</p> </li> <li> <p>Idea Notebook: Provide a space for users to store and categorize writing ideas. Users can create idea profiles, add descriptions, and categorize ideas by genre or topic.</p> </li> <li> <p>Submission Log: Enable users to track submissions to publishers and responses. Users can record submission dates, publisher details, submission statuses (e.g., pending, accepted, rejected), and responses received.</p> </li> <li> <p>Income Tracker: Allow users to monitor earnings from writing assignments. Users can log income details, including payment dates, amounts, and sources.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_72","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, article data, idea profiles, submission records, income data, and progress status in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage article tracking, idea notebook, submission log, and income tracking.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_72","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_72","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like deadline reminders, productivity statistics, and integration with writing software or platforms for document management. Additionally, provide tools for generating income reports, submission history reports, and idea brainstorming assistance. Ensure that the application helps freelance writers efficiently manage their writing assignments, track their ideas, and stay organized throughout the writing and submission process.</p> <p></p>"},{"location":"project-guide/#75-basic-budgeting-and-expense-tracker-for-students","title":"75-Basic Budgeting and Expense Tracker for Students:","text":"<ul> <li> <p>Budget creation: Set up a simple budget for students.</p> </li> <li> <p>Expense logging: Record daily expenses.</p> </li> <li> <p>Savings goal: Track progress towards saving targets.</p> </li> <li> <p>Financial summary: Review spending habits and savings.</p> </li> </ul>"},{"location":"project-guide/#common-features_74","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow students to create accounts or profiles within the application to personalize their budgeting, expense logging, savings goal tracking, and financial summary activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Budget Creation: Implement tools for students to set up a simple budget. Users can define budget categories (e.g., food, transportation, entertainment), allocate monthly or weekly limits, and customize budget periods.</p> </li> <li> <p>Expense Logging: Provide features for recording daily expenses. Users can log individual expenses, categorize them based on budget categories, add descriptions, and specify dates.</p> </li> <li> <p>Savings Goal: Enable users to track progress towards saving targets. Users can set savings goals, allocate funds toward those goals from their budget, and monitor the progress.</p> </li> <li> <p>Financial Summary: Allow users to review their spending habits and savings. Users can view budget vs. actual spending, track savings achievements, and receive financial summaries.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_73","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, budget data, expense records, savings goals, and financial summaries in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage budget creation, expense logging, savings goal tracking, and financial summaries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_73","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_73","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense category insights, expense history reports, and automated budget alerts when nearing budget limits. Additionally, provide tools for generating savings progress charts, budget analysis reports, and financial goals achievement reports. Ensure that the application helps students manage their finances effectively, develop budgeting skills, and work towards their savings goals.</p> <p></p>"},{"location":"project-guide/#76-diy-project-planner","title":"76-DIY Project Planner:","text":"<ul> <li> <p>Project catalog: Store and organize DIY project ideas.</p> </li> <li> <p>Material list: Track materials and tools needed.</p> </li> <li> <p>Step tracker: Log progress on ongoing projects.</p> </li> <li> <p>Budget manager: Monitor project expenses.</p> </li> </ul>"},{"location":"project-guide/#common-features_75","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their project planning, material tracking, step logging, and budget management activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project Catalog: Implement tools for users to store and organize DIY project ideas. Users can create project profiles with details such as project names, descriptions, images, and categories (e.g., woodworking, home improvement).</p> </li> <li> <p>Material List: Provide a feature to track materials and tools needed for each project. Users can list required items, quantities, prices, and purchase links or stores.</p> </li> <li> <p>Step Tracker: Enable users to log progress on ongoing projects. Users can record completed steps, add notes, images, or videos, and set completion dates for each project step.</p> </li> <li> <p>Budget Manager: Allow users to monitor project expenses. Users can input costs for materials, tools, and other project-related expenses. The application can calculate total project costs and compare them to the set budget.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_74","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, material lists, step logs, and budget information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage project catalog, material list, step tracker, and budget manager.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_74","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_74","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like project progress visualization (e.g., Gantt charts), project timeline tracking, and project priority setting. Additionally, provide tools for generating project cost reports, material shopping lists, and project completion certificates. Ensure that the application helps DIY enthusiasts plan, track, and manage their projects efficiently, whether they involve home improvement, crafting, or any other DIY endeavor.</p> <p></p> \\[ END-OF-DOCUMENT \\]"},{"location":"resume/","title":"Resume","text":""},{"location":"resume/#resume","title":"Resume","text":"<ul> <li>Download Resume</li> </ul>"},{"location":"syllabus/syllabus/","title":"CE205 Data Structures","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#recep-tayyip-erdogan-university","title":"Recep Tayyip Erdogan University","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#faculty-of-engineering-and-architecture","title":"Faculty of Engineering and Architecture","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#computer-engineering","title":"Computer Engineering","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#ce205-data-structures","title":"CE205-Data Structures","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#syllabus","title":"Syllabus","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#fall-semester-2024-2025","title":"Fall Semester, 2024-2025","text":"<p>Download </p> <ul> <li>PDF</li> <li>DOCX</li> <li>SLIDE</li> </ul> <p>Download Legacy </p> <ul> <li>WORD</li> <li>PDF</li> </ul> Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Teams Code h3cl51i Lecture Hours and Days Friday 09:00-12:00 \u0130\u0130BF 402 Floor-4 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starting with [CE205] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory Course Hour Per Week 3 Hours Credit 4 Prerequisite CE103- Algorithms and Programming I CE100- Algorithms and Programming II Corequisite TBD Requirement TBD <p>*TBD: To Be Defined.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#a-course-description","title":"A.    Course Description","text":"<p>This course covers the fundamentals of data structure and file organization. The course scope explains using digital data mapping in programming to use data in application run-time memory or long-term file storage. The course discusses various implementations of these data objects and programming styles, and run-time representations. The study also looks at sorting, searching, and graph algorithms. This course aims to provide digital data structures for real-world problems, as well as how data is shaped and mapped to memory or storage solutions. The class will be based on sharing expertise and guiding students to discover learning methods and practice for data structure topics. By making programming applications and projects in the courses, the learning process will be strengthened by practicing rather than theory.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#b-course-learning-outcomes","title":"B.    Course Learning Outcomes","text":"<p>After completing this course satisfactorily, a student will be able to:</p> <ul> <li> <p>Describe how common linear and non-linear data structures such as arrays, matrices, linked structures, queues, stacks, trees and graphs are represented in run time and storage memory and used by algorithms.</p> </li> <li> <p>Compare and contrast the bene\ufb01ts of dynamic and static data structures implementations.</p> </li> </ul> <ul> <li> <p>Understand basic industrial data structure definitions such as ASN.1 / BER TLV / PER TLV.</p> </li> <li> <p>Describe how run-time application data stored in a file and organized.</p> </li> <li> <p>Interpret a problem and define data structures for solution by using a C/C++, Java or C# application solve that problem in data structure manner.</p> </li> <li> <p>Compare alternative implementations of data structures with respect to performance and analysis space and time complexity.</p> </li> </ul> <ul> <li> <p>Understand data structure based sorting and searching algorithms.</p> </li> <li> <p>Describe hashing and indexing methods for file organization and processing.</p> </li> <li> <p>Discuss the computational ef\ufb01ciency of the principal algorithms for sorting, searching, and hashing in memory and file storage.</p> </li> <li> <p>Combine programming skills with data structures know-how and generate efficient solutions for real-life problems.</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#c-course-topics","title":"C.    Course Topics","text":"<ul> <li> <p>Data-in-use, Data-in-transit and Data-at-rest concepts.</p> </li> <li> <p>Data Structures Space and Time Complexity Analysis</p> </li> <li> <p>Data and Variable Mappings</p> </li> </ul> <ul> <li>ASN.1 / BER TLV / PER TLV</li> </ul> <ul> <li> <p>Linked Lists (Single, Circular, Double, XOR)</p> </li> <li> <p>Skip List</p> </li> </ul> <ul> <li> <p>Strand Sort</p> </li> <li> <p>Arrays (Rotations, Arrangement, Rearrangement, Searching and Sorting)</p> </li> </ul> <ul> <li>Matrices and Spare Matrices</li> </ul> <ul> <li> <p>Stacks (Array and Linked List) and FILO (First in Last Out)</p> </li> <li> <p>Expressions (Infix, Postfix and Prefix) and Infix to Postfix Conversions and Postfix Evaluation</p> </li> <li> <p>Queues (Standard, Circular and Double Ended) (Array and Linked List) (FIFO-First-in First-Out or FCFS-Fist Come First Serve)</p> </li> <li> <p>Multievel Queues (MLQ)</p> </li> <li> <p>Hanoi Tower</p> </li> </ul> <ul> <li> <p>Tree Structures and Binary Tree and Traversals (In-Order, Pre-Order, Post-Order)</p> </li> <li> <p>Heaps (Max, Min, Binary , Binomial, Fibonacci, Leftist, K-ary) and Priority Queue</p> </li> <li> <p>Heap Sort</p> </li> <li> <p>Huffman Coding</p> </li> </ul> <ul> <li> <p>Graph Representations (Adjency Matrix, Incidence Matrix, Adjency List) and Basics</p> </li> <li> <p>Graph Traversals ( Depth-First Search (DFS), Iterative Deepening Search(IDS) or Iterative Deepening Depth First Search(IDDFS), Breadth-First Search (BFS), Depth-limited Search, Uniform Cost Search, Bidirectional Search)</p> </li> <li> <p>Water Jug Problem</p> </li> </ul> <ul> <li> <p>Graph Topological Sorting</p> </li> <li> <p>Graph Minimum Spanning Tree (MST)</p> </li> <li> <p>Graph Backtracking ( Tug of War, n-Queen\u2019s, m Coloring, Euler&amp; Hamiltonian Path)</p> </li> <li> <p>Graph Shortest Paths</p> </li> <li> <p>Graph Connectivity, Max Flow, Isomorphism, Canonization and Cuts (Max /Min)</p> </li> </ul> <ul> <li> <p>Alpha-Beta Prunning</p> </li> <li> <p>Hasse Diagrams</p> </li> <li> <p>Petri Nets</p> </li> <li> <p>Bipartite Graphs</p> </li> <li> <p>Graph Cycle Detection (Brent\u2019s, Hare and Tortoise Algorithms)</p> </li> <li> <p>Bayesian Network</p> </li> <li> <p>Linear, Binary, Interpolation and Fibonacci Search</p> </li> <li> <p>Hashing and Hash Tables (Direct-Adress Tables, Hash Tables, Hash Functions, Open Adressing, Perfect Hashing)</p> </li> </ul> <ul> <li> <p>Common Sorting Algorithms ( Insertion, Selection, Radix, Quick, Heap, Permutation, Gnome, Comb, Flash, Stooge, Bees, Lucky, Indirect (Pointer), External ( Segmented), Shaker/Bidirectional Bubble, Shell Sort)</p> </li> <li> <p>Comparison of Sorting Methods</p> </li> <li> <p>Common Tree Data Structures and Operations ( Binary Search Tree, AVL Tree, B Tree and Derivations (2 3 4 Trees, 2 3 Trees, B+ Trees, B# Trees), R Tree, Red-Black Tree, Splay Tree, Van Emde Boas Tree, Binomial Tree, Minimax Tree)</p> </li> <li> <p>Comparison of Search Trees</p> </li> </ul> <ul> <li> <p>Augmenting Data Structures</p> </li> <li> <p>String LCS Problem (Hunt Macllory, Levenstein, Wagner-Fischer)</p> </li> <li> <p>String Alignment (Needleman Wunsch, Smith Waterman, Hunt Macllory), Tokenizer and Comparison</p> </li> <li> <p>String Search (Reverse Factor) Algorithms (Knuth-Morris-Pratt, Horspool, Boyer Moore, Brute-Force, DFA Text Search)</p> </li> </ul> <ul> <li> <p>Tries and Patricia Tree (Radix Tree)</p> </li> <li> <p>Data Structure for Disjoint Sets</p> </li> <li> <p>Sequential File Organization (Binary Search, Interpolation Search, Self-Organizing Sequential Search)</p> </li> <li> <p>Direct File Organization Locating Information</p> </li> <li> <p>Direct File Organization Hashing Functions ( MD5, HAVAL, SHA1, Key Mod N, Key Mod P, Truncation, Folding, Squaring, Radix Conversion, Polynomial Hashing, Alphabetic Keys, Collisions)</p> </li> <li> <p>Direct File Organization Collision Resolution</p> </li> </ul> <ul> <li> <p>Direct File Organization Coalesced Hashing (EISCH, LISCH, BEISCH, BLISCH, REISCH, RLISCH, EICH, LICH)</p> </li> <li> <p>Direct File Organization Progressive Overflow (Linear Probing, Quadratic Probing)</p> </li> <li> <p>Direct File Organization Double Hashing, Use of Buckets, Linear Quotient, Brent\u2019s Method, Binary Tree and Computed Chaining Insertion (CCI)</p> </li> <li> <p>Perfect Hashing and SimHash for Direct File Organization</p> </li> <li> <p>Comparison of Collision Resolution Methods</p> </li> </ul> <ul> <li> <p>Indexed Sequential File Organization</p> </li> <li> <p>Secondary Key Retrivals and Bits and Hashing for Classification and Checking</p> </li> <li> <p>Binary Tree Structures for Files (Binary Search, AVL Trees, Internal Path Reduction Trees)</p> </li> <li> <p>B-Trees and Derivates for Files (B Tree, B+Tree, B# Tree)</p> </li> <li> <p>Hashing Techniques for Expandable Files (Extendible, Dynamic and Linear Hashing)</p> </li> </ul> <ul> <li> <p>Tries, Approximate String Matching, Trie Hashing, Patricia Tree and Digital Search Tree for File Organization</p> </li> <li> <p>Secondary Key Retrivial (K-d Trees and Grid Files)</p> </li> <li> <p>File Sorting (Insertion, Quick, Heap Sorts, External Sorting, Sorting By Merging and Disk Sort)</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#d-textbooks-and-required-hardware-or-equipment","title":"D.    Textbooks and Required Hardware or Equipment","text":"<p>This course does not require a coursebook. If necessary, you can use the following books and open-source online resources.</p> <ul> <li> <p>C How to Program, 7/E. Deitel &amp; Deitel. 2013, Prentice-Hall.</p> </li> <li> <p>Intro to Java Programming, Comprehensive Version (10<sup>th</sup> Edition) 10<sup>th</sup>   Edition by Y. Daniel Liang</p> </li> <li> <p>Introduction to Algorithms, Third Edition By Thomas H. Cormen,   Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein</p> </li> </ul> <ul> <li> <p>Problem Solving and Program Design in C, J.R. Hanly, and E.B.   Koffman, 6<sup>th</sup> Edition.</p> </li> <li> <p>Alan L. Tharp. 1988. File organization and processing. John Wiley   &amp; Sons, Inc., USA.</p> </li> <li> <p>Richard Jankowski. 2010. Advanced data structures by Peter Brass   Cambridge University Press 2008. SIGACT News 41, 1 (March 2010), 19\u201320.   DOI:https://doi.org/10.1145/1753171.1753176</p> </li> <li> <p>Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4<sup>th</sup>. ed.).   Addison-Wesley Professional.</p> </li> </ul> <ul> <li>Additional Books TBD</li> </ul> <p>During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. </p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#e-grading","title":"E. Grading","text":"<p>You will complete one project and two written quizzes throughout the semester. You are expected to submit your Midterm Project Report at the midterm, demonstrating progress and outputs aligned with your project plan. In the 15<sup>th</sup> week, you will present and submit your Final Project Report. You will take a written quiz in the 8<sup>th</sup> week and another in the 14<sup>th</sup> week.</p> Assessment Code Weight Scope Midterm Project Report RAP1 60% Midterm Quiz-1 QUIZ1 40% Midterm Final Project Report RAP2 70% Final Quiz-2 QUIZ2 30% Final \\[ Grade_{Midterm} = 0.6 RAP1 + 0.4 QUIZ1 \\] \\[ Grade_{Final} = 0.7 RAP2 + 0.3 QUIZ2 \\] \\[ Passing Grade = (40 * Grade_{Midterm} + 60 * Grade_{Final}) / 100 \\]","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#f-instructional-strategies-and-methods","title":"F. Instructional Strategies and Methods","text":"<p>The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#g-late-homework","title":"G. Late Homework","text":"<p>Throughout the semester, assignments must be submitted as specified by the announced deadline. Overdue assignments will not be accepted.</p> <p>Unexpected situations must be reported to the instructor for late homeworks by students.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#h-course-platform-and-communication","title":"H. Course Platform and Communication","text":"<p>Google Classroom will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor as you needed to complete the course with success</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#i-academic-integrity-plagiarism-cheating","title":"I. Academic Integrity, Plagiarism &amp; Cheating","text":"<p>Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished.</p> <p>It is natural to interact with classmates and others to \"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating?</p> <p>It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying\", especially for assignments.</p> <p>The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#a-what-is-acceptable-when-preparing-an-assignment","title":"a. What is acceptable when preparing an assignment?","text":"<ul> <li>Communicating with classmates about the assignment to understand it better</li> </ul> <ul> <li> <p>Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online   or elsewhere into your assignment, provided that</p> </li> <li> <p>these are not themselves the whole solution to the assignment,</p> </li> <li> <p>you cite the origins of these</p> </li> </ul> <ul> <li> <p>Asking sources for help in guiding you for the English language content of your   assignment.</p> </li> <li> <p>Sharing small pieces of your assignment in the classroom to create a class discussion   on some controversial topics.</p> </li> </ul> <ul> <li> <p>Turning to the web or elsewhere for instructions, references, and solutions to   technical difficulties, but not for direct answers to the assignment</p> </li> <li> <p>Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code.</p> </li> <li> <p>Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you.</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#b-what-is-not-acceptable","title":"b. What is not acceptable?","text":"<ul> <li> <p>Ask a classmate to see their solution to a problem before submitting your own.</p> </li> <li> <p>Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work</p> </li> <li> <p>Giving or showing a classmate your solution to a problem when the classmate is struggling to solve it.</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#j-expectations","title":"J. Expectations","text":"<p>You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students will be emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field. In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#k-lecture-content-and-syllabus-updates","title":"K. Lecture Content and Syllabus Updates","text":"<p>If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"syllabus/syllabus/#course-schedule-overview","title":"Course Schedule Overview","text":"Weeks Dates Subjects Other Tasks Week 1 27.09.2024 Course Plan and Communication,Introduction to Linear &amp; Non-Linear Data Structure and Performance Analysis, Implementing Pointer and Objects for Data and Variables, Basic of ASN.1 / BER TLV / PER TLV TBD Week 2 04.10.2024 Linked Lists and Related Algorithms, Arrays and Matrices TBD Week 3 11.10.2024 Stacks, Queue Structures and Related Algorithms and Problems. TBD Week 4 18.10.2024 Tree Data Structure Types and Applications (Binary Tree, Tree Traversals, Heaps) TBD Week 5 25.10.2024 Graph Data Structure and Traversals Week-6 01.11.2024 Graph MST, Backtracking, Topological Sorting, Shortest Paths, Connectivity,Max Flow and Cycle Detection Algorithms. Graph Isomorphism and canonization Graph Cuts TBD Week-7 08.11.2024 Linear, Binary and Fibonacci Search Hashing and Hash Tables with Perfect Hashing TBD Week-8 15.11.2024 Quiz-1 + Interim Project Report Submission TBD Week-9 22.11.2024 Sorting Algorithms, Taxonomy and Comparisons TBD Week-10 29.11.2024 Advanced Tree Data Structures (Binary Search Tree, AVL Tree, B Trees and derivations,Red-Black trees, Splay Trees and Augmented Data Structures, van Emde Boas Trees, Binomial and Minimax Trees ) and Comparisons. TBD Week-11 06.12.2024 String Data Structure, Subsequence Search, Alignment and Comparison Algorithms. TBD Week-12 13.12.2024 String Search Algorithms, Tries, Data Structures for Disjoint Sets. TBD Week-13 20.12.2024 Introduction to File Organization and Processing Sequential File Organization,Direct File Organization Hash Methods +\u00a0Direct File Organization Indexes Binary and B Tree Structures for File. TBD Week-14 27.12.2024 Quiz-2 TBD Week-15 03.01.2025 Project Review and Presentation TBD \\[ End-Of-Syllabus \\]","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"week-1-intro/ce205-week-1-intro/","title":"CE205 Data Structures Week-1","text":"","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#week-1","title":"Week-1","text":"","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#course-plan-and-communication-course-plan-and-communication-introduction-to-linear-non-linear-data-structure-and-performance-analysis-implementing-pointer-and-objects-for-data-and-variables-basic-of-asn1-ber-tlv-per-tlv","title":"Course Plan and Communication, Course Plan and Communication, Introduction to Linear &amp; Non-Linear Data Structure and Performance Analysis, Implementing Pointer and Objects for Data and Variables Basic of ASN.1 / BER TLV / PER TLV","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#outline","title":"Outline","text":"<ul> <li>Data States</li> <li>Data Structure Metrics </li> <li>Data Mapping</li> <li>Data Structure Selection</li> <li>Data Structure References</li> <li>Industrial Data Standards (ASN.1,BER-TLV,etc.)</li> <li>Trends (Open API, 5G Systems etc.) </li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#introduction-to-data-structures","title":"Introduction to Data Structures","text":"","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#data-states","title":"Data States","text":"","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#data-states_1","title":"Data States","text":"<p>Data-in-use</p> <ul> <li>Data in use - Wikipedia </li> </ul> <p>Data-in-transit</p> <ul> <li>Data in transit - Wikipedia </li> </ul> <p>Data-at-rest</p> <ul> <li>Data at rest - Wikipedia </li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#data-structure-metrics","title":"Data Structure Metrics","text":"<p>Performance Analysis</p> <ul> <li>Data Structures Tutorials - Performance Analysis with examples </li> </ul> <p>Space Complexity</p> <ul> <li>Data Structures Tutorials - Space Complexity with examples </li> </ul> <p>Time Complexity</p> <ul> <li>Data Structures Tutorials - Time Complexity with examples</li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#data-mapping","title":"Data Mapping","text":"<p>Data and Variables</p> <ul> <li>C++ Data Types</li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#data-structure-selection","title":"Data Structure Selection","text":"<p>Linear &amp; Non-Linear Data Structures</p> <ul> <li> <p>Data Structures Tutorials - Linear and Non-linear types</p> </li> <li> <p>Data Structure and Types </p> </li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#data-structure-references","title":"Data Structure References","text":"<p>Implementing Pointer and Objects</p> <ul> <li> <p>Check CS50 Pointer Notes</p> </li> <li> <p>Week 0 - CS50</p> </li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#industrial-data-standards","title":"Industrial Data Standards","text":"<ul> <li>ASN.1 / BER TLV / PER TLV</li> <li>http://lionet.info/asn1c/download.html</li> <li>GitHub - ucoruh/asn1c-wsl-sample: ASN.1 C WSL and Windows Execution, Debugging and Code Generation Sample</li> <li>Open Source ASN.1 Compiler: asn1c 0.9.28 </li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#industrial-data-standards-telco","title":"Industrial Data Standards - Telco","text":"<ul> <li> <p>Sample Standard for ASN.1 Usage</p> </li> <li> <p>https://www.etsi.org/deliver/etsi_ts/125400_125499/125413/04.09.00_60/ts_125413v040900p.pdf</p> </li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#industrial-data-standards-payment","title":"Industrial Data Standards - Payment","text":"<ul> <li>Payment BER TLV Parser Sample</li> <li>TLV Utilities</li> <li>https://paymentcardtools.com/</li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#industrial-data-standards-telco_1","title":"Industrial Data Standards - Telco","text":"","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#asn1-standartlar","title":"ASN.1 Standartlar\u0131","text":"<ul> <li>ETSI</li> <li>https://portal.etsi.org/Services/Centre-for-Testing-Interoperability/ETSI-Approach/Specification-Languages/ASN1</li> <li>ITU-T</li> <li>https://www.itu.int/ITU-T/recommendations/fl.aspx?lang=1</li> <li>ASN.1 Book</li> <li>https://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF</li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#network-measurement-results-data","title":"Network Measurement Results Data","text":"<ul> <li>NMR\u00a0\u00a0\u00a0 </li> <li>https://www.etsi.org/deliver/etsi_ts/101500_101599/101503/08.27.00_60/ts_101503v082700p.pdf</li> <li>GSM API</li> <li>https://www.etsi.org/deliver/etsi_ts/101400_101499/101476/08.04.01_60/ts_101476v080401p.pdf</li> <li>UTRAN</li> <li>https://www.etsi.org/deliver/etsi_ts/125300_125399/125331/13.01.00_60/ts_125331v130100p.pdf</li> <li>E-UTRAN</li> <li>https://www.etsi.org/deliver/etsi_ts/136300_136399/136331/15.03.00_60/ts_136331v150300p.pdf</li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#open-source-5g-projects","title":"Open Source 5G Projects","text":"<ul> <li> <p>https://open5gs.org/</p> </li> <li> <p>5g nr development and setup \u00b7 Wiki \u00b7 oai / openairinterface5G \u00b7 GitLab</p> </li> </ul>","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-1-intro/ce205-week-1-intro/#open-api","title":"OPEN API","text":"<ul> <li>Open API Generator</li> <li>https://openapi-generator.tech/</li> <li>Open API Yaml Configurations</li> <li>GitHub - jdegre/5GC_APIs: RESTful APIs of main Network Functions in the 3GPP 5G Core Network</li> <li>Open API AUSF Yaml Configuration </li> <li>https://www.etsi.org/deliver/etsi_TS/129500_129599/129509/17.06.00_60/ts_129509v170600p.pdf</li> <li>https://www.etsi.org/deliver/etsi_TS/129500_129599/129509/17.06.00_60/ts_129509v170600p0.zip</li> </ul> \\[ End-Of-Week-1 \\]","tags":["ce205-week-1","asn-1","ber-tlv","per-tlv"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/","title":"CE205 Data Structures Week-10","text":"","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#week-10","title":"Week-10","text":"","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#advaced-tree-data-structures-binary-search-tree-avl-tree-b-trees-and-derivationsred-black-trees-splay-trees-and-augmented-data-structures-van-emde-boas-trees-binomial-and-minimax-trees-and-comparisons","title":"Advaced Tree Data Structures (Binary Search Tree, AVL Tree, B Trees and derivations,Red-Black trees, Splay Trees and Augmented Data Structures, van Emde Boas Trees, Binomial and Minimax Trees ) and Comparisons.","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#outline","title":"Outline","text":"<ul> <li>Trees</li> <li>Binary Search Tree<ul> <li>Search and Insertion</li> <li>Delete</li> <li>BST over Hash Table</li> <li>Construction and Conversions</li> <li>Check Smallest/Largest Element</li> </ul> </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#outline_1","title":"Outline","text":"<ul> <li>Trees</li> <li>Red Black Tree and Threaded Binary Tree</li> <li>AVL Trees</li> <li>B Trees<ul> <li>Defitinion of B Trees</li> <li>Basic operations on B tree</li> <li>Deleting a key from a B tree</li> </ul> </li> <li>2 3 4 Trees</li> <li>2 3 Trees</li> <li>B+ Trees</li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#outline_2","title":"Outline","text":"<ul> <li>Trees</li> <li>R Trees</li> <li>Red - Black Tree Datastructure</li> <li>Splay Tree Datastructure</li> <li>Augmenting Data Structures <ul> <li>Dynamic order statistics </li> <li>How to augment a data structure </li> </ul> </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#outline_3","title":"Outline","text":"<ul> <li> <p>Trees</p> </li> <li> <p>Interval trees</p> </li> <li>van Emde Boas Trees<ul> <li>Preliminary approaches</li> <li>A recursive structure </li> <li>The van Emde Boas tree</li> </ul> </li> <li>Binomial Trees</li> <li>Comparison of Search Trees</li> <li>Minimax Tree</li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#binary-search-tree","title":"Binary Search Tree","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/binary-search-tree.html </li> <li>https://visualgo.net/en/bst?slide=1 (Select BINARY SEARCH TREE)</li> <li> <p>https://www.cs.usfca.edu/~galles/visualization/BST.html </p> </li> <li> <p>Search and Insertion</p> </li> <li>Delete</li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#bst-over-hash-table","title":"BST over Hash Table","text":"<ul> <li> <p>https://www.geeksforgeeks.org/advantages-of-bst-over-hash-table/?ref=lbp </p> </li> <li> <p>Construction and Conversions</p> </li> <li>Check Smallest/Largest Element</li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#red-black-tree-and-threaded-binary-tree","title":"Red Black Tree and Threaded Binary Tree","text":"<ul> <li>https://www.geeksforgeeks.org/threaded-binary-tree/ </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#avl-trees","title":"AVL Trees","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/avl-trees.html </li> <li>https://visualgo.net/en/bst (Select AVL)</li> <li>https://www.cs.usfca.edu/~galles/visualization/AVLtree.html </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#b-trees","title":"B Trees","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/b-trees.html </li> <li>https://www.cs.usfca.edu/~galles/visualization/BTree.html </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#defitinion-of-b-trees","title":"Defitinion of B Trees","text":"<ul> <li>https://www.geeksforgeeks.org/introduction-of-b-tree-2/ </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#basic-operations-on-b-tree","title":"Basic operations on B tree","text":"<ul> <li>https://www.geeksforgeeks.org/insert-operation-in-b-tree/ </li> <li>https://www.guru99.com/b-tree-example.html </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#deleting-a-key-from-a-b-tree","title":"Deleting a key from a B tree","text":"<ul> <li>https://www.geeksforgeeks.org/delete-operation-in-b-tree/ </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#2-3-4-trees","title":"2 3 4 Trees","text":"<ul> <li>https://en.wikipedia.org/wiki/2%E2%80%933%E2%80%934_tree </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#2-3-trees","title":"2 3 Trees","text":"<ul> <li>https://en.wikipedia.org/wiki/2%E2%80%933_tree</li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#b-trees_1","title":"B+ Trees","text":"<ul> <li>https://www.geeksforgeeks.org/introduction-of-b-tree/ </li> <li>https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html </li> <li>https://www.geeksforgeeks.org/difference-between-b-tree-and-b-tree/?ref=rp </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#r-trees","title":"R Trees","text":"<ul> <li>https://www.geeksforgeeks.org/introduction-to-r-tree/?ref=rp </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#red-black-tree-datastructure","title":"Red - Black Tree Datastructure","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/red-black-trees.html </li> <li>https://www.geeksforgeeks.org/red-black-tree-set-1-introduction-2/?ref=rp </li> <li>https://www.geeksforgeeks.org/red-black-tree-set-2-insert/ </li> <li>https://www.geeksforgeeks.org/red-black-tree-set-3-delete-2/ </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#splay-tree-datastructure","title":"Splay Tree Datastructure","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/splay-trees.html </li> <li>https://www.geeksforgeeks.org/splay-tree-set-1-insert/?ref=rp </li> <li>https://www.geeksforgeeks.org/splay-tree-set-2-insert-delete/ </li> <li>https://www.geeksforgeeks.org/splay-tree-set-3-delete/?ref=rp </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#augmenting-data-structures","title":"Augmenting Data Structures","text":"<ul> <li> <p>http://cs.bilkent.edu.tr/~ugur/teaching/cs502/material/cs502_2_ADS.pdf </p> </li> <li> <p>https://iq.opengenus.org/augmented-data-structures/</p> </li> <li> <p>http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap15.htm</p> </li> <li> <p>http://www.facweb.iitkgp.ac.in/~sourav/Lecture-11.pdf</p> </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#dynamic-order-statistics","title":"Dynamic order statistics","text":"<ul> <li>http://www.facweb.iitkgp.ac.in/~sourav/Lecture-11.pdf</li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#how-to-augment-a-data-structure","title":"How to augment a data structure","text":"<ul> <li>http://www.facweb.iitkgp.ac.in/~sourav/Lecture-11.pdf</li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#interval-trees","title":"Interval trees","text":"<ul> <li>https://www.geeksforgeeks.org/interval-tree/ </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#van-emde-boas-trees","title":"van Emde Boas Trees","text":"<ul> <li>https://www.geeksforgeeks.org/van-emde-boas-tree-set-1-basics-and-construction/ </li> <li> <p>https://web.stanford.edu/class/archive/cs/cs166/cs166.1146/lectures/14/Small14.pdf</p> </li> <li> <p>Preliminary approaches</p> </li> <li>A recursive structure </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#binomial-trees","title":"Binomial Trees","text":"<ul> <li>https://www.geeksforgeeks.org/binomial-heap-2/#:~:text=What%20is%20a%20Binomial%20Tree,as%20leftmost%20child%20or%20other. </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#comparison-of-search-trees","title":"Comparison of Search Trees","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/comparison-of-search-trees.html </li> </ul>","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-10-advanced-tree-structures/ce205-week-10-advanced-tree-structures/#minimax-tree","title":"Minimax Tree","text":"<ul> <li>https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction/ </li> </ul> \\[ End-Of-Week-10 \\]","tags":["ce205-week-10","advanced-tree-structures","binary-search-tree","avl-tree","red-black-tree"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/","title":"CE205 Data Structures Week-11","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#week-11","title":"Week-11","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#string-data-structures","title":"String Data Structures","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#outline","title":"Outline","text":"<ul> <li>Strings   -Longest common subsequence problem<ul> <li>Longest increasing subsequence</li> <li>Hunt\u2013Szymanski algorithm (Hunt Macllory)</li> <li>Levenshtein distance</li> <li>Wagner\u2013Fischer algorithm</li> </ul> </li> <li>String Alignment<ul> <li>Needleman Wunsch</li> <li>Smith Waterman</li> <li>Hunt Macllory</li> </ul> </li> <li>String Tokenizer</li> <li>String Comparison</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#strings","title":"Strings","text":"<ul> <li>https://www.geeksforgeeks.org/string-data-structure/</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#longest-common-subsequence-problem","title":"Longest common subsequence problem","text":"<ul> <li> <p>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-6/ce100-week-6-lcs/?h=lcs#problem-3-longest-common-subsequence</p> </li> <li> <p>https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/</p> </li> <li>https://www.programiz.com/dsa/longest-common-subsequence</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#longest-common-subsequence-problem_1","title":"Longest common subsequence problem","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#longest-increasing-subsequence","title":"Longest increasing subsequence","text":"<ul> <li>https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/#:~:text=The%20Longest%20Increasing%20Subsequence%20(LIS)%20problem%20is%20to%20find%20the,50%2C%2060%2C%2080%7D.</li> <li>https://cp-algorithms.com/sequences/longest_increasing_subsequence.html</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#longest-common-subsequence-problem_2","title":"Longest common subsequence problem","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#huntszymanski-algorithm-hunt-macllory","title":"Hunt\u2013Szymanski algorithm (Hunt Macllory)","text":"<ul> <li>https://en.wikipedia.org/wiki/Hunt%E2%80%93Szymanski_algorithm</li> <li>https://www.geeksforgeeks.org/python-program-for-longest-common-subsequence/?ref=gcse</li> <li>https://imada.sdu.dk/~rolf/Edu/DM823/E16/HuntSzymanski.pdf</li> <li>https://github.com/LetsTrie/Code-Library-Of-Others/blob/master/sgtlaugh/Hunt-Szymanski.cpp</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#longest-common-subsequence-problem_3","title":"Longest common subsequence problem","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#levenshtein-distance","title":"Levenshtein distance","text":"<ul> <li>https://en.wikipedia.org/wiki/Levenshtein_distance</li> <li>https://www.geeksforgeeks.org/java-program-to-implement-levenshtein-distance-computing-algorithm/?ref=gcse</li> <li>https://medium.com/@ethannam/understanding-the-levenshtein-distance-equation-for-beginners-c4285a5604f0</li> <li>https://www.educative.io/answers/the-levenshtein-distance-algorithm</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#longest-common-subsequence-problem_4","title":"Longest common subsequence problem","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#wagnerfischer-algorithm","title":"Wagner\u2013Fischer algorithm","text":"<ul> <li>https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm</li> <li>https://www.geeksforgeeks.org/java-program-to-implement-wagner-and-fisher-algorithm-for-online-string-matching/</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#string-alignment","title":"String Alignment","text":"<ul> <li>https://www.geeksforgeeks.org/sequence-alignment-problem/?ref=gcse</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#string-alignment_1","title":"String Alignment","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#needleman-wunsch","title":"Needleman Wunsch","text":"<ul> <li>https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm</li> <li>https://www.geeksforgeeks.org/sequence-alignment-problem/?ref=gcse</li> <li>https://berthub.eu/nwunsch/</li> <li>http://experiments.mostafa.io/public/needleman-wunsch/index.html</li> <li>https://zhanggroup.org/NW-align/</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#string-alignment_2","title":"String Alignment","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#smith-waterman","title":"Smith Waterman","text":"<ul> <li>https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm</li> <li>http://jaligner.sourceforge.net/</li> <li>http://baba.sourceforge.net/</li> <li>https://doc.ugene.net/wiki/display/UUOUM15/Smith-Waterman+Search</li> <li>https://www.ebi.ac.uk/Tools/sss/fasta/</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#string-alignment_3","title":"String Alignment","text":"","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#hunt-macllory","title":"Hunt Macllory","text":"<ul> <li>https://en.wikipedia.org/wiki/Hunt%E2%80%93Szymanski_algorithm</li> <li>https://www.geeksforgeeks.org/python-program-for-longest-common-subsequence/?ref=gcse</li> <li>https://imada.sdu.dk/~rolf/Edu/DM823/E16/HuntSzymanski.pdf</li> <li>https://github.com/LetsTrie/Code-Library-Of-Others/blob/master/sgtlaugh/Hunt-Szymanski.cpp</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#string-tokenizer","title":"String Tokenizer","text":"<ul> <li>https://towardsdatascience.com/tokenization-algorithms-explained-e25d5f4322ac</li> <li>https://www.oreilly.com/library/view/applied-natural-language/9781492062561/ch04.html</li> <li>https://www.geeksforgeeks.org/nlp-how-tokenizing-text-sentence-words-works/?ref=gcse</li> <li>https://github.com/frohoff/jdk8u-dev-jdk/blob/master/src/share/classes/java/util/StringTokenizer.java</li> </ul>","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-11-string-structures/ce205-week-11-string-structures/#string-comparison","title":"String Comparison","text":"<ul> <li>https://en.wikipedia.org/wiki/String-searching_algorithm</li> <li>https://www.geeksforgeeks.org/compare-two-strings-in-java/</li> <li>https://www.geeksforgeeks.org/comparing-two-strings-cpp/</li> </ul> \\[ End-Of-Week-11 \\]","tags":["ce205-week-11","string-data-structure","subsequence-search","alignment-algorithms","comparison-algorithms"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/","title":"CE205 Data Structures Week-12","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#week-12","title":"Week-12","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#string-search-algorithms-tries-data-structures-for-disjoint-sets","title":"String Search Algorithms, Tries, Data Structures for Disjoint Sets","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#outline","title":"Outline","text":"<ul> <li>Strings</li> <li>Reverse Factor Algorithm (String Search)<ul> <li>Knuth-Morris-Pratt Algorithm</li> <li>Horspool Algorithm</li> <li>Boyer-Moore Algorithm</li> <li>Brute-Force / Linear Text Search</li> <li>DFA Text Search</li> </ul> </li> <li>Tries<ul> <li>Patricia Tree (Radix Tree)</li> </ul> </li> <li>Data Structures for Disjoint Sets<ul> <li>Disjoint-set operations </li> <li>Linked-list representation of disjoint sets </li> <li>Disjoint-set forests </li> <li>Analysis of union by rank with path compression</li> </ul> </li> </ul>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#strings-reverse-factor-algorithm-string-search","title":"Strings - Reverse Factor Algorithm (String Search)","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#knuth-morris-pratt-algorithm","title":"Knuth-Morris-Pratt Algorithm","text":"<ul> <li>https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm</li> <li>https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/</li> <li>https://www.javatpoint.com/daa-knuth-morris-pratt-algorithm</li> <li>https://www.educative.io/answers/what-is-the-knuth-morris-pratt-algorithm</li> <li>http://www.btechsmartclass.com/data_structures/knuth-morris-pratt-algorithm.html</li> <li>https://www-igm.univ-mlv.fr/~lecroq/string/node32.html#SECTION00320</li> <li>https://algs4.cs.princeton.edu/lectures/keynote/53SubstringSearch.pdf</li> </ul>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#strings-reverse-factor-algorithm-string-search_1","title":"Strings - Reverse Factor Algorithm (String Search)","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#horspool-algorithm","title":"Horspool Algorithm","text":"<ul> <li>https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm</li> <li>https://www.inf.hs-flensburg.de/lang/algorithmen/pattern/horsen.htm</li> <li>https://www-igm.univ-mlv.fr/~lecroq/string/node18.html</li> </ul>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#strings-reverse-factor-algorithm-string-search_2","title":"Strings - Reverse Factor Algorithm (String Search)","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#boyer-moore-algorithm","title":"Boyer-Moore Algorithm","text":"<ul> <li>https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm</li> <li>https://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/?ref=gcse</li> </ul>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#strings-reverse-factor-algorithm-string-search_3","title":"Strings - Reverse Factor Algorithm (String Search)","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#brute-force-linear-text-search","title":"Brute-Force / Linear Text Search","text":"<ul> <li>https://algs4.cs.princeton.edu/lectures/keynote/53SubstringSearch.pdf</li> </ul>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#strings-reverse-factor-algorithm-string-search_4","title":"Strings - Reverse Factor Algorithm (String Search)","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#dfa-deterministic-finite-automaton-text-search","title":"DFA (deterministic finite automaton) Text Search","text":"<ul> <li>https://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/</li> </ul>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#tries","title":"Tries","text":"","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#patricia-tree-radix-tree","title":"Patricia Tree (Radix Tree)","text":"<ul> <li>https://en.wikipedia.org/wiki/Radix_tree</li> <li>http://www.btechsmartclass.com/data_structures/tries.html</li> <li>https://www.geeksforgeeks.org/implementing-patricia-trie-in-java/</li> </ul>","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-12-string-algorithms/ce205-week-12-string-algorithms/#data-structures-for-disjoint-sets","title":"Data Structures for Disjoint Sets","text":"<ul> <li> <p>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-10/ce100-week-10-graphs/?h=disjoint#disjoint-set-operations</p> </li> <li> <p>Disjoint-set operations </p> </li> <li>Linked-list representation of disjoint sets </li> <li>Disjoint-set forests </li> <li> <p>Analysis of union by rank with path compression</p> </li> <li> <p>https://www.geeksforgeeks.org/disjoint-set-data-structures/</p> </li> <li>https://www.javatpoint.com/disjoint-set-data-structure</li> </ul> \\[ End-Of-Week-12 \\]","tags":["ce205-week-12","string-search-algorithms","tries","disjoint-sets"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/","title":"CE205 Data Structures Week-13","text":"","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#week-13","title":"Week-13","text":"","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#introduction-to-file-organization-and-processing-sequential-file-organizationdirect-file-organization-hash-methods","title":"Introduction to File Organization and Processing Sequential File Organization,Direct File Organization Hash Methods","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#outline-1","title":"Outline-1","text":"<ul> <li>File Organization</li> <li>Sequential File Organization<ul> <li>Binary Search</li> <li>Interpolation Search</li> <li>Self-Organizing Sequential Search</li> </ul> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#outline-2","title":"Outline-2","text":"<ul> <li>File Organization</li> <li>Direct File Organization<ul> <li>Locating Information</li> <li>Hashing Functions (MD5, HAVAL, SHA1 etc.)</li> <li>Key mod N</li> <li>Key mod P</li> <li>Truncation</li> <li>Folding</li> <li>Squaring</li> <li>Radix Conversion</li> <li>Polynomial Hashing</li> <li>Alphabetic Keys</li> <li>Collisions</li> </ul> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#outline-3","title":"Outline-3","text":"<ul> <li>File Organization</li> <li>Direct File Organization<ul> <li>Collision Resolution</li> <li>Collision resolution with links</li> <li>Collision resolution without links</li> <li>Static positioning of records</li> <li>Dynamic positioning of records</li> <li>Collision resolution with pseudolinks</li> </ul> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#outline-4","title":"Outline-4","text":"<ul> <li>File Organization</li> <li>Direct File Organization<ul> <li>Coalesced Hashing</li> <li>EISCH</li> <li>LISCH</li> <li>BEISCH</li> <li>BLISCH</li> <li>REISCH</li> <li>RLISCH</li> <li>EICH</li> <li>LICH</li> </ul> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#outline-5","title":"Outline-5","text":"<ul> <li>File Organization</li> <li>Direct File Organization<ul> <li>Progressive Overflow</li> <li>Linear Probing</li> <li>Quadratic Probing</li> <li>Double Hashing</li> <li>Use of Buckets</li> <li>Linear Quotient</li> <li>Brent\u2019s Method</li> </ul> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#outline-6","title":"Outline-6","text":"<ul> <li>File Organization</li> <li>Direct File Organization<ul> <li>Binary Tree</li> <li>Computed Chaining Insertion(CCI)</li> <li>Comparison of Collision Resolution Methods</li> <li>Perfect Hashing</li> <li>SimHash</li> </ul> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#file-organization","title":"File Organization","text":"","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#sequential-file-organization","title":"Sequential File Organization","text":"<ul> <li>Binary Search</li> <li>https://www.scss.tcd.ie/Owen.Conlan/4d2/4D2-4_File_Sorting_v1.pdf</li> <li>https://www.programiz.com/dsa/binary-search</li> <li>Interpolation Search</li> <li>https://www.geeksforgeeks.org/interpolation-search/ </li> <li>Self-Organizing Sequential Search</li> <li>https://people.csail.mit.edu/rivest/pubs/Riv76a.pdf</li> <li>https://xlinux.nist.gov/dads/HTML/selforganizingSequentialSearch.html</li> <li>https://xlinux.nist.gov/dads/HTML/transposeSeqSearch.html</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#file-organization_1","title":"File Organization","text":"","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#direct-file-organization","title":"Direct File Organization","text":"","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#locating-information","title":"Locating Information","text":"","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#hashing-functions-md5-haval-sha1-etc","title":"Hashing Functions (MD5, HAVAL, SHA1 etc.)","text":"<ul> <li>Key mod N</li> <li>Key mod P</li> <li>Truncation</li> <li>Folding</li> <li>Squaring</li> <li>Radix Conversion</li> <li>Polynomial Hashing</li> <li>Alphabetic Keys</li> <li>Collisions</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#hashing-functions-md5-haval-sha1-etc_1","title":"Hashing Functions (MD5, HAVAL, SHA1 etc.)","text":"<ul> <li>http://www.cs.bilkent.edu.tr/~kdincer/teaching/spring1999/bu-bil212-fo/lectures/pdf-files/bil212-chp6-2.pdf</li> <li>https://www.amirajcollege.in/wp-content/uploads/2020/06/3130702-chapter-4-hashing-and-file-structure.pdf</li> <li>https://www.cs.bilkent.edu.tr/~kdincer/teaching/spring1999/bu-bil212-fo/lecture_notes.htm</li> <li>https://www.cs.otago.ac.nz/cosc242/pdf/L09.pdf</li> <li>https://www.cs.otago.ac.nz/cosc242/pdf/L10.pdf</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#collision-resolution","title":"Collision Resolution","text":"<ul> <li>Collision resolution with links</li> <li>Collision resolution without links</li> <li>Static positioning of records</li> <li>https://www.cs.bilkent.edu.tr/~canf/CS351Fall2010/cs351lecturenotes/week5/index.html</li> <li>Dynamic positioning of records</li> <li>https://www.cs.bilkent.edu.tr/~canf/CS351Fall2010/cs351lecturenotes/week5/index.html</li> <li>Collision resolution with pseudolinks</li> <li> <p>https://www.cs.bilkent.edu.tr/~canf/CS351Fall2010/cs351lecturenotes/week6/index.html</p> </li> <li> <p>http://www.cs.bilkent.edu.tr/~kdincer/teaching/spring1999/bu-bil212-fo/lectures/pdf-files/bil212-chp6-2.pdf</p> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#coalesced-hashing","title":"Coalesced Hashing","text":"<ul> <li>EISCH</li> <li>LISCH</li> <li>BEISCH</li> <li>BLISCH</li> <li>REISCH</li> <li>RLISCH</li> <li>EICH</li> <li> <p>LICH</p> </li> <li> <p>https://www.cs.bilkent.edu.tr/~kdincer/teaching/spring1999/bu-bil212-fo/lectures/pdf-files/bil212-chp6-2.pdf</p> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#progressive-overflow","title":"Progressive Overflow","text":"<ul> <li>Linear Probing</li> <li>https://en.wikipedia.org/wiki/Linear_probing#:~:text=Linear%20probing%20is%20a%20scheme,by%20Gene%20Amdahl%2C%20Elaine%20M.</li> <li>Quadratic Probing</li> <li> <p>https://www.geeksforgeeks.org/quadratic-probing-in-hashing/</p> </li> <li> <p>https://www.cs.bilkent.edu.tr/~kdincer/teaching/spring1999/bu-bil212-fo/lectures/pdf-files/bil212-chp6-2.pdf</p> </li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#double-hashing","title":"Double Hashing","text":"<ul> <li>https://www.geeksforgeeks.org/double-hashing/</li> <li>https://www.geeksforgeeks.org/hashing-set-3-open-addressing/</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#use-of-buckets","title":"Use of Buckets","text":"<ul> <li>https://www.geeksforgeeks.org/file-organization-in-dbms-set-4/</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#linear-quotient","title":"Linear Quotient","text":"<ul> <li>http://www.cs.bilkent.edu.tr/~kdincer/teaching/spring1999/bu-bil212-fo/lectures/pdf-files/bil212-chp6-2.pdf</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#brents-method","title":"Brent\u2019s Method","text":"<ul> <li>https://github.com/ncilengir/brent-hashing</li> <li>https://cseweb.ucsd.edu//~kube/cls/100/Lectures/lec17.brentsordered/lec17.pdf</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#binary-tree","title":"Binary Tree","text":"<ul> <li>https://stackoverflow.com/questions/8801898/representing-a-binary-tree-in-a-file</li> <li>https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/</li> <li>https://www.cs.otago.ac.nz/cosc242/pdf/L12.pdf</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#computed-chaining-insertioncci","title":"Computed Chaining Insertion(CCI)","text":"<ul> <li>https://www.geeksforgeeks.org/c-program-hashing-chaining/</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#comparison-of-collision-resolution-methods","title":"Comparison of Collision Resolution Methods","text":"<ul> <li>https://web.itu.edu.tr/~bkurt/Courses/blg341/lectures_full.pdf</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#perfect-hashing","title":"Perfect Hashing","text":"<ul> <li>http://www.cs.otago.ac.nz/cosc242/pdf/L11.pdf</li> </ul>","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-13-direct-sequential-file/ce205-week-13-direct-sequential-file/#simhash","title":"SimHash","text":"<ul> <li>Similar Hash</li> </ul> \\[ End-Of-Week-13 \\]","tags":["ce205","fileorg","seqfile","directfile","hashing","hashfunc","collision","coalesced","overflow","linprobe","quadprobe","dblhash","binsearch","interpsearch","selfsearch","datastruct","simhash","perhash","hashtable"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/","title":"CE205 Data Structures Week-14","text":"","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#week-14","title":"Week-14","text":"","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#direct-file-organization-indexes-binary-and-b-tree-structures-for-file","title":"Direct File Organization Indexes Binary and B Tree Structures for File","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#outline","title":"Outline","text":"<ul> <li>Indexed Sequential File Organization</li> <li>Bits of Information</li> <li>Secondary Key Retrieval</li> <li>Multilist File Organization</li> <li>Inverted Files</li> <li>Partial Match Retrieval with Signature Trees</li> <li>Partial Match Retrieval with Page Signatures</li> </ul>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#outline_1","title":"Outline","text":"<ul> <li>Bits and Hashing</li> <li>Signature Hashing</li> <li>Bloom Filters</li> <li>Classification Hashing</li> <li>Check Hashing</li> </ul>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#outline_2","title":"Outline","text":"<ul> <li>Binary Tree Structures</li> <li>Binary Search Trees</li> <li>AVL Trees</li> <li>Internal Path Reduction Trees</li> </ul>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#outline_3","title":"Outline","text":"<ul> <li>B-Trees and Derivatives</li> <li>B-Trees</li> <li>B#-Trees</li> <li>B+ -Trees</li> </ul>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#indexed-sequential-file-organization","title":"Indexed Sequential File Organization","text":"<ul> <li>Bits of Information</li> <li>Secondary Key Retrieval</li> <li>Multilist File Organization</li> <li>Inverted Files</li> <li>Partial Match Retrieval with Signature Trees</li> <li> <p>Partial Match Retrieval with Page Signatures</p> </li> <li> <p>https://www.amirajcollege.in/wp-content/uploads/2020/06/3130702-chapter-4-hashing-and-file-structure.pdf</p> </li> </ul>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#bits-and-hashing","title":"Bits and Hashing","text":"<ul> <li>Signature Hashing</li> <li>Unique File Hashing</li> <li>Bloom Filters</li> <li>https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/</li> <li>Classification Hashing</li> <li>https://en.wikipedia.org/wiki/Feature_hashing</li> <li>Check Hashing</li> </ul>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#binary-tree-structures","title":"Binary Tree Structures","text":"<ul> <li>Binary Search Trees</li> <li>AVL Trees</li> <li>Internal Path Reduction Trees</li> </ul>","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-14-direct-file-b-tree/ce205-week-14-direct-file-b-tree/#b-trees-and-derivatives","title":"B-Trees and Derivatives","text":"<ul> <li>B-Trees</li> <li>https://www.geeksforgeeks.org/introduction-of-b-tree-2/</li> <li>https://web.itu.edu.tr/~bkurt/Courses/blg341/lecture11.pdf</li> <li>B#-Trees</li> <li>.</li> <li>B+ -Trees</li> <li>https://www.geeksforgeeks.org/introduction-of-b-tree/?ref=gcse</li> </ul> \\[ End-Of-Week-14 \\]","tags":["ce205","fileorg","binarytree","btree","seqfile","multilist","invfile","bloomfilter","signature","hashing"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/","title":"CE205 Data Structures Week-15","text":"","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/#week-15","title":"Week-15","text":"","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/#hashing-techniques-for-expandable-filestries-approximate-string-matching-trie-hashing-seconday-key-retrieval-2-file-sorting","title":"Hashing Techniques for Expandable Files,Tries, Approximate String Matching, Trie Hashing, Seconday Key Retrieval (2), File Sorting","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/#outline","title":"Outline","text":"<ul> <li>Hashing Techniques for Expandable Files</li> <li>Extendible Hashing</li> <li>Dynamic Hashing</li> <li>Linear Hashing</li> </ul>","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/#outline_1","title":"Outline","text":"<ul> <li>Other Tree Structures</li> <li>Tries</li> <li>Approximate String Matching</li> <li>Trie Hashing</li> <li>PATRICIA Trees</li> <li>Digital Search Trees</li> </ul>","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/#outline_2","title":"Outline","text":"<ul> <li>Seconday Key Retrieval (2)</li> <li>K-d trees</li> <li>Grid Files</li> </ul>","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-15-hashing-trie/ce205-week-15-hashing-trie/#outline_3","title":"Outline","text":"<ul> <li>File Sorting</li> <li>Insertion Sort</li> <li>Quicksort</li> <li>Heapsort</li> <li>External Sorting</li> <li>Sorting by Merging</li> <li>Disk Sort</li> </ul> \\[ End-Of-Week-15 \\]","tags":["ce205","hashing","trie","stringmatching","secondarykey","filesorting","patricia","dynamic","extendible"]},{"location":"week-16-final/ce205-week-16-final/","title":"CE205 Data Structures Week-16","text":"","tags":["ce205","final"]},{"location":"week-16-final/ce205-week-16-final/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205","final"]},{"location":"week-16-final/ce205-week-16-final/#week-16","title":"Week-16","text":"","tags":["ce205","final"]},{"location":"week-16-final/ce205-week-16-final/#final","title":"Final","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p> <p>No Content</p>","tags":["ce205","final"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/","title":"CE205 Data Structures Week-2","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#week-2","title":"Week-2","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#linked-lists-and-related-algorithms-arrays-and-matrices","title":"Linked Lists and Related Algorithms Arrays and Matrices","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#outline-1","title":"Outline-1","text":"<ul> <li>Resources </li> <li>ASN.1 C Workshop</li> <li>Single Linked List</li> <li>Circular Linked List</li> <li>Double Linked List</li> <li>XOR Linked List</li> <li>Skip List</li> <li>Strand Sort</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#outline-2","title":"Outline-2","text":"<ul> <li>Arrays</li> <li>Array Rotations</li> <li>Arrangement Rearrangement</li> <li>Array Searching and Sorting</li> <li>Matrix</li> <li>Sparse Matrix</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#resources","title":"Resources","text":"<ul> <li>WilliamFiset </li> <li>WilliamFiset - YouTube</li> <li>GitHub - williamfiset/Algorithms: A collection of algorithms and data structures</li> <li>Btech Smart Class</li> <li>Data Structures Tutorials - Introduction to Algorithms</li> <li>Programiz</li> <li>Data Structure and Types</li> <li>GeeksforGeeks</li> <li>Array Data Structure - GeeksforGeeks</li> <li>Visual Algo</li> <li>https://visualgo.net/en</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop","title":"Workshop","text":"<p>Follow the link below and complete steps.</p> <ul> <li>https://github.com/ucoruh/asn1c-wsl-sample </li> </ul> <p>There are quick start and reference guides</p> <ul> <li>http://lionet.info/asn1c/asn1c-quick.pdf</li> <li>http://lionet.info/asn1c/asn1c-usage.pdf</li> <li>https://www.itu.int/ITU-T/studygroups/com17/languages/</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop_1","title":"Workshop","text":"<p>Visit T\u00dcB\u0130TAK KAMU SM MA3API Web Page</p> <ul> <li>https://yazilim.kamusm.gov.tr/?q=tr/node/19&amp;language=en</li> <li>https://yazilim.kamusm.gov.tr/?q=/node/14</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop_2","title":"Workshop","text":"<p>Check out ASN.1 encoded standards. </p> <ul> <li>ETSI TS 101 733 CADES digital signature (ASN data structure)</li> <li>https://www.etsi.org/deliver/etsi_ts/101700_101799/101733/02.02.01_60/ts_101733v020201p.pdf</li> <li>ETSI TS 102 778 PADES digital signature (PDF data structure)</li> <li>https://www.etsi.org/deliver/etsi_ts/102700_102799/10277803/01.02.01_60/ts_10277803v010201p.pdf</li> <li>ETSI TS 101 903 XADES digital signature (XML data structure)</li> <li>https://www.etsi.org/deliver/etsi_ts/101900_101999/101903/01.04.02_60/ts_101903v010402p.pdf</li> <li>ETSI TS 102 918 ASiC digital signature</li> <li>https://www.etsi.org/deliver/etsi_ts/102900_102999/102918/01.03.01_60/ts_102918v010301p.pdf</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop_3","title":"Workshop","text":"<p>Check out ASN.1 encoded standards. </p> <ul> <li>Also there is An Implementation of CAdES, XAdES, PAdES and ASiC for Windows in C++</li> <li>https://github.com/WindowsNT/AdES</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop_4","title":"Workshop","text":"<p>Telecom Standard Example for ASN.1 </p> <ul> <li>https://www.etsi.org/deliver/etsi_ts/125400_125499/125413/04.09.00_60/ts_125413v040900p.pdf</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop_5","title":"Workshop","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#industrial-data-standards-payment","title":"Industrial Data Standards - Payment","text":"<ul> <li>TLV Utilities</li> <li>https://paymentcardtools.com/</li> <li>https://emvlab.org/dumpasn1/</li> <li>Sample EMV ASN.1 </li> <li>https://github.com/mmattice/emv-asn1</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop_6","title":"Workshop","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#industrial-data-standards-telco","title":"Industrial Data Standards - Telco","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#asn1-standartlar","title":"ASN.1 Standartlar\u0131","text":"<ul> <li>ETSI</li> <li>https://portal.etsi.org/Services/Centre-for-Testing-Interoperability/ETSI-Approach/Specification-Languages/ASN1</li> <li>ITU-T</li> <li>https://www.itu.int/ITU-T/recommendations/fl.aspx?lang=1</li> <li>ASN.1 Book</li> <li>https://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#workshop_7","title":"Workshop","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#network-measurement-results-data","title":"Network Measurement Results Data","text":"<ul> <li>NMR   </li> <li>https://www.etsi.org/deliver/etsi_ts/101500_101599/101503/08.27.00_60/ts_101503v082700p.pdf</li> <li>GSM API</li> <li>https://www.etsi.org/deliver/etsi_ts/101400_101499/101476/08.04.01_60/ts_101476v080401p.pdf</li> <li>UTRAN</li> <li>https://www.etsi.org/deliver/etsi_ts/125300_125399/125331/13.01.00_60/ts_125331v130100p.pdf</li> <li>E-UTRAN</li> <li>https://www.etsi.org/deliver/etsi_ts/136300_136399/136331/15.03.00_60/ts_136331v150300p.pdf</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#single-linked-list","title":"Single Linked List","text":"<ul> <li>Btech Smart Class</li> <li>Data Structures Tutorials - Single Linked List with an example</li> <li>Visual Algo</li> <li>https://visualgo.net/en/list</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-linked-list","title":"What is Linked List","text":"<p>Like arrays, Linked List is a linear data structure. Unlike arrays, linked list elements are not stored at a contiguous location; the elements are linked using pointers. They include a series of connected nodes. Here, each node stores the data and the address of the next node.</p> <p></p> <p>Simply a list is a sequence of data, and the linked list is a sequence of data linked with each other.  </p> <p>The formal definition of a single linked list is as follows...</p> <p>Single linked list is a sequence of elements in which every element has link to its next element in the sequence.</p> <p>In any single linked list, the individual element is called as \"Node\". Every \"Node\" contains two fields, data field, and the next field. The data field is used to store actual value of the node and next field is used to store the address of next node in the sequence. The graphical representation of a node in a single linked list is as follows...</p> <p></p> <p>Importent Points to be Remembered \u00a0\u00a0In a single linked list, the address of the first node is always stored in a reference node known as \"front\" (Some times it is also known as \"head\"). \u00a0\u00a0Always next part (reference part) of the last node must be NULL.</p> <p></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#why-linked-list","title":"Why Linked List?","text":"<ul> <li>Arrays can be used to store linear data of similar types, but arrays have the following limitations:</li> <li>The size of the arrays is fixed: <ul> <li>So we must know the upper limit on the number of elements in advance. Also, generally, the allocated memory is equal to the upper limit irrespective of the usage.\u00a0</li> </ul> </li> <li>Insertion of a new element / Deletion of a existing element in an array of elements is expensive: <ul> <li>The room has to be created for the new elements and to create room existing elements have to be shifted but in Linked list if we have the head node then we can traverse to any node through it and insert new node at the required position.</li> </ul> </li> </ul> <p>Example:  - In a system, if we maintain a sorted list of IDs in an array <code>id[] = [1000, 1010, 1050, 2000, 2040]</code>.\u00a0 - If we want to insert a new ID <code>1005</code>, then to maintain the sorted order, we have to move all the elements after <code>1000</code> (excluding <code>1000</code>).\u00a0 - Deletion is also expensive with arrays until unless some special techniques are used. For example, to delete <code>1010</code> in <code>id[]</code>, everything after <code>1010</code> has to be moved due to this so much work is being done which affects the efficiency of the code.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#advantages-of-linked-lists-over-arrays","title":"Advantages of Linked Lists over arrays:","text":"<ul> <li>Dynamic Array.</li> <li>Ease of Insertion/Deletion.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#drawbacks-of-linked-lists","title":"Drawbacks of Linked Lists:","text":"<ul> <li>Random access is not allowed. We have to access elements sequentially starting from the first node(head node). So we cannot do a\u00a0binary search with linked lists\u00a0efficiently with its default implementation.\u00a0</li> <li>Extra memory space for a pointer is required with each element of the list.\u00a0</li> <li>Not cache friendly. Since array elements are contiguous locations, there is locality of reference which is not there in case of linked lists.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#types-of-linked-lists","title":"Types of Linked Lists:","text":"<ul> <li>Simple Linked List<ul> <li>In this type of linked list, one can move or traverse the linked list in only one direction</li> </ul> </li> <li>Doubly Linked List<ul> <li>In this type of linked list, one can move or traverse the linked list in both directions (Forward and Backward)</li> </ul> </li> <li>Circular Linked List<ul> <li>In this type of linked list, the last node of the linked list contains the link of the first/head node of the linked list in its next pointer and the first/head node contains the link of the last node of the linked list in its prev pointer</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#basic-operations-on-linked-lists","title":"Basic operations on Linked Lists","text":"<ul> <li>Deletion</li> <li>Insertion</li> <li>Search</li> <li>Display</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#setup-linked-list","title":"Setup Linked List","text":"<p>Before we implement actual operations, first we need to set up an empty list. First, perform the following steps before implementing actual operations.</p> <ul> <li>Step 1 -\u00a0Include all the\u00a0header files\u00a0which are used in the program.</li> <li>Step 2 -\u00a0Declare all the\u00a0user defined functions.</li> <li>Step 3 -\u00a0Define a\u00a0Node\u00a0structure with two members\u00a0data\u00a0and\u00a0next</li> <li>Step 4 -\u00a0Define a Node pointer\u00a0'head'\u00a0and set it to\u00a0NULL.</li> <li>Step 5 -\u00a0Implement the main method by displaying operations menu and make suitable function calls in the main method to perform user selected operation.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-linked-lists","title":"Representation of Linked Lists","text":"<p>A linked list is represented by a pointer to the first node of the linked list. The first node is called the head of the linked list. If the linked list is empty, then the value of the head points to NULL.\u00a0</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-linked-lists_1","title":"Representation of Linked Lists","text":"<p>Each node in a list consists of at least two parts:\u00a0 - A Data\u00a0Item (we can store integer, strings, or any type of data). - Pointer (Or Reference) to the next node\u00a0(connects one node to another) or An address of another node</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-linked-lists_2","title":"Representation of Linked Lists","text":"<ul> <li>In C, we can represent a node using structures. Below is an example of a linked list node with integer data.\u00a0  </li> <li>In Java or C#, LinkedList can be represented as a class and a Node as a separate class. The LinkedList class contains a reference of Node class type.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-linked-lists-c-c-language","title":"Representation of Linked Lists - C / C++ Language","text":"<pre><code>// A linked list node\nstruct Node {\n    int data;\n    struct Node* next;\n};\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-linked-lists-c-language-object-based","title":"Representation of Linked Lists -C++ Language (Object based)","text":"<pre><code>class Node {\npublic:\n    int data;\n    Node* next;\n};\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-linked-lists-java-language","title":"Representation of Linked Lists -Java Language","text":"<pre><code>class LinkedList {\n    Node head; // head of the list\n\n    /* Linked list Node*/\n    class Node {\n        int data;\n        Node next;\n\n        // Constructor to create a new node\n        // Next is by default initialized\n        // as null\n        Node(int d)\n        {\n            data = d;\n            next = null;\n        }\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-linked-lists-c-language","title":"Representation of Linked Lists -C# Language","text":"<pre><code>class LinkedList {\n    // The first node(head) of the linked list\n    // Will be an object of type Node (null by default)\n    Node head;\n\n    class Node {\n        int data;\n        Node next;\n\n        // Constructor to create a new node\n        Node(int d) { data = d; }\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#inserting-at-beginning-of-the-list","title":"Inserting At Beginning of the list","text":"<p>We can use the following steps to insert a new node at beginning of the single linked list...</p> <ul> <li>Step 1 -\u00a0Create a\u00a0<code>newNode</code>\u00a0with given value.</li> <li>Step 2 -\u00a0Check whether list is\u00a0Empty <code>(head\u00a0==\u00a0NULL)</code></li> <li>Step 3 -\u00a0If it is\u00a0Empty\u00a0then, set\u00a0<code>newNode-&gt;next\u00a0=\u00a0NULL</code>\u00a0and\u00a0<code>head\u00a0=\u00a0newNode</code>.</li> <li>Step 4 -\u00a0If it is\u00a0Not Empty\u00a0then, set\u00a0<code>newNode-&gt;next\u00a0=\u00a0head</code>\u00a0and\u00a0<code>head\u00a0=\u00a0newNode</code></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#inserting-at-end-of-the-list","title":"Inserting At End of the list","text":"<p>We can use the following steps to insert a new node at end of the single linked list...</p> <ul> <li>Step 1 -\u00a0Create a\u00a0newNode\u00a0with given value and\u00a0newNode \u2192 next\u00a0as\u00a0NULL.</li> <li>Step 2 -\u00a0Check whether list is\u00a0Empty\u00a0(head\u00a0==\u00a0NULL).</li> <li>Step 3 -\u00a0If it is\u00a0Empty\u00a0then, set\u00a0head\u00a0=\u00a0newNode.</li> <li>Step 4 -\u00a0If it is\u00a0Not Empty\u00a0then, define a node pointer\u00a0temp\u00a0and initialize with\u00a0head.</li> <li>Step 5 -\u00a0Keep moving the\u00a0temp\u00a0to its next node until it reaches to the last node in the list (until\u00a0temp \u2192 next\u00a0is equal to\u00a0NULL).</li> <li>Step 6 -\u00a0Set\u00a0temp \u2192 next\u00a0=\u00a0newNode.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#inserting-at-specific-location-in-the-list-after-a-node","title":"Inserting At Specific location in the list (After a Node)","text":"<p>We can use the following steps to insert a new node after a node in the single linked list...</p> <ul> <li>Step 1 -\u00a0Create a\u00a0newNode\u00a0with given value.</li> <li>Step 2 -\u00a0Check whether list is\u00a0Empty\u00a0(head\u00a0==\u00a0NULL)</li> <li>Step 3 -\u00a0If it is\u00a0Empty\u00a0then, set\u00a0newNode \u2192 next\u00a0=\u00a0NULL\u00a0and\u00a0head\u00a0=\u00a0newNode.</li> <li>Step 4 -\u00a0If it is\u00a0Not Empty\u00a0then, define a node pointer\u00a0temp\u00a0and initialize with\u00a0head.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#inserting-at-specific-location-in-the-list-after-a-node_1","title":"Inserting At Specific location in the list (After a Node)","text":"<ul> <li>Step 5 -\u00a0Keep moving the\u00a0temp\u00a0to its next node until it reaches to the node after which we want to insert the newNode (until\u00a0temp1 \u2192 data\u00a0is equal to\u00a0location, here location is the node value after which we want to insert the newNode).</li> <li>Step 6 -\u00a0Every time check whether\u00a0temp\u00a0is reached to last node or not. If it is reached to last node then display\u00a0'Given node is not found in the list!!! Insertion not possible!!!'\u00a0and terminate the function. Otherwise move the\u00a0temp\u00a0to next node.</li> <li>Step 7 -\u00a0Finally, Set 'newNode \u2192 next\u00a0=\u00a0temp \u2192 next' and 'temp \u2192 next\u00a0=\u00a0newNode'</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c-language","title":"Construction of a simple linked list with 3 nodes - In C Language","text":"<pre><code>// C program to implement a\n// linked list\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c-language_1","title":"Construction of a simple linked list with 3 nodes - In C Language","text":"<pre><code>...\n\n// Driver's code\nint main()\n{\n    struct Node* head = NULL;\n    struct Node* second = NULL;\n    struct Node* third = NULL;\n\n    // allocate 3 nodes in the heap\n    head = (struct Node*)malloc(sizeof(struct Node));\n    second = (struct Node*)malloc(sizeof(struct Node));\n    third = (struct Node*)malloc(sizeof(struct Node));\n\n    /* Three blocks have been allocated dynamically.\n    We have pointers to these three blocks as head,\n    second and third\n    head         second      third\n        |            |           |\n        |            |           |\n    +---+-----+  +----+----+     +----+----+\n    | # | # |    | # | # |   | # | # |\n    +---+-----+  +----+----+     +----+----+\n\n# represents any random value.\nData is random because we haven\u2019t assigned\nanything yet */\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c-language_2","title":"Construction of a simple linked list with 3 nodes - In C Language","text":"<pre><code>    head-&gt;data = 1; // assign data in first node\n    head-&gt;next = second; // Link first node with\n    // the second node\n\n    /* data has been assigned to the data part of the first\n    block (block pointed by the head). And next\n    pointer of first block points to second.\n    So they both are linked.\n\n    head         second      third\n        |            |           |\n        |            |           |\n    +---+---+    +----+----+     +-----+----+\n    | 1 | o-----&gt;| # | # |   | # | # |\n    +---+---+    +----+----+     +-----+----+\n*/\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c-language_3","title":"Construction of a simple linked list with 3 nodes - In C Language","text":"<pre><code>    // assign data to second node\n    second-&gt;data = 2;\n\n    // Link second node with the third node\n    second-&gt;next = third;\n\n    /* data has been assigned to the data part of the second\n    block (block pointed by second). And next\n    pointer of the second block points to the third\n    block. So all three blocks are linked.\n\n    head         second      third\n        |            |           |\n        |            |           |\n    +---+---+    +---+---+   +----+----+\n    | 1 | o-----&gt;| 2 | o-----&gt; | # | # |\n    +---+---+    +---+---+   +----+----+     */\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c-language_4","title":"Construction of a simple linked list with 3 nodes - In C Language","text":"<pre><code>    third-&gt;data = 3; // assign data to third node\n    third-&gt;next = NULL;\n\n    /* data has been assigned to data part of third\n    block (block pointed by third). And next pointer\n    of the third block is made NULL to indicate\n    that the linked list is terminated here.\n\n    We have the linked list ready.\n\n        head\n            |\n            |\n        +---+---+    +---+---+   +----+------+\n        | 1 | o-----&gt;| 2 | o-----&gt; | 3 | NULL |\n        +---+---+    +---+---+   +----+------+\n\n    Note that only head is sufficient to represent\n    the whole list. We can traverse the complete\n    list by following next pointers. */\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c","title":"Construction of a simple linked list with 3 nodes - In C++","text":"<pre><code>// C++ program to implement a\n// linked list\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_1","title":"Construction of a simple linked list with 3 nodes - In C++","text":"<pre><code>// Driver's code\nint main()\n{\n    Node* head = NULL;\n    Node* second = NULL;\n    Node* third = NULL;\n\n    // allocate 3 nodes in the heap\n    head = new Node();\n    second = new Node();\n    third = new Node();\n\n    /* Three blocks have been allocated dynamically.\n    We have pointers to these three blocks as head,\n    second and third\n    head         second      third\n        |            |           |\n        |            |           |\n    +---+-----+  +----+----+     +----+----+\n    | # | # |    | # | # |   | # | # |\n    +---+-----+  +----+----+     +----+----+\n\n# represents any random value.\nData is random because we haven\u2019t assigned\nanything yet */\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_2","title":"Construction of a simple linked list with 3 nodes - In C++","text":"<pre><code>    head-&gt;data = 1; // assign data in first node\n    head-&gt;next = second; // Link first node with\n    // the second node\n\n    /* data has been assigned to the data part of first\n    block (block pointed by the head). And next\n    pointer of the first block points to second.\n    So they both are linked.\n\n    head         second      third\n        |            |           |\n        |            |           |\n    +---+---+    +----+----+     +-----+----+\n    | 1 | o-----&gt;| # | # |   | # | # |\n    +---+---+    +----+----+     +-----+----+\n*/\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_3","title":"Construction of a simple linked list with 3 nodes - In C++","text":"<pre><code>    // assign data to second node\n    second-&gt;data = 2;\n\n    // Link second node with the third node\n    second-&gt;next = third;\n\n    /* data has been assigned to the data part of the second\n    block (block pointed by second). And next\n    pointer of the second block points to the third\n    block. So all three blocks are linked.\n\n    head         second      third\n        |            |           |\n        |            |           |\n    +---+---+    +---+---+   +----+----+\n    | 1 | o-----&gt;| 2 | o-----&gt; | # | # |\n    +---+---+    +---+---+   +----+----+     */\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_4","title":"Construction of a simple linked list with 3 nodes - In C++","text":"<pre><code>    third-&gt;data = 3; // assign data to third node\n    third-&gt;next = NULL;\n\n    /* data has been assigned to the data part of the third\n    block (block pointed by third). And next pointer\n    of the third block is made NULL to indicate\n    that the linked list is terminated here.\n\n    We have the linked list ready.\n\n        head\n            |\n            |\n        +---+---+    +---+---+   +----+------+\n        | 1 | o-----&gt;| 2 | o-----&gt; | 3 | NULL |\n        +---+---+    +---+---+   +----+------+\n\n\n    Note that only the head is sufficient to represent\n    the whole list. We can traverse the complete\n    list by following the next pointers. */\n\n    return 0;\n}\n\n// This code is contributed by rathbhupendra\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-java","title":"Construction of a simple linked list with 3 nodes in Java","text":"<pre><code>// A simple Java program to introduce a linked list\nclass LinkedList {\n    Node head; // head of list\n\n    /* Linked list Node. This inner class is made static so\n    that main() can access it */\n    static class Node {\n        int data;\n        Node next;\n        Node(int d)\n        {\n            data = d;\n            next = null;\n        } // Constructor\n    }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-java_1","title":"Construction of a simple linked list with 3 nodes in Java","text":"<pre><code>    /* method to create a simple linked list with 3 nodes*/\n    public static void main(String[] args)\n    {\n        /* Start with the empty list. */\n        LinkedList llist = new LinkedList();\n\n        llist.head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n\n        /* Three nodes have been allocated dynamically.\n        We have references to these three blocks as head,\n        second and third\n\n        llist.head   second          third\n            |            |               |\n            |            |               |\n        +----+------+    +----+------+   +----+------+\n        | 1 | null |     | 2 | null |    | 3 | null |\n        +----+------+    +----+------+   +----+------+\n    */\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-java_2","title":"Construction of a simple linked list with 3 nodes in Java","text":"<pre><code>        llist.head.next = second; // Link first node with\n                                // the second node\n\n        /* Now next of the first Node refers to the second.\n        So they both are linked.\n\n        llist.head   second          third\n            |            |               |\n            |            |               |\n        +----+------+    +----+------+   +----+------+\n        | 1 | o--------&gt;| 2 | null |     | 3 | null |\n        +----+------+    +----+------+   +----+------+ */\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-java_3","title":"Construction of a simple linked list with 3 nodes in Java","text":"<pre><code>        second.next\n            = third; // Link second node with the third node\n\n        /* Now next of the second Node refers to third. So\n        all three nodes are linked.\n\n        llist.head   second          third\n            |            |               |\n            |            |               |\n        +----+------+    +----+------+   +----+------+\n        | 1 | o--------&gt;| 2 | o--------&gt;| 3 | null |\n        +----+------+    +----+------+   +----+------+ */\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_5","title":"Construction of a simple linked list with 3 nodes in C","text":"<pre><code>// A simple C# program to introduce a linked list\nusing System;\n\npublic class LinkedList {\n    Node head; // head of list\n\n    /* Linked list Node. This inner class is made static so\n    that main() can access it */\n    public class Node {\n        public int data;\n        public Node next;\n        public Node(int d)\n        {\n            data = d;\n            next = null;\n        } // Constructor\n    }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_6","title":"Construction of a simple linked list with 3 nodes in C","text":"<pre><code>    /* method to create a simple linked list with 3 nodes*/\n    public static void Main(String[] args)\n    {\n        /* Start with the empty list. */\n        LinkedList llist = new LinkedList();\n\n        llist.head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n\n        /* Three nodes have been allocated dynamically.\n        We have references to these three blocks as head,\n        second and third\n\n        llist.head   second          third\n            |            |               |\n            |            |               |\n        +----+------+    +----+------+   +----+------+\n        | 1 | null |     | 2 | null |    | 3 | null |\n        +----+------+    +----+------+   +----+------+ */\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_7","title":"Construction of a simple linked list with 3 nodes in C","text":"<pre><code>        llist.head.next = second; // Link first node with\n                                // the second node\n\n        /* Now next of first Node refers to second. So they\n            both are linked.\n\n        llist.head   second          third\n            |            |               |\n            |            |               |\n        +----+------+    +----+------+   +----+------+\n        | 1 | o--------&gt;| 2 | null |     | 3 | null |\n        +----+------+    +----+------+   +----+------+ */\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#construction-of-a-simple-linked-list-with-3-nodes-in-c_8","title":"Construction of a simple linked list with 3 nodes in C","text":"<pre><code>        second.next\n            = third; // Link second node with the third node\n\n        /* Now next of the second Node refers to third. So\n        all three nodes are linked.\n\n        llist.head   second          third\n            |            |               |\n            |            |               |\n        +----+------+    +----+------+   +----+------+\n        | 1 | o--------&gt;| 2 | o--------&gt;| 3 | null |\n        +----+------+    +----+------+   +----+------+ */\n    }\n}\n\n// This code has been contributed by 29AjayKumar\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#linked-list-deletion","title":"Linked List Deletion","text":"<p>In a single linked list, the deletion operation can be performed in three ways. They are as follows...</p> <ol> <li>Deleting from Beginning of the list</li> <li>Deleting from End of the list</li> <li>Deleting a Specific Node</li> </ol>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-from-beginning-of-the-list","title":"Deleting from Beginning of the list","text":"<p>We can use the following steps to delete a node from beginning of the single linked list...</p> <ul> <li>Step 1 -\u00a0Check whether list is\u00a0Empty\u00a0(head\u00a0==\u00a0NULL)</li> <li>Step 2 -\u00a0If it is\u00a0Empty\u00a0then, display\u00a0'List is Empty!!! Deletion is not possible'\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty\u00a0then, define a Node pointer\u00a0'temp'\u00a0and initialize with\u00a0head.</li> <li>Step 4 -\u00a0Check whether list is having only one node (temp \u2192 next\u00a0==\u00a0NULL)</li> <li>Step 5 -\u00a0If it is\u00a0TRUE\u00a0then set\u00a0head\u00a0=\u00a0NULL\u00a0and delete\u00a0temp\u00a0(Setting\u00a0Empty\u00a0list conditions)</li> <li>Step 6 -\u00a0If it is\u00a0FALSE\u00a0then set\u00a0head\u00a0=\u00a0temp \u2192 next, and delete\u00a0temp.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-from-end-of-the-list","title":"Deleting from End of the list","text":"<p>We can use the following steps to delete a node from end of the single linked list...</p> <ul> <li>Step 1 -\u00a0Check whether list is\u00a0Empty\u00a0(head\u00a0==\u00a0NULL)</li> <li>Step 2 -\u00a0If it is\u00a0Empty\u00a0then, display\u00a0'List is Empty!!! Deletion is not possible'\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty\u00a0then, define two Node pointers\u00a0'temp1'\u00a0and 'temp2'\u00a0and initialize 'temp1' with\u00a0head.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-from-end-of-the-list_1","title":"Deleting from End of the list","text":"<ul> <li>Step 4 -\u00a0Check whether list has only one Node (temp1 \u2192 next\u00a0==\u00a0NULL)</li> <li>Step 5 -\u00a0If it is\u00a0TRUE. Then, set\u00a0head\u00a0=\u00a0NULL\u00a0and delete\u00a0temp1. And terminate the function. (Setting\u00a0Empty\u00a0list condition)</li> <li>Step 6 -\u00a0If it is\u00a0FALSE. Then, set 'temp2 = temp1\u00a0' and move\u00a0temp1\u00a0to its next node. Repeat the same until it reaches to the last node in the list. (until\u00a0temp1 \u2192 next\u00a0==\u00a0NULL)</li> <li>Step 7 -\u00a0Finally, Set\u00a0temp2 \u2192 next\u00a0=\u00a0NULL\u00a0and delete\u00a0temp1.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-a-specific-node-from-the-list","title":"Deleting a Specific Node from the list","text":"<p>We can use the following steps to delete a specific node from the single linked list...</p> <ul> <li>Step 1 -\u00a0Check whether list is\u00a0Empty\u00a0(head\u00a0==\u00a0NULL)</li> <li>Step 2 -\u00a0If it is\u00a0Empty\u00a0then, display\u00a0'List is Empty!!! Deletion is not possible'\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty\u00a0then, define two Node pointers\u00a0'temp1'\u00a0and 'temp2' and initialize 'temp1' with\u00a0head.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-a-specific-node-from-the-list_1","title":"Deleting a Specific Node from the list","text":"<ul> <li>Step 4 -\u00a0Keep moving the\u00a0temp1\u00a0until it reaches to the exact node to be deleted or to the last node. And every time set 'temp2 = temp1' before moving the 'temp1' to its next node.</li> <li>Step 5 -\u00a0If it is reached to the last node then display\u00a0'Given node not found in the list! Deletion not possible!!!'. And terminate the function.</li> <li>Step 6 -\u00a0If it is reached to the exact node which we want to delete, then check whether list is having only one node or not</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-a-specific-node-from-the-list_2","title":"Deleting a Specific Node from the list","text":"<ul> <li>Step 7 -\u00a0If list has only one node and that is the node to be deleted, then set\u00a0head\u00a0=\u00a0NULL\u00a0and delete\u00a0temp1\u00a0(free(temp1)).</li> <li>Step 8 -\u00a0If list contains multiple nodes, then check whether\u00a0temp1\u00a0is the first node in the list (temp1 == head).</li> <li>Step 9 -\u00a0If\u00a0temp1\u00a0is the first node then move the\u00a0head\u00a0to the next node (head = head \u2192 next) and delete\u00a0temp1.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-a-specific-node-from-the-list_3","title":"Deleting a Specific Node from the list","text":"<ul> <li>Step 10 -\u00a0If\u00a0temp1\u00a0is not first node then check whether it is last node in the list (temp1 \u2192 next == NULL).</li> <li>Step 11 -\u00a0If\u00a0temp1\u00a0is last node then set\u00a0temp2 \u2192 next\u00a0=\u00a0NULL\u00a0and delete\u00a0temp1\u00a0(free(temp1)).</li> <li>Step 12 -\u00a0If\u00a0temp1\u00a0is not first node and not last node then set\u00a0temp2 \u2192 next\u00a0=\u00a0temp1 \u2192 next\u00a0and delete\u00a0temp1\u00a0(free(temp1)).</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#displaying-a-single-linked-list","title":"Displaying a Single Linked List","text":"<p>We can use the following steps to display the elements of a single linked list...</p> <ul> <li>Step 1 -\u00a0Check whether list is\u00a0Empty\u00a0(head\u00a0==\u00a0NULL)</li> <li>Step 2 -\u00a0If it is\u00a0Empty\u00a0then, display\u00a0'List is Empty!!!'\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty\u00a0then, define a Node pointer\u00a0'temp'\u00a0and initialize with\u00a0head.</li> <li>Step 4 -\u00a0Keep displaying\u00a0temp \u2192 data\u00a0with an arrow (---&gt;) until\u00a0temp\u00a0reaches to the last node</li> <li>Step 5 -\u00a0Finally display\u00a0temp \u2192 data\u00a0with arrow pointing to\u00a0NULL\u00a0(temp \u2192 data ---&gt; NULL).</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list","title":"Traversal of a Linked List","text":"<p>In the previous program, we created a simple linked list with three nodes. Let us traverse the created list and print the data of each node. For traversal, let us write a general-purpose function <code>printList()</code> that prints any given list.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c","title":"Traversal of a Linked List - C","text":"<pre><code>// A simple C program for\n// traversal of a linked list\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_1","title":"Traversal of a Linked List - C","text":"<pre><code>// This function prints contents of linked list starting\n// from the given node\nvoid printList(struct Node* n)\n{\n    while (n != NULL) {\n        printf(\" %d \", n-&gt;data);\n        n = n-&gt;next;\n    }\n}\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_2","title":"Traversal of a Linked List - C","text":"<pre><code>// Driver's code\nint main()\n{\n    struct Node* head = NULL;\n    struct Node* second = NULL;\n    struct Node* third = NULL;\n\n    // allocate 3 nodes in the heap\n    head = (struct Node*)malloc(sizeof(struct Node));\n    second = (struct Node*)malloc(sizeof(struct Node));\n    third = (struct Node*)malloc(sizeof(struct Node));\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_3","title":"Traversal of a Linked List - C","text":"<pre><code>    head-&gt;data = 1; // assign data in first node\n    head-&gt;next = second; // Link first node with second\n\n    second-&gt;data = 2; // assign data to second node\n    second-&gt;next = third;\n\n    third-&gt;data = 3; // assign data to third node\n    third-&gt;next = NULL;\n\n    // Function call\n    printList(head);\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_4","title":"Traversal of a Linked List - C++","text":"<pre><code>// A simple C++ program for\n// traversal of a linked list\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n};\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_5","title":"Traversal of a Linked List - C++","text":"<pre><code>// This function prints contents of linked list\n// starting from the given node\nvoid printList(Node* n)\n{\n    while (n != NULL) {\n        cout &lt;&lt; n-&gt;data &lt;&lt; \" \";\n        n = n-&gt;next;\n    }\n}\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_6","title":"Traversal of a Linked List - C++","text":"<pre><code>// Driver's code\nint main()\n{\n    Node* head = NULL;\n    Node* second = NULL;\n    Node* third = NULL;\n\n    // allocate 3 nodes in the heap\n    head = new Node();\n    second = new Node();\n    third = new Node();\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_7","title":"Traversal of a Linked List - C++","text":"<pre><code>    head-&gt;data = 1; // assign data in first node\n    head-&gt;next = second; // Link first node with second\n\n    second-&gt;data = 2; // assign data to second node\n    second-&gt;next = third;\n\n    third-&gt;data = 3; // assign data to third node\n    third-&gt;next = NULL;\n\n    // Function call\n    printList(head);\n\n    return 0;\n}\n\n// This is code is contributed by rathbhupendra\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-java","title":"Traversal of a Linked List - Java","text":"<pre><code>// A simple Java program for traversal of a linked list\n\nclass LinkedList {\n\n    Node head; // head of list\n\n    /* Linked list Node. This inner class is made static so\n    that main() can access it */\n    static class Node {\n\n        int data;\n        Node next;\n        Node(int d)\n        {\n            this.data = d;\n            next = null;\n        } // Constructor\n    }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-java_1","title":"Traversal of a Linked List - Java","text":"<pre><code>    /* This function prints contents of linked list starting\n    * from head */\n    public void printList()\n    {\n        Node n = head;\n        while (n != null) {\n            System.out.print(n.data + \" \");\n            n = n.next;\n        }\n    }\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-java_2","title":"Traversal of a Linked List - Java","text":"<pre><code>    // Driver's code\n    public static void main(String[] args)\n    {\n        /* Start with the empty list. */\n        LinkedList llist = new LinkedList();\n\n        llist.head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-java_3","title":"Traversal of a Linked List - Java","text":"<pre><code>        llist.head.next = second; // Link first node with\n                                // the second node\n        second.next\n            = third; // Link second node with the third node\n\n        // Function call\n        llist.printList();\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_8","title":"Traversal of a Linked List - C","text":"<pre><code>// C# program for traversal of a linked list\n\nusing System;\n\npublic class LinkedList {\n    Node head; // head of list\n\n    /* Linked list Node. This inner\n    class is made static so that\n    main() can access it */\n    public class Node {\n        public int data;\n        public Node next;\n        public Node(int d)\n        {\n            data = d;\n            next = null;\n\n        } // Constructor\n    }\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_9","title":"Traversal of a Linked List - C","text":"<pre><code>    /* This function prints contents of\n    linked list starting from head */\n    public void printList()\n    {\n        Node n = head;\n        while (n != null) {\n            Console.Write(n.data + \" \");\n            n = n.next;\n        }\n    }\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#traversal-of-a-linked-list-c_10","title":"Traversal of a Linked List - C","text":"<pre><code>    // Driver's code\n    public static void Main(String[] args)\n    {\n        /* Start with the empty list. */\n        LinkedList llist = new LinkedList();\n\n        llist.head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n\n        llist.head.next = second; // Link first node with\n                                // the second node\n        second.next\n            = third; // Link second node with the third node\n\n        // Function call\n        llist.printList();\n    }\n}\n\n/* This code contributed by PrinciRaj1992 */\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#output","title":"Output","text":"<pre><code> 1  2  3 \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#time-complexity","title":"Time Complexity","text":"Time Complexity Worst Case Average Case Search O(n) O(n) Insert at Start O(1) O(1) Deletion from Start O(1) O(1) <p>Auxiliary Space: O(N)</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list","title":"Complete C Example of Single Linked List","text":"<pre><code>// SingleLinkedList.c : This file contains the 'main' function. Program execution begins and ends there.\n//\n\n#define _CRT_SECURE_NO_WARNINGS\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\n#define clrscr(); system(\"cls\");\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_1","title":"Complete C Example of Single Linked List","text":"<pre><code>void insertAtBeginning(int);\nvoid insertAtEnd(int);\nvoid insertBetween(int, int, int);\nvoid display();\nvoid removeBeginning();\nvoid removeEnd();\nvoid removeSpecific(int);\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_2","title":"Complete C Example of Single Linked List","text":"<pre><code>struct Node\n{\n    int data;\n    struct Node* next;\n}*head = NULL;\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_3","title":"Complete C Example of Single Linked List","text":"<pre><code>void main()\n{\n    int choice, value, choice1, loc1, loc2;\n    clrscr();\n\n    while (1) {\n\n        printf(\"\\n\\n****** MENU ******\\n\\n\");\n        printf(\"1. Insert\\n\");\n        printf(\"2. Display\\n\"); \n        printf(\"3. Delete\\n\"); \n        printf(\"4. Exit\\n\"); \n        printf(\"Enter your choice : \");\n\n        scanf(\"%d\", &amp;choice);\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_4","title":"Complete C Example of Single Linked List","text":"<pre><code>        switch (choice)\n        {\n        case 1: printf(\"Enter the value to be insert: \");\n            scanf(\"%d\", &amp;value);\n            while (1) {\n                printf(\"Where you want to insert: \\n\"); \n                printf(\"1. At Beginning\\n\");\n                printf(\"2. At End\\n\"); \n                printf(\"3. Between\\n\");\n                printf(\"Enter your choice: \");\n\n                scanf(\"%d\", &amp;choice1);\n\n                switch (choice1)\n                {\n                case 1:     \n                    insertAtBeginning(value);\n                    break;\n                case 2:     \n                    insertAtEnd(value);\n                    break;\n                case 3:      \n                    printf(\"Enter the two values where you want to insert: \");\n                    scanf(\"%d%d\", &amp;loc1, &amp;loc2);\n                    insertBetween(value, loc1, loc2);\n                    break;\n                default:    \n                    printf(\"\\nWrong Input!! Try again!!!\\n\\n\");\n                    continue;\n                }\n\n                break;\n            }\n            break;\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_5","title":"Complete C Example of Single Linked List","text":"<pre><code>        case 2:     \n            display();\n            break;\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_6","title":"Complete C Example of Single Linked List","text":"<pre><code>        case 3:     \n\n            printf(\"How do you want to Delete: \\n\");\n            printf(\"1. From Beginning\\n\");\n            printf(\"2. From End\\n\");\n            printf(\"3. Spesific\\n\");\n            printf(\"Enter your choice: \");\n\n            scanf(\"%d\", &amp;choice1);\n\n            switch (choice1){\n            case 1:     \n                removeBeginning();\n                break;\n            case 2:     \n                removeEnd();\n                break;\n            case 3:      \n                printf(\"Enter the value which you wanto delete: \");\n\n                scanf(\"%d\", &amp;loc2);\n\n                removeSpecific(loc2);\n                break;\n            default:    \n                printf(\"\\nWrong Input!! Try again!!!\\n\\n\");\n                break;\n            }\n            break;\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_7","title":"Complete C Example of Single Linked List","text":"<pre><code>        case 4:     \n            exit(0);\n        default: \n            printf(\"\\nWrong input!!! Try again!!\\n\\n\");\n        }\n    }\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_8","title":"Complete C Example of Single Linked List","text":"<pre><code>void insertAtBeginning(int value)\n{\n    struct Node* newNode;\n    newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode-&gt;data = value;\n    if (head == NULL)\n    {\n        newNode-&gt;next = NULL;\n        head = newNode;\n    }\n    else\n    {\n        newNode-&gt;next = head;\n        head = newNode;\n    }\n    printf(\"\\nOne node inserted!!!\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_9","title":"Complete C Example of Single Linked List","text":"<pre><code>void insertAtEnd(int value)\n{\n    struct Node* newNode;\n    newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode-&gt;data = value;\n    newNode-&gt;next = NULL;\n    if (head == NULL)\n        head = newNode;\n    else\n    {\n        struct Node* temp = head;\n        while (temp-&gt;next != NULL)\n            temp = temp-&gt;next;\n        temp-&gt;next = newNode;\n    }\n    printf(\"\\nOne node inserted!!!\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_10","title":"Complete C Example of Single Linked List","text":"<pre><code>void insertBetween(int value, int loc1, int loc2)\n{\n    struct Node* newNode;\n\n    newNode = (struct Node*)malloc(sizeof(struct Node));\n\n    newNode-&gt;data = value;\n    if (head == NULL){\n        newNode-&gt;next = NULL;\n        head = newNode;\n    }else{\n        struct Node* temp = head;\n        while (temp-&gt;data != loc1 &amp;&amp; temp-&gt;data != loc2)\n            temp = temp-&gt;next;\n        newNode-&gt;next = temp-&gt;next;\n        temp-&gt;next = newNode;\n    }\n    printf(\"\\nOne node inserted!!!\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_11","title":"Complete C Example of Single Linked List","text":"<pre><code>void removeBeginning()\n{\n    if (head == NULL)\n        printf(\"\\n\\nList is Empty!!!\");\n    else\n    {\n        struct Node* temp = head;\n        if (head-&gt;next == NULL)\n        {\n            head = NULL;\n            free(temp);\n        }\n        else\n        {\n            head = temp-&gt;next;\n            free(temp);\n            printf(\"\\nOne node deleted!!!\\n\\n\");\n        }\n    }\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_12","title":"Complete C Example of Single Linked List","text":"<pre><code>void removeEnd()\n{\n    if (head == NULL)\n    {\n        printf(\"\\nList is Empty!!!\\n\");\n    }\n    else\n    {\n        struct Node* temp1 = head, * temp2 = 0;\n        if (head-&gt;next == NULL)\n            head = NULL;\n        else\n        {\n            while (temp1-&gt;next != NULL)\n            {\n                temp2 = temp1;\n                temp1 = temp1-&gt;next;\n            }\n            temp2-&gt;next = NULL;\n        }\n        free(temp1);\n        printf(\"\\nOne node deleted!!!\\n\\n\");\n    }\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_13","title":"Complete C Example of Single Linked List","text":"<pre><code>void removeSpecific(int delValue)\n{\n    struct Node* temp1 = head, * temp2 = 0;\n    while (temp1-&gt;data != delValue)\n    {\n        if (temp1-&gt;next == NULL) {\n            printf(\"\\nGiven node not found in the list!!!\");\n            return;\n        }\n        temp2 = temp1;\n        temp1 = temp1-&gt;next;\n    }\n    temp2-&gt;next = temp1-&gt;next;\n    free(temp1);\n    printf(\"\\nOne node deleted!!!\\n\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#complete-c-example-of-single-linked-list_14","title":"Complete C Example of Single Linked List","text":"<pre><code>void display()\n{\n    if (head == NULL)\n    {\n        printf(\"\\nList is Empty\\n\");\n    }\n    else\n    {\n        struct Node* temp = head;\n        printf(\"\\n\\nList elements are - \\n\");\n        while (temp-&gt;next != NULL)\n        {\n            printf(\"%d ---&gt;\", temp-&gt;data);\n            temp = temp-&gt;next;\n        }\n        printf(\"%d ---&gt;NULL\", temp-&gt;data);\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#references","title":"References","text":"<p>What is Linked List - GeeksforGeeks</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list","title":"Circular Linked List","text":"<ul> <li>Btech Smart Class</li> <li>Data Structures Tutorials - Circular Linked List with an example | Implementation</li> <li>Geeks for Geeks</li> <li>Circular Linked List | Set 1 (Introduction and Applications) - GeeksforGeeks</li> <li>Geeks for Geeks</li> <li>Circular Linked List | Set 2 (Traversal) - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list_1","title":"Circular Linked List","text":"<ul> <li> <p>In this article, you will learn what circular linked list is and its types with implementation.</p> </li> <li> <p>A circular linked list is a type of\u00a0linked list\u00a0in which the first and the last nodes are also connected to each other to form a circle.</p> </li> <li> <p>There are basically two types of circular linked list:</p> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#1-circular-singly-linked-list","title":"1. Circular Singly Linked List","text":"<ul> <li>Here, the address of the last node consists of the address of the first node.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-circular-doubly-linked-list","title":"2. Circular Doubly Linked List","text":"<p>Here, in addition to the last node storing the address of the first node, the first node will also store the address of the last node.</p> <p></p> <p>Note: We will be using the singly circular linked list to represent the working of circular linked list.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-circular-linked-list","title":"Representation of Circular Linked List","text":"<p>Let's see how we can represent a circular linked list on an algorithm/code. Suppose we have a linked list:</p> <p></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-circular-linked-list_1","title":"Representation of Circular Linked List","text":"<p>Here, the single node is represented as</p> <pre><code>struct Node {\n    int data;\n    struct Node * next;\n};\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-circular-linked-list_2","title":"Representation of Circular Linked List","text":"<p>Each struct node has a data item and a pointer to the next struct node.</p> <p>Now we will create a simple circular linked list with three items to understand how this works.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-circular-linked-list_3","title":"Representation of Circular Linked List","text":"<pre><code>/* Initialize nodes */\nstruct node *last;\nstruct node *one = NULL;\nstruct node *two = NULL;\nstruct node *three = NULL;\n\n/* Allocate memory */\none = malloc(sizeof(struct node));\ntwo = malloc(sizeof(struct node));\nthree = malloc(sizeof(struct node));\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-circular-linked-list_4","title":"Representation of Circular Linked List","text":"<pre><code>/* Assign data values */\none-&gt;data = 1;\ntwo-&gt;data = 2;\nthree-&gt;data = 3;\n\n/* Connect nodes */\none-&gt;next = two;\ntwo-&gt;next = three;\nthree-&gt;next = one;\n\n/* Save address of third node in last */\nlast = three;\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-circular-linked-list_5","title":"Representation of Circular Linked List","text":"<p>In the above code, one, two, and three are the nodes with data items 1, 2, and 3 respectively.</p> <ul> <li>For node one<ul> <li>next\u00a0stores the address of\u00a0two\u00a0(there is no node before it)</li> </ul> </li> <li>For node two<ul> <li>next\u00a0stores the address of\u00a0three</li> </ul> </li> <li>For node three<ul> <li>next\u00a0stores\u00a0<code>NULL</code>\u00a0(there is no node after it)</li> <li>next\u00a0points to node\u00a0one</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-on-a-circular-linked-list","title":"Insertion on a Circular Linked List","text":"<ul> <li> <p>We can insert elements at 3 different positions of a circular linked list:</p> </li> <li> <p>Insertion at the beginning</p> </li> <li>Insertion in-between nodes</li> <li>Insertion at the end</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-on-a-circular-linked-list_1","title":"Insertion on a Circular Linked List","text":"<ul> <li>Suppose we have a circular linked list with elements 1, 2, and 3.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-on-a-circular-linked-list_2","title":"Insertion on a Circular Linked List","text":"<p>Let's add a node with value 6 at different positions of the circular linked list we made above. The first step is to create a new node.</p> <ul> <li>allocate memory for\u00a0<code>newNode</code></li> <li>assign the data to\u00a0<code>newNode</code></li> </ul> <p></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#1-insertion-at-the-beginning","title":"1. Insertion at the Beginning","text":"<ul> <li>store the address of the current first node in the\u00a0<code>newNode</code>\u00a0(i.e. pointing the\u00a0<code>newNode</code>\u00a0to the current first node)</li> <li>point the last node to\u00a0<code>newNode</code>\u00a0(i.e making\u00a0<code>newNode</code>\u00a0as head)</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-insertion-in-between-two-nodes","title":"2. Insertion in between two nodes","text":"<ul> <li>Let's insert newNode after the first node.<ul> <li>travel to the node given (let this node be\u00a0<code>p</code>)</li> <li>point the\u00a0<code>next</code>\u00a0of\u00a0<code>newNode</code>\u00a0to the node next to\u00a0<code>p</code></li> <li>store the address of\u00a0<code>newNode</code>\u00a0at\u00a0<code>next</code>\u00a0of\u00a0<code>p</code></li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#3-insertion-at-the-end","title":"3. Insertion at the end","text":"<ul> <li>store the address of the head node to\u00a0<code>next</code>\u00a0of newNode (making\u00a0<code>newNode</code>\u00a0the last node)</li> <li>point the current last node to\u00a0<code>newNode</code></li> <li>make\u00a0<code>newNode</code>\u00a0as the last node</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-on-a-circular-linked-list","title":"Deletion on a Circular Linked List","text":"<p>Suppose we have a double-linked list with elements 1, 2, and 3.</p> <p></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-on-a-circular-linked-list_1","title":"Deletion on a Circular Linked List","text":"<ol> <li>If the node to be deleted is the only node<ul> <li>free the memory occupied by the node</li> <li>store NULL in\u00a0<code>last</code></li> </ul> </li> <li>If last node is to be deleted<ul> <li>find the node before the last node (let it be\u00a0<code>temp</code>)</li> <li>store the address of the node next to the last node in\u00a0<code>temp</code></li> <li>free the memory of last</li> <li>make\u00a0<code>temp</code>\u00a0as the last node</li> </ul> </li> </ol>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-on-a-circular-linked-list_2","title":"Deletion on a Circular Linked List","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-on-a-circular-linked-list_3","title":"Deletion on a Circular Linked List","text":"<ul> <li> <ol> <li>If any other nodes are to be deleted</li> <li>travel to the node to be deleted (here we are deleting node 2)</li> <li>let the node before node 2 be\u00a0<code>temp</code></li> <li>store the address of the node next to 2 in\u00a0<code>temp</code></li> <li>free the memory of 2</li> </ol> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-on-a-circular-linked-list_4","title":"Deletion on a Circular Linked List","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c","title":"Circular Linked List Code in  C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#c-code-to-perform-circular-linked-list-operations-include-stdioh-include-stdlibh-struct-node-int-data-struct-node-next","title":"<pre><code>// C code to perform circular linked list operations\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node {\n  int data;\n  struct Node* next;\n};\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_1","title":"Circular Linked List Code in  C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#struct-node-addtoemptystruct-node-last-int-data-if-last-null-return-last-allocate-memory-to-the-new-node-struct-node-newnode-struct-nodemallocsizeofstruct-node-assign-data-to-the-new-node-newnode-data-data-assign-last-to-newnode-last-newnode-create-link-to-iteself-last-next-last-return-last","title":"<pre><code>struct Node* addToEmpty(struct Node* last, int data) {\n  if (last != NULL) return last;\n\n  // allocate memory to the new node\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n\n  // assign data to the new node\n  newNode-&gt;data = data;\n\n  // assign last to newNode\n  last = newNode;\n\n  // create link to iteself\n  last-&gt;next = last;\n\n  return last;\n}\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_2","title":"Circular Linked List Code in  C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#add-node-to-the-front-struct-node-addfrontstruct-node-last-int-data-check-if-the-list-is-empty-if-last-null-return-addtoemptylast-data-allocate-memory-to-the-new-node-struct-node-newnode-struct-nodemallocsizeofstruct-node-add-data-to-the-node-newnode-data-data-store-the-address-of-the-current-first-node-in-the-newnode-newnode-next-last-next-make-newnode-as-head-last-next-newnode-return-last","title":"<pre><code>// add node to the front\nstruct Node* addFront(struct Node* last, int data) {\n  // check if the list is empty\n  if (last == NULL) return addToEmpty(last, data);\n\n  // allocate memory to the new node\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n\n  // add data to the node\n  newNode-&gt;data = data;\n\n  // store the address of the current first node in the newNode\n  newNode-&gt;next = last-&gt;next;\n\n  // make newNode as head\n  last-&gt;next = newNode;\n\n  return last;\n}\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_3","title":"Circular Linked List Code in  C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#add-node-to-the-end-struct-node-addendstruct-node-last-int-data-check-if-the-node-is-empty-if-last-null-return-addtoemptylast-data-allocate-memory-to-the-new-node-struct-node-newnode-struct-nodemallocsizeofstruct-node-add-data-to-the-node-newnode-data-data-store-the-address-of-the-head-node-to-next-of-newnode-newnode-next-last-next-point-the-current-last-node-to-the-newnode-last-next-newnode-make-newnode-as-the-last-node-last-newnode-return-last","title":"<pre><code>// add node to the end\nstruct Node* addEnd(struct Node* last, int data) {\n  // check if the node is empty\n  if (last == NULL) return addToEmpty(last, data);\n\n  // allocate memory to the new node\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n\n  // add data to the node\n  newNode-&gt;data = data;\n\n  // store the address of the head node to next of newNode\n  newNode-&gt;next = last-&gt;next;\n\n  // point the current last node to the newNode\n  last-&gt;next = newNode;\n\n  // make newNode as the last node\n  last = newNode;\n\n  return last;\n}\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_4","title":"Circular Linked List Code in  C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insert-node-after-a-specific-node-struct-node-addafterstruct-node-last-int-data-int-item-check-if-the-list-is-empty-if-last-null-return-null-struct-node-newnode-p-p-last-next-do-if-the-item-is-found-place-newnode-after-it-if-p-data-item-allocate-memory-to-the-new-node-newnode-struct-nodemallocsizeofstruct-node-add-data-to-the-node-newnode-data-data-make-the-next-of-the-current-node-as-the-next-of-newnode-newnode-next-p-next-put-newnode-to-the-next-of-p-p-next-newnode-if-p-is-the-last-node-make-newnode-as-the-last-node-if-p-last-last-newnode-return-last-p-p-next-while-p-last-next-printfnthe-given-node-is-not-present-in-the-list-return-last","title":"<pre><code>// insert node after a specific node\nstruct Node* addAfter(struct Node* last, int data, int item) {\n  // check if the list is empty\n  if (last == NULL) return NULL;\n\n  struct Node *newNode, *p;\n\n  p = last-&gt;next;\n  do {\n  // if the item is found, place newNode after it\n  if (p-&gt;data == item) {\n    // allocate memory to the new node\n    newNode = (struct Node*)malloc(sizeof(struct Node));\n\n    // add data to the node\n    newNode-&gt;data = data;\n\n    // make the next of the current node as the next of newNode\n    newNode-&gt;next = p-&gt;next;\n\n    // put newNode to the next of p\n    p-&gt;next = newNode;\n\n    // if p is the last node, make newNode as the last node\n    if (p == last) last = newNode;\n    return last;\n  }\n\n  p = p-&gt;next;\n  } while (p != last-&gt;next);\n\n  printf(\"\\nThe given node is not present in the list\");\n  return last;\n}\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_5","title":"Circular Linked List Code in  C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#delete-a-node-void-deletenodestruct-node-last-int-key-if-linked-list-is-empty-if-last-null-return-if-the-list-contains-only-a-single-node-if-last-data-key-last-next-last-freelast-last-null-return-struct-node-temp-last-d-if-last-is-to-be-deleted-if-last-data-key-find-the-node-before-the-last-node-while-temp-next-last-temp-temp-next-point-temp-node-to-the-next-of-last-ie-first-node-temp-next-last-next-freelast-last-temp-next-travel-to-the-node-to-be-deleted-while-temp-next-last-temp-next-data-key-temp-temp-next-if-node-to-be-deleted-was-found-if-temp-next-data-key-d-temp-next-temp-next-d-next-freed","title":"<pre><code>// delete a node\nvoid deleteNode(struct Node** last, int key) {\n  // if linked list is empty\n  if (*last == NULL) return;\n\n  // if the list contains only a single node\n  if ((*last)-&gt;data == key &amp;&amp; (*last)-&gt;next == *last) {\n  free(*last);\n  *last = NULL;\n  return;\n  }\n\n  struct Node *temp = *last, *d;\n\n  // if last is to be deleted\n  if ((*last)-&gt;data == key) {\n  // find the node before the last node\n  while (temp-&gt;next != *last) temp = temp-&gt;next;\n\n  // point temp node to the next of last i.e. first node\n  temp-&gt;next = (*last)-&gt;next;\n  free(*last);\n  *last = temp-&gt;next;\n  }\n\n  // travel to the node to be deleted\n  while (temp-&gt;next != *last &amp;&amp; temp-&gt;next-&gt;data != key) {\n  temp = temp-&gt;next;\n  }\n\n  // if node to be deleted was found\n  if (temp-&gt;next-&gt;data == key) {\n  d = temp-&gt;next;\n  temp-&gt;next = d-&gt;next;\n  free(d);\n  }\n}\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_6","title":"Circular Linked List Code in  C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#void-traversestruct-node-last-struct-node-p-if-last-null-printfthe-list-is-empty-return-p-last-next-do-printfd-p-data-p-p-next-while-p-last-next","title":"<pre><code>void traverse(struct Node* last) {\n  struct Node* p;\n\n  if (last == NULL) {\n  printf(\"The list is empty\");\n  return;\n  }\n\n  p = last-&gt;next;\n\n  do {\n  printf(\"%d \", p-&gt;data);\n  p = p-&gt;next;\n\n  } while (p != last-&gt;next);\n}\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_7","title":"Circular Linked List Code in  C","text":"<pre><code>int main() {\n  struct Node* last = NULL;\n\n  last = addToEmpty(last, 6);\n  last = addEnd(last, 8);\n  last = addFront(last, 2);\n\n  last = addAfter(last, 10, 2);\n\n  traverse(last);\n\n  deleteNode(&amp;last, 8);\n\n  printf(\"\\n\");\n\n  traverse(last);\n\n  return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_8","title":"Circular Linked List Code in C++","text":"<pre><code>// C++ code to perform circular linked list operations\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct Node {\n  int data;\n  struct Node* next;\n};\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_9","title":"Circular Linked List Code in C++","text":"<pre><code>struct Node* addToEmpty(struct Node* last, int data) {\n  if (last != NULL) return last;\n\n  // allocate memory to the new node\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n\n  // assign data to the new node\n  newNode-&gt;data = data;\n\n  // assign last to newNode\n  last = newNode;\n\n  // create link to iteself\n  last-&gt;next = last;\n\n  return last;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_10","title":"Circular Linked List Code in C++","text":"<pre><code>// add node to the front\nstruct Node* addFront(struct Node* last, int data) {\n  // check if the list is empty\n  if (last == NULL) return addToEmpty(last, data);\n\n  // allocate memory to the new node\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n\n  // add data to the node\n  newNode-&gt;data = data;\n\n  // store the address of the current first node in the newNode\n  newNode-&gt;next = last-&gt;next;\n\n  // make newNode as head\n  last-&gt;next = newNode;\n\n  return last;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_11","title":"Circular Linked List Code in C++","text":"<pre><code>// add node to the end\nstruct Node* addEnd(struct Node* last, int data) {\n  // check if the node is empty\n  if (last == NULL) return addToEmpty(last, data);\n\n  // allocate memory to the new node\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n\n  // add data to the node\n  newNode-&gt;data = data;\n\n  // store the address of the head node to next of newNode\n  newNode-&gt;next = last-&gt;next;\n\n  // point the current last node to the newNode\n  last-&gt;next = newNode;\n\n  // make newNode as the last node\n  last = newNode;\n\n  return last;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_12","title":"Circular Linked List Code in C++","text":"<pre><code>// insert node after a specific node\nstruct Node* addAfter(struct Node* last, int data, int item) {\n  // check if the list is empty\n  if (last == NULL) return NULL;\n\n  struct Node *newNode, *p;\n\n  p = last-&gt;next;\n  do {\n  // if the item is found, place newNode after it\n  if (p-&gt;data == item) {\n    // allocate memory to the new node\n    newNode = (struct Node*)malloc(sizeof(struct Node));\n\n    // add data to the node\n    newNode-&gt;data = data;\n\n    // make the next of the current node as the next of newNode\n    newNode-&gt;next = p-&gt;next;\n\n    // put newNode to the next of p\n    p-&gt;next = newNode;\n\n    // if p is the last node, make newNode as the last node\n    if (p == last) last = newNode;\n    return last;\n  }\n\n  p = p-&gt;next;\n  } while (p != last-&gt;next);\n\n  cout &lt;&lt; \"\\nThe given node is not present in the list\" &lt;&lt; endl;\n  return last;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_13","title":"Circular Linked List Code in C++","text":"<pre><code>// delete a node\nvoid deleteNode(Node** last, int key) {\n  // if linked list is empty\n  if (*last == NULL) return;\n\n  // if the list contains only a single node\n  if ((*last)-&gt;data == key &amp;&amp; (*last)-&gt;next == *last) {\n  free(*last);\n  *last = NULL;\n  return;\n  }\n\n  Node *temp = *last, *d;\n\n  // if last is to be deleted\n  if ((*last)-&gt;data == key) {\n  // find the node before the last node\n  while (temp-&gt;next != *last) temp = temp-&gt;next;\n\n  // point temp node to the next of last i.e. first node\n  temp-&gt;next = (*last)-&gt;next;\n  free(*last);\n  *last = temp-&gt;next;\n  }\n\n  // travel to the node to be deleted\n  while (temp-&gt;next != *last &amp;&amp; temp-&gt;next-&gt;data != key) {\n  temp = temp-&gt;next;\n  }\n\n  // if node to be deleted was found\n  if (temp-&gt;next-&gt;data == key) {\n  d = temp-&gt;next;\n  temp-&gt;next = d-&gt;next;\n  free(d);\n  }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_14","title":"Circular Linked List Code in C++","text":"<pre><code>void traverse(struct Node* last) {\n  struct Node* p;\n\n  if (last == NULL) {\n  cout &lt;&lt; \"The list is empty\" &lt;&lt; endl;\n  return;\n  }\n\n  p = last-&gt;next;\n\n  do {\n  cout &lt;&lt; p-&gt;data &lt;&lt; \" \";\n  p = p-&gt;next;\n\n  } while (p != last-&gt;next);\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-c_15","title":"Circular Linked List Code in C++","text":"<pre><code>int main() {\n  struct Node* last = NULL;\n\n  last = addToEmpty(last, 6);\n  last = addEnd(last, 8);\n  last = addFront(last, 2);\n\n  last = addAfter(last, 10, 2);\n\n  traverse(last);\n\n  deleteNode(&amp;last, 8);\n  cout &lt;&lt; endl;\n\n  traverse(last);\n\n  return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-code-in-java","title":"Circular Linked List Code in Java","text":"<pre><code>// Java code to perform circular linked list operations\n\nclass CircularLinkedList {\n\n  static class Node {\n    int data;\n    Node next;\n  };\n\n...\n\n  ```\n\n---\n\n### Circular Linked List Code in Java\n\n``` java\n\n  static Node addToEmpty(Node last, int data) {\n    if (last != null)\n      return last;\n\n    // allocate memory to the new node\n    Node newNode = new Node();\n\n    // assign data to the new node\n    newNode.data = data;\n\n    // assign last to newNode\n    last = newNode;\n\n    // create link to iteself\n    newNode.next = last;\n\n    return last;\n  }\n\n  ...\n\n  ```\n\n---\n\n### Circular Linked List Code in Java\n\n``` java\n\n  // add node to the front\n  static Node addFront(Node last, int data) {\n    if (last == null)\n      return addToEmpty(last, data);\n\n    // allocate memory to the new node\n    Node newNode = new Node();\n\n    // add data to the node\n    newNode.data = data;\n\n    // store the address of the current first node in the newNode\n    newNode.next = last.next;\n\n    // make newNode as head\n    last.next = newNode;\n\n    return last;\n  }\n\n  ...\n\n  ```\n\n---\n\n### Circular Linked List Code in Java\n\n``` java\n\n  // add node to the end\n  static Node addEnd(Node last, int data) {\n    if (last == null)\n      return addToEmpty(last, data);\n\n    // allocate memory to the new node\n    Node newNode = new Node();\n\n    // add data to the node\n    newNode.data = data;\n\n    // store the address of the head node to next of newNode\n    newNode.next = last.next;\n\n    // point the current last node to the newNode\n    last.next = newNode;\n\n    // make newNode as the last node\n    last = newNode;\n\n    return last;\n  }\n\n  ...\n\n  ```\n\n---\n\n### Circular Linked List Code in Java\n\n``` java\n\n  static Node addAfter(Node last, int data, int item) {\n    if (last == null)\n      return null;\n\n    Node newNode, p;\n    p = last.next;\n    do {\n      // if the item is found, place newNode after it\n      if (p.data == item) {\n        // allocate memory to the new node\n        newNode = new Node();\n\n        // add data to the node\n        newNode.data = data;\n\n        // make the next of the current node as the next of newNode\n        newNode.next = p.next;\n\n        // put newNode to the next of p\n        p.next = newNode;\n\n        // if p is the last node, make newNode as the last node\n        if (p == last)\n          last = newNode;\n        return last;\n      }\n      p = p.next;\n    } while (p != last.next);\n\n    System.out.println(item + \"The given node is not present in the list\");\n    return last;\n\n  }\n\n  ...\n\n  ```\n\n---\n\n### Circular Linked List Code in Java\n\n``` java\n\n    // delete a node\n  static Node deleteNode(Node last, int key) {\n    // if linked list is empty\n    if (last == null)\n      return null;\n\n    // if the list contains only a single node\n    if (last.data == key &amp;&amp; last.next == last) {\n      last = null;\n      return last;\n    }\n\n    Node temp = last, d = new Node();\n\n    // if last is to be deleted\n    if (last.data == key) {\n      // find the node before the last node\n      while (temp.next != last) {\n        temp = temp.next;\n      }\n\n      // point temp node to the next of last i.e. first node\n      temp.next = last.next;\n      last = temp.next;\n    }\n\n    // travel to the node to be deleted\n    while (temp.next != last &amp;&amp; temp.next.data != key) {\n      temp = temp.next;\n    }\n\n    // if node to be deleted was found\n    if (temp.next.data == key) {\n      d = temp.next;\n      temp.next = d.next;\n    }\n    return last;\n  }\n\n  ...\n\n  ```\n\n---\n\n### Circular Linked List Code in Java\n\n``` java\n\n  static void traverse(Node last) {\n    Node p;\n\n    if (last == null) {\n      System.out.println(\"List is empty.\");\n      return;\n    }\n\n    p = last.next;\n\n    do {\n      System.out.print(p.data + \" \");\n      p = p.next;\n\n    }\n    while (p != last.next);\n\n  }\n\n  ...\n\n  ```\n\n---\n\n### Circular Linked List Code in Java\n\n``` java\n\n  public static void main(String[] args) {\n    Node last = null;\n\n    last = addToEmpty(last, 6);\n    last = addEnd(last, 8);\n    last = addFront(last, 2);\n\n    last = addAfter(last, 10, 2);\n\n    traverse(last);\n\n    deleteNode(last, 8);\n    traverse(last);\n  }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-complexity","title":"Circular Linked List Complexity","text":"Circular Linked List Complexity Time Complexity Space Complexity Insertion Operation O(1) or O(n) O(1) Deletion Operation O(1) O(1)","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-complexity_1","title":"Circular Linked List Complexity","text":"<ul> <li> <ol> <li>Complexity of Insertion Operation**</li> <li>The insertion operations that do not require traversal have the time complexity of\u00a0<code>O(1)</code>.</li> <li>And, an insertion that requires traversal has a time complexity of\u00a0<code>O(n)</code>.</li> <li>The space complexity is\u00a0<code>O(1)</code>.</li> </ol> </li> <li> <ol> <li>Complexity of Deletion Operation**</li> <li>All deletion operations run with a time complexity of\u00a0<code>O(1)</code>.</li> <li>And, the space complexity is\u00a0<code>O(1)</code>.</li> </ol> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#why-circular-linked-list","title":"Why Circular Linked List?","text":"<ol> <li>The NULL assignment is not required because a node always points to another node.</li> <li>The starting point can be set to any node.</li> <li>Traversal from the first node to the last node is quick.</li> </ol>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-linked-list-applications","title":"Circular Linked List Applications","text":"<ul> <li>It is used in multiplayer games to give a chance to each player to play the game.</li> <li>Multiple running applications can be placed in a circular linked list on an operating system. The os keeps on iterating over these applications.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#double-linked-list","title":"Double Linked List","text":"<ul> <li>Btech Smart Class</li> <li>Data Structures Tutorials - Double Linked List with an example program</li> <li>Geeks for Geeks</li> <li>Doubly Linked List | Set 1 (Introduction and Insertion) - GeeksforGeeks</li> <li>Visual Algo</li> <li>Linked List (Single, Doubly), Stack, Queue, Deque - VisuAlgo</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#double-linked-list_1","title":"Double Linked List","text":"<ul> <li>In this tutorial, you will learn about the doubly linke list and its implementation in Python, Java, C, and C++.</li> </ul> <p>Note: Before you proceed further, make sure to learn about\u00a0pointers and structs.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#double-linked-list_2","title":"Double Linked List","text":"<ul> <li>A doubly linked list is a type of\u00a0linked list\u00a0in which each node consists of 3 components:<ul> <li><code>*prev</code>\u00a0- address of the previous node</li> <li><code>data</code>\u00a0- data item</li> <li><code>*next</code>\u00a0- address of next node</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-doubly-linked-list","title":"Representation of Doubly Linked List","text":"<p>Let's see how we can represent a doubly linked list on an algorithm/code. Suppose we have a doubly linked list:</p> <p></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-doubly-linked-list_1","title":"Representation of Doubly Linked List","text":"<p>Here, the single node is represented as</p> <pre><code>struct node {\n    int data;\n    struct node *next;\n    struct node *prev;\n}\n</code></pre> <p>Each struct node has a data item, a pointer to the previous struct node, and a pointer to the next struct node.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-doubly-linked-list_2","title":"Representation of Doubly Linked List","text":"<p>Now we will create a simple doubly linked list with three items to understand how this works.</p> <pre><code>/* Initialize nodes */\nstruct node *head;\nstruct node *one = NULL;\nstruct node *two = NULL;\nstruct node *three = NULL;\n\n/* Allocate memory */\none = malloc(sizeof(struct node));\ntwo = malloc(sizeof(struct node));\nthree = malloc(sizeof(struct node));\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-doubly-linked-list_3","title":"Representation of Doubly Linked List","text":"<pre><code>/* Assign data values */\none-&gt;data = 1;\ntwo-&gt;data = 2;\nthree-&gt;data = 3;\n\n/* Connect nodes */\none-&gt;next = two;\none-&gt;prev = NULL;\n\ntwo-&gt;next = three;\ntwo-&gt;prev = one;\n\nthree-&gt;next = NULL;\nthree-&gt;prev = two;\n\n/* Save address of first node in head */\nhead = one;\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#representation-of-doubly-linked-list_4","title":"Representation of Doubly Linked List","text":"<ul> <li>In the above code,\u00a0<code>one</code>,\u00a0<code>two</code>, and\u00a0<code>three</code>\u00a0are the nodes with data items\u00a01,\u00a02, and\u00a03\u00a0respectively.<ul> <li>For node one:\u00a0<code>next</code>\u00a0stores the address of\u00a0<code>two</code>\u00a0and\u00a0<code>prev</code>\u00a0stores\u00a0<code>null</code>\u00a0(there is no node before it)</li> <li>For node two:\u00a0<code>next</code>\u00a0stores the address of\u00a0<code>three</code>\u00a0and\u00a0<code>prev</code>\u00a0stores the address of\u00a0<code>one</code></li> <li>For node three:\u00a0<code>next</code>\u00a0stores\u00a0<code>null</code>\u00a0(there is no node after it) and\u00a0<code>prev</code>\u00a0stores the address of\u00a0<code>two</code>.</li> </ul> </li> <li>Note: In the case of the head node,\u00a0<code>prev</code>\u00a0points to\u00a0<code>null</code>, and in the case of the tail pointer,\u00a0<code>next</code>\u00a0points to null. Here,\u00a0<code>one</code>\u00a0is a head node and\u00a0<code>three</code>\u00a0is a tail node.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-on-a-doubly-linked-list","title":"Insertion on a Doubly Linked List","text":"<p>Pushing a node to a doubly-linked list is similar to pushing a node to a linked list, but extra work is required to handle the pointer to the previous node.</p> <p>We can insert elements at 3 different positions of a doubly-linked list:</p> <ol> <li>Insertion at the beginning</li> <li>Insertion in-between nodes</li> <li>Insertion at the End</li> </ol>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-on-a-doubly-linked-list_1","title":"Insertion on a Doubly Linked List","text":"<p>Suppose we have a double-linked list with elements\u00a01,\u00a02, and\u00a03.</p> <p></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#1-insertion-at-the-beginning_1","title":"1. Insertion at the Beginning","text":"<ul> <li>Let's add a node with value\u00a06\u00a0at the beginning of the doubly linked list we made above.<ul> <li> <ol> <li>Create a new node</li> <li>allocate memory for\u00a0<code>newNode</code></li> <li>assign the data to\u00a0<code>newNode</code>.</li> </ol> </li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#1-insertion-at-the-beginning_2","title":"1. Insertion at the Beginning","text":"<ul> <li> <ol> <li>Set prev and next pointers of new node</li> <li>point\u00a0<code>next</code>\u00a0of\u00a0<code>newNode</code>\u00a0to the first node of the doubly linked list</li> <li>point\u00a0<code>prev</code>\u00a0to\u00a0<code>null</code></li> </ol> </li> </ul> <ul> <li>Reorganize the pointers (changes are denoted by purple arrows)</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#1-insertion-at-the-beginning_3","title":"1. Insertion at the Beginning","text":"<ul> <li> <ol> <li>Make new node as head node</li> <li>Point\u00a0<code>prev</code>\u00a0of the first node to\u00a0<code>newNode</code>\u00a0(now the previous\u00a0<code>head</code>\u00a0is the second node)</li> <li>Point\u00a0<code>head</code>\u00a0to\u00a0<code>newNode</code></li> </ol> </li> </ul> <ul> <li>Reorganize the pointers</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#code-for-insertion-at-the-beginning","title":"Code for Insertion at the Beginning","text":"<pre><code>// insert node at the front\nvoid insertFront(struct Node** head, int data) {\n\n    // allocate memory for newNode\n    struct Node* newNode = new Node;\n\n    // assign data to newNode\n    newNode-&gt;data = data;\n\n    // point next of newNode to the first node of the doubly linked list\n    newNode-&gt;next = (*head);\n\n    // point prev to NULL\n    newNode-&gt;prev = NULL;\n\n    // point previous of the first node (now first node is the second node) to newNode\n    if ((*head) != NULL)\n        (*head)-&gt;prev = newNode;\n\n    // head points to newNode\n    (*head) = newNode;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-insertion-in-between-two-nodes_1","title":"2. Insertion in between two nodes","text":"<ul> <li>Let's add a node with value 6 after node with value 1 in the doubly linked list.</li> <li> <ol> <li>Create a new node</li> <li>allocate memory for\u00a0<code>newNode</code></li> <li>assign the data to\u00a0<code>newNode</code>.</li> </ol> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-insertion-in-between-two-nodes_2","title":"2. Insertion in between two nodes","text":"<ul> <li> <ol> <li>Set the next pointer of new node and previous node</li> <li>assign the value of\u00a0<code>next</code>\u00a0from previous node to the\u00a0<code>next</code>\u00a0of\u00a0<code>newNode</code></li> <li>assign the address of\u00a0<code>newNode</code>\u00a0to the\u00a0<code>next</code>\u00a0of previous node</li> </ol> </li> </ul> <ul> <li>Reorganize the pointers</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-insertion-in-between-two-nodes_3","title":"2. Insertion in between two nodes","text":"<ul> <li> <ol> <li>Set the prev pointer of new node and the next node**</li> <li>assign the value of\u00a0<code>prev</code>\u00a0of next node to the\u00a0<code>prev</code>\u00a0of\u00a0<code>newNode</code></li> <li>assign the address of\u00a0<code>newNode</code>\u00a0to the\u00a0<code>prev</code>\u00a0of next node</li> </ol> </li> </ul> <ul> <li>Reorganize the pointers</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-insertion-in-between-two-nodes_4","title":"2. Insertion in between two nodes","text":"<ul> <li>The final doubly linked list is after this insertion is</li> </ul> <ul> <li>Final list</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#code-for-insertion-in-between-two-nodes","title":"Code for Insertion in between two Nodes","text":"<pre><code>// insert a node after a specific node\nvoid insertAfter(struct Node* prev_node, int data) {\n\n    // check if previous node is NULL\n    if (prev_node == NULL) {\n        cout &lt;&lt; \"previous node cannot be NULL\";\n        return;\n    }\n\n    // allocate memory for newNode\n    struct Node* newNode = new Node;\n\n    // assign data to newNode\n    newNode-&gt;data = data;\n\n    // set next of newNode to next of prev node\n    newNode-&gt;next = prev_node-&gt;next;\n\n    // set next of prev node to newNode\n    prev_node-&gt;next = newNode;\n\n    // set prev of newNode to the previous node\n    newNode-&gt;prev = prev_node;\n\n    // set prev of newNode's next to newNode\n    if (newNode-&gt;next != NULL)\n        newNode-&gt;next-&gt;prev = newNode;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#3-insertion-at-the-end_1","title":"3. Insertion at the End","text":"<ul> <li>Let's add a node with value 6 at the end of the doubly linked list.</li> <li> <ol> <li>Create a new node</li> </ol> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#3-insertion-at-the-end_2","title":"3. Insertion at the End","text":"<ul> <li> <ol> <li>Set prev and next pointers of new node and the previous node</li> <li>If the linked list is empty, make the\u00a0<code>newNode</code>\u00a0as the head node. Otherwise, traverse to the end of the doubly linked list and</li> </ol> </li> </ul> <ul> <li>Reorganize the pointers</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#3-insertion-at-the-end_3","title":"3. Insertion at the End","text":"<ul> <li>The final doubly linked list looks like this.</li> </ul> <ul> <li>The final list</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#code-for-insertion-at-the-end","title":"Code for Insertion at the End","text":"<pre><code>// insert a newNode at the end of the list\nvoid insertEnd(struct Node** head, int data) {\n    // allocate memory for node\n    struct Node* newNode = new Node;\n\n    // assign data to newNode\n    newNode-&gt;data = data;\n\n    // assign NULL to next of newNode\n    newNode-&gt;next = NULL;\n\n    // store the head node temporarily (for later use)\n    struct Node* temp = *head;\n\n    // if the linked list is empty, make the newNode as head node\n    if (*head == NULL) {\n        newNode-&gt;prev = NULL;\n        *head = newNode;\n        return;\n    }\n\n    // if the linked list is not empty, traverse to the end of the linked list\n    while (temp-&gt;next != NULL)\n        temp = temp-&gt;next;\n\n    // now, the last node of the linked list is temp\n\n    // point the next of the last node (temp) to newNode.\n    temp-&gt;next = newNode;\n\n    // assign prev of newNode to temp\n    newNode-&gt;prev = temp;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-from-a-doubly-linked-list","title":"Deletion from a Doubly Linked List","text":"<ul> <li>Similar to insertion, we can also delete a node from\u00a03\u00a0different positions of a doubly linked list.</li> <li>Suppose we have a double-linked list with elements\u00a01,\u00a02, and\u00a03.</li> </ul> <ul> <li>Original doubly linked list</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-from-a-doubly-linked-list_1","title":"Deletion from a Doubly Linked List","text":"<ul> <li> <ol> <li>Delete the First Node of Doubly Linked List</li> <li>If the node to be deleted (i.e.\u00a0<code>del_node</code>) is at the beginning</li> <li>Reset value node after the del_node (i.e. node two)</li> </ol> </li> </ul> <ul> <li>Reorganize the pointers</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deletion-from-a-doubly-linked-list_2","title":"Deletion from a Doubly Linked List","text":"<ul> <li>Finally, free the memory of\u00a0<code>del_node</code>. And, the linked will look like this</li> </ul> <ul> <li>Final list</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#code-for-deletion-of-the-first-node","title":"Code for Deletion of the First Node","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#if-head-del_node-head-del_node-next-if-del_node-prev-null-del_node-prev-next-del_node-next-freedel","title":"<pre><code>if (*head == del_node)\n    *head = del_node-&gt;next;\n\nif (del_node-&gt;prev != NULL)\n    del_node-&gt;prev-&gt;next = del_node-&gt;next;\n\nfree(del);\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-deletion-of-the-inner-node","title":"2. Deletion of the Inner Node","text":"<ul> <li>If\u00a0<code>del_node</code>\u00a0is an inner node (second node), we must have to reset the value of\u00a0<code>next</code>\u00a0and\u00a0<code>prev</code>\u00a0of the nodes before and after the\u00a0<code>del_node</code>.<ul> <li>For the node before the del_node (i.e. first node)<ul> <li>Assign the value of\u00a0<code>next</code>\u00a0of\u00a0<code>del_node</code>\u00a0to the\u00a0<code>next</code>\u00a0of the\u00a0<code>first</code>\u00a0node.</li> </ul> </li> <li>For the node after the del_node (i.e. third node)<ul> <li>Assign the value of\u00a0<code>prev</code>\u00a0of\u00a0<code>del_node</code>\u00a0to the\u00a0<code>prev</code>\u00a0of the\u00a0<code>third</code>\u00a0node.</li> </ul> </li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-deletion-of-the-inner-node_1","title":"2. Deletion of the Inner Node","text":"<ul> <li>Reorganize the pointers</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#2-deletion-of-the-inner-node_2","title":"2. Deletion of the Inner Node","text":"<ul> <li>Finally, we will free the memory of\u00a0<code>del_node</code>. And, the final doubly linked list looks like this.</li> </ul> <ul> <li>Final list</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#code-for-deletion-of-the-inner-node","title":"Code for Deletion of the Inner Node","text":"<pre><code>if (del_node-&gt;next != NULL)\n    del_node-&gt;next-&gt;prev = del_node-&gt;prev;\n\nif (del_node-&gt;prev != NULL)\n    del_node-&gt;prev-&gt;next = del_node-&gt;next;\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#3-delete-the-last-node-of-doubly-linked-list","title":"3. Delete the Last Node of Doubly Linked List","text":"<ul> <li>In this case, we are deleting the last node with value\u00a03\u00a0of the doubly linked list.</li> <li>Here, we can simply delete the\u00a0<code>del_node</code>\u00a0and make the\u00a0<code>next</code>\u00a0of node before\u00a0<code>del_node</code>\u00a0point to\u00a0<code>NULL</code>.</li> </ul> <ul> <li>Reorganize the pointers</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#3-delete-the-last-node-of-doubly-linked-list_1","title":"3. Delete the Last Node of Doubly Linked List","text":"<ul> <li>The final doubly linked list looks like this.</li> </ul> <ul> <li>Final list</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#code-for-deletion-of-the-last-node","title":"Code for Deletion of the Last Node","text":"<pre><code>if (del_node-&gt;prev != NULL)\n    del_node-&gt;prev-&gt;next = del_node-&gt;next;\n</code></pre> <p>Here,\u00a0<code>del_node -&gt;next</code>\u00a0is\u00a0<code>NULL</code>\u00a0so\u00a0<code>del_node-&gt;prev-&gt;next = NULL</code>.</p> <p>Note: We can also solve this using the first condition (for the node before\u00a0<code>del_node</code>) of the second case (Delete the inner node).</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c","title":"Doubly Linked List Code in C","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// node creation\nstruct Node {\n  int data;\n  struct Node* next;\n  struct Node* prev;\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_1","title":"Doubly Linked List Code in C","text":"<pre><code>// insert node at the front\nvoid insertFront(struct Node** head, int data) {\n  // allocate memory for newNode\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n\n  // assign data to newNode\n  newNode-&gt;data = data;\n\n  // make newNode as a head\n  newNode-&gt;next = (*head);\n\n  // assign null to prev\n  newNode-&gt;prev = NULL;\n\n  // previous of head (now head is the second node) is newNode\n  if ((*head) != NULL)\n    (*head)-&gt;prev = newNode;\n\n  // head points to newNode\n  (*head) = newNode;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_2","title":"Doubly Linked List Code in C","text":"<pre><code>// insert a node after a specific node\nvoid insertAfter(struct Node* prev_node, int data) {\n  // check if previous node is null\n  if (prev_node == NULL) {\n    printf(\"previous node cannot be null\");\n    return;\n  }\n  // allocate memory for newNode\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n  // assign data to newNode\n  newNode-&gt;data = data;\n  // set next of newNode to next of prev node\n  newNode-&gt;next = prev_node-&gt;next;\n  // set next of prev node to newNode\n  prev_node-&gt;next = newNode;\n  // set prev of newNode to the previous node\n  newNode-&gt;prev = prev_node;\n  // set prev of newNode's next to newNode\n  if (newNode-&gt;next != NULL)\n    newNode-&gt;next-&gt;prev = newNode;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_3","title":"Doubly Linked List Code in C","text":"<pre><code>// insert a newNode at the end of the list\nvoid insertEnd(struct Node** head, int data) {\n  // allocate memory for node\n  struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n  // assign data to newNode\n  newNode-&gt;data = data;\n  // assign null to next of newNode\n  newNode-&gt;next = NULL;\n  // store the head node temporarily (for later use)\n  struct Node* temp = *head;\n  // if the linked list is empty, make the newNode as head node\n  if (*head == NULL) {\n    newNode-&gt;prev = NULL;\n    *head = newNode;\n    return;\n  }\n  // if the linked list is not empty, traverse to the end of the linked list\n  while (temp-&gt;next != NULL)\n    temp = temp-&gt;next;\n  // now, the last node of the linked list is temp\n  // assign next of the last node (temp) to newNode\n  temp-&gt;next = newNode;\n  // assign prev of newNode to temp\n  newNode-&gt;prev = temp;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_4","title":"Doubly Linked List Code in C","text":"<pre><code>// delete a node from the doubly linked list\nvoid deleteNode(struct Node** head, struct Node* del_node) {\n  // if head or del is null, deletion is not possible\n  if (*head == NULL || del_node == NULL)\n    return;\n  // if del_node is the head node, point the head pointer to the next of del_node\n  if (*head == del_node)\n    *head = del_node-&gt;next;\n  // if del_node is not at the last node, point the prev of node next to del_node to the previous of del_node\n  if (del_node-&gt;next != NULL)\n    del_node-&gt;next-&gt;prev = del_node-&gt;prev;\n  // if del_node is not the first node, point the next of the previous node to the next node of del_node\n  if (del_node-&gt;prev != NULL)\n    del_node-&gt;prev-&gt;next = del_node-&gt;next;\n  // free the memory of del_node\n  free(del_node);\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_5","title":"Doubly Linked List Code in C","text":"<pre><code>// print the doubly linked list\nvoid displayList(struct Node* node) {\n  struct Node* last;\n  while (node != NULL) {\n    printf(\"%d-&gt;\", node-&gt;data);\n    last = node;\n    node = node-&gt;next;\n  }\n  if (node == NULL)\n    printf(\"NULL\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_6","title":"Doubly Linked List Code in C","text":"<pre><code>int main() {\n  // initialize an empty node\n  struct Node* head = NULL;\n\n  insertEnd(&amp;head, 5);\n  insertFront(&amp;head, 1);\n  insertFront(&amp;head, 6);\n  insertEnd(&amp;head, 9);\n  // insert 11 after head\n  insertAfter(head, 11);\n  // insert 15 after the seond node\n  insertAfter(head-&gt;next, 15);\n  displayList(head);\n  // delete the last node\n  deleteNode(&amp;head, head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next);\n  displayList(head);\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_7","title":"Doubly Linked List Code in C++","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// node creation\nstruct Node {\n  int data;\n  struct Node* next;\n  struct Node* prev;\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_8","title":"Doubly Linked List Code in C++","text":"<pre><code>// insert node at the front\nvoid insertFront(struct Node** head, int data) {\n  // allocate memory for newNode\n  struct Node* newNode = new Node;\n  // assign data to newNode\n  newNode-&gt;data = data;\n  // make newNode as a head\n  newNode-&gt;next = (*head);\n  // assign null to prev\n  newNode-&gt;prev = NULL;\n  // previous of head (now head is the second node) is newNode\n  if ((*head) != NULL)\n    (*head)-&gt;prev = newNode;\n  // head points to newNode\n  (*head) = newNode;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_9","title":"Doubly Linked List Code in C++","text":"<pre><code>// insert a node after a specific node\nvoid insertAfter(struct Node* prev_node, int data) {\n  // check if previous node is null\n  if (prev_node == NULL) {\n    cout &lt;&lt; \"previous node cannot be null\";\n    return;\n  }\n  // allocate memory for newNode\n  struct Node* newNode = new Node;\n  // assign data to newNode\n  newNode-&gt;data = data;\n  // set next of newNode to next of prev node\n  newNode-&gt;next = prev_node-&gt;next;\n  // set next of prev node to newNode\n  prev_node-&gt;next = newNode;\n  // set prev of newNode to the previous node\n  newNode-&gt;prev = prev_node;\n  // set prev of newNode's next to newNode\n  if (newNode-&gt;next != NULL)\n    newNode-&gt;next-&gt;prev = newNode;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_10","title":"Doubly Linked List Code in C++","text":"<pre><code>// insert a newNode at the end of the list\nvoid insertEnd(struct Node** head, int data) {\n  // allocate memory for node\n  struct Node* newNode = new Node;\n  // assign data to newNode\n  newNode-&gt;data = data;\n  // assign null to next of newNode\n  newNode-&gt;next = NULL;\n  // store the head node temporarily (for later use)\n  struct Node* temp = *head;\n  // if the linked list is empty, make the newNode as head node\n  if (*head == NULL) {\n    newNode-&gt;prev = NULL;\n    *head = newNode;\n    return;\n  }\n  // if the linked list is not empty, traverse to the end of the linked list\n  while (temp-&gt;next != NULL)\n    temp = temp-&gt;next;\n  // now, the last node of the linked list is temp\n  // assign next of the last node (temp) to newNode\n  temp-&gt;next = newNode;\n  // assign prev of newNode to temp\n  newNode-&gt;prev = temp;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_11","title":"Doubly Linked List Code in C++","text":"<pre><code>// delete a node from the doubly linked list\nvoid deleteNode(struct Node** head, struct Node* del_node) {\n  // if head or del is null, deletion is not possible\n  if (*head == NULL || del_node == NULL)\n    return;\n  // if del_node is the head node, point the head pointer to the next of del_node\n  if (*head == del_node)\n    *head = del_node-&gt;next;\n  // if del_node is not at the last node, point the prev of node next to del_node to the previous of del_node\n  if (del_node-&gt;next != NULL)\n    del_node-&gt;next-&gt;prev = del_node-&gt;prev;\n  // if del_node is not the first node, point the next of the previous node to the next node of del_node\n  if (del_node-&gt;prev != NULL)\n    del_node-&gt;prev-&gt;next = del_node-&gt;next;\n  // free the memory of del_node\n  free(del_node);\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_12","title":"Doubly Linked List Code in C++","text":"<pre><code>// print the doubly linked list\nvoid displayList(struct Node* node) {\n  struct Node* last;\n  while (node != NULL) {\n    cout &lt;&lt; node-&gt;data &lt;&lt; \"-&gt;\";\n    last = node;\n    node = node-&gt;next;\n  }\n  if (node == NULL)\n    cout &lt;&lt; \"NULL\\n\";\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_13","title":"Doubly Linked List Code in C++","text":"<pre><code>int main() {\n  // initialize an empty node\n  struct Node* head = NULL;\n  insertEnd(&amp;head, 5);\n  insertFront(&amp;head, 1);\n  insertFront(&amp;head, 6);\n  insertEnd(&amp;head, 9);\n  // insert 11 after head\n  insertAfter(head, 11);\n  // insert 15 after the seond node\n  insertAfter(head-&gt;next, 15);\n  displayList(head);\n  // delete the last node\n  deleteNode(&amp;head, head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next);\n  displayList(head);\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-c_14","title":"Doubly Linked List Code in C++","text":"<pre><code>public class DoublyLinkedList {\n\n  // node creation\n  Node head;\n\n  class Node {\n    int data;\n    Node prev;\n    Node next;\n    Node(int d) {\n      data = d;\n    }\n  }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-java","title":"Doubly Linked List Code in Java","text":"<pre><code>  // insert node at the front\n  public void insertFront(int data) {\n    // allocate memory for newNode and assign data to newNode\n    Node newNode = new Node(data);\n    // make newNode as a head\n    newNode.next = head;\n    // assign null to prev of newNode\n    newNode.prev = null;\n    // previous of head (now head is the second node) is newNode\n    if (head != null)\n      head.prev = newNode;\n    // head points to newNode\n    head = newNode;\n  }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-java_1","title":"Doubly Linked List Code in Java","text":"<pre><code>  // insert a node after a specific node\n  public void insertAfter(Node prev_node, int data) {\n    // check if previous node is null\n    if (prev_node == null) {\n      System.out.println(\"previous node cannot be null\");\n      return;\n    }\n    // allocate memory for newNode and assign data to newNode\n    Node new_node = new Node(data);\n    // set next of newNode to next of prev node\n    new_node.next = prev_node.next;\n    // set next of prev node to newNode\n    prev_node.next = new_node;\n    // set prev of newNode to the previous node\n    new_node.prev = prev_node;\n    // set prev of newNode's next to newNode\n    if (new_node.next != null)\n      new_node.next.prev = new_node;\n  }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-java_2","title":"Doubly Linked List Code in Java","text":"<pre><code>  // insert a newNode at the end of the list\n  void insertEnd(int data) {\n    // allocate memory for newNode and assign data to newNode\n    Node new_node = new Node(data);\n    // store the head node temporarily (for later use)\n    Node temp = head;\n    // assign null to next of newNode\n    new_node.next = null;\n    // if the linked list is empty, make the newNode as head node\n    if (head == null) {\n      new_node.prev = null;\n      head = new_node;\n      return;\n    }\n    // if the linked list is not empty, traverse to the end of the linked list\n    while (temp.next != null)\n      temp = temp.next;\n    // assign next of the last node (temp) to newNode\n    temp.next = new_node;\n    // assign prev of newNode to temp\n    new_node.prev = temp;\n  }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-java_3","title":"Doubly Linked List Code in Java","text":"<pre><code>  // delete a node from the doubly linked list\n  void deleteNode(Node del_node) {\n    // if head or del is null, deletion is not possible\n    if (head == null || del_node == null) {\n      return;\n    }\n    // if del_node is the head node, point the head pointer to the next of del_node\n    if (head == del_node) {\n      head = del_node.next;\n    }\n    // if del_node is not at the last node, point the prev of node next to del_node\n    // to the previous of del_node\n    if (del_node.next != null) {\n      del_node.next.prev = del_node.prev;\n    }\n    // if del_node is not the first node, point the next of the previous node to the\n    // next node of del_node\n    if (del_node.prev != null) {\n      del_node.prev.next = del_node.next;\n    }\n\n  }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-java_4","title":"Doubly Linked List Code in Java","text":"<pre><code>  // print the doubly linked list\n  public void printlist(Node node) {\n    Node last = null;\n    while (node != null) {\n      System.out.print(node.data + \"-&gt;\");\n      last = node;\n      node = node.next;\n    }\n    System.out.println();\n  }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-code-in-java_5","title":"Doubly Linked List Code in Java","text":"<pre><code>  public static void main(String[] args) {\n    DoublyLinkedList doubly_ll = new DoublyLinkedList();\n\n    doubly_ll.insertEnd(5);\n    doubly_ll.insertFront(1);\n    doubly_ll.insertFront(6);\n    doubly_ll.insertEnd(9);\n    // insert 11 after head\n    doubly_ll.insertAfter(doubly_ll.head, 11);\n    // insert 15 after the seond node\n    doubly_ll.insertAfter(doubly_ll.head.next, 11);\n    doubly_ll.printlist(doubly_ll.head);\n    // delete the last node\n    doubly_ll.deleteNode(doubly_ll.head.next.next.next.next.next);\n    doubly_ll.printlist(doubly_ll.head);\n  }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-complexity","title":"Doubly Linked List Complexity","text":"Doubly Linked List Complexity Time Complexity Space Complexity Insertion Operation O(1) or O(n) O(1) Deletion Operation O(1) O(1)","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-complexity_1","title":"Doubly Linked List Complexity","text":"<ul> <li> <ol> <li>Complexity of Insertion Operation</li> <li>The insertion operations that do not require traversal have the time complexity of\u00a0<code>O(1)</code>.</li> <li>And, insertion that requires traversal has time complexity of\u00a0<code>O(n)</code>.</li> <li>The space complexity is\u00a0<code>O(1)</code>.</li> </ol> </li> <li> <ol> <li>Complexity of Deletion Operation</li> <li>All deletion operations run with time complexity of\u00a0<code>O(1)</code>.</li> <li>And, the space complexity is\u00a0<code>O(1)</code>.</li> </ol> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#doubly-linked-list-applications","title":"Doubly Linked List Applications","text":"<ol> <li>Redo and undo functionality in software.</li> <li>Forward and backward navigation in browsers.</li> <li>For navigation systems where forward and backward navigation is required.</li> </ol>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#singly-linked-list-vs-doubly-linked-list","title":"Singly Linked List Vs Doubly Linked List","text":"Singly Linked List Doubly Linked List Each node consists of a data value and a pointer to the next node. Each node consists of a data value, a pointer to the next node, and a pointer to the previous node. Traversal can occur in one way only (forward direction). Traversal can occur in both ways. It requires less space. It requires more space because of an extra pointer. It can be implemented on the stack. It has multiple usages. It can be implemented on the stack, heap, and binary tree.","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list","title":"XOR Linked List","text":"<ul> <li>Wikipedia</li> <li>XOR linked list - Wikipedia</li> <li>Release Dawn \u00b7 ManosPapadakis95/Listes \u00b7 GitHub</li> <li>Geeks for Geeks</li> <li>XOR Linked List - A Memory Efficient Doubly Linked List | Set 1 - GeeksforGeeks</li> <li>Geeks for Geeks</li> <li>XOR Linked List \u2013 A Memory Efficient Doubly Linked List | Set 2 - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list_1","title":"XOR Linked List","text":"<p>An ordinary doubly linked list stores addresses of the previous and next list items in each list node, requiring two address fields:</p> <pre><code> ...  A       B         C         D         E  ...\n          \u2013&gt;  next \u2013&gt;  next  \u2013&gt;  next  \u2013&gt;\n          &lt;\u2013  prev &lt;\u2013  prev  &lt;\u2013  prev  &lt;\u2013\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list_2","title":"XOR Linked List","text":"<p>An XOR linked list compresses the same information into\u00a0one\u00a0address field by storing the bitwise XOR (here denoted by \u2295) of the address for\u00a0previous\u00a0and the address for\u00a0next\u00a0in one field:</p> <pre><code> ...  A        B         C         D         E  ...\n          \u21cc   A\u2295C   \u21cc   B\u2295D   \u21cc   C\u2295E   \u21cc\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list_3","title":"XOR Linked List","text":"<p>More formally:</p> <pre><code>  link(B) = addr(A)\u2295addr(C), link(C) = addr(B)\u2295addr(D), ...\n</code></pre> <p>When traversing the list from left to right: supposing the cursor is at C, the previous item, B, may be XORed with the value in the link field (B\u2295D). The address for D will then be obtained and list traversal may resume. The same pattern applies in the other direction.</p> <pre><code>i.e.\u00a0`addr(D) = link(C) \u2295 addr(B)`\u00a0where\n\n      link(C) = addr(B)\u2295addr(D)\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list_4","title":"XOR Linked List","text":"<p>so</p> <pre><code>      addr(D) = addr(B)\u2295addr(D) \u2295 addr(B)           \n\n      addr(D) = addr(B)\u2295addr(B) \u2295 addr(D) \n</code></pre> <p>since</p> <pre><code>       X\u2295X = 0                 \n       =&gt; addr(D) = 0 \u2295 addr(D)\n</code></pre> <p>since</p> <pre><code>       X\u22950 = X\n       =&gt; addr(D) = addr(D)\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list_5","title":"XOR Linked List","text":"<p>The XOR operation cancels\u00a0<code>addr(B)</code>\u00a0appearing twice in the equation and all we are left with is the\u00a0<code>addr(D)</code>.</p> <p>To start traversing the list in either direction from some point, the address of two consecutive items is required. If the addresses of the two consecutive items are reversed, list traversal will occur in the opposite direction.[1]</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#theory-of-operation","title":"Theory of operation","text":"<p>The key is the first operation, and the properties of XOR:</p> <pre><code>- X\u2295X = 0\n- X\u22950 = X\n- X\u2295Y = Y\u2295X\n- (X\u2295Y)\u2295Z = X\u2295(Y\u2295Z)\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#theory-of-operation_1","title":"Theory of operation","text":"<p>The R2 register always contains the XOR of the address of current item C with the address of the predecessor item P: C\u2295P. The Link fields in the records contain the XOR of the left and right successor addresses, say L\u2295R. XOR of R2 (C\u2295P) with the current link field (L\u2295R) yields C\u2295P\u2295L\u2295R.</p> <ul> <li>If the predecessor was L, the P(=L) and L\u00a0cancel out\u00a0leaving C\u2295R.</li> <li>If the predecessor had been R, the P(=R) and R cancel, leaving C\u2295L.</li> </ul> <p>In each case, the result is the XOR of the current address with the next address. XOR of this with the current address in R1 leaves the next address. R2 is left with the requisite XOR pair of the (now) current address and the predecessor.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list-c-doubly-linked-list","title":"XOR Linked List, C++ Doubly Linked List","text":"<pre><code>// C++ Implementation of Memory efficient Doubly Linked List\n\n// Importing libraries\n#include &lt;bits/stdc++.h&gt;\n#include &lt;cinttypes&gt;\n\nusing namespace std;\n\n// Class 1\n// Helper class(Node structure)\nclass Node {\n    public : int data;\n    // Xor of next node and previous node\n    Node* xnode;\n};\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list-c-doubly-linked-list_1","title":"XOR Linked List, C++ Doubly Linked List","text":"<pre><code>// Method 1\n// It returns Xored value of the node addresses\nNode* Xor(Node* x, Node* y)\n{\n    return reinterpret_cast&lt;Node*&gt;(\n        reinterpret_cast&lt;uintptr_t&gt;(x)\n        ^ reinterpret_cast&lt;uintptr_t&gt;(y));\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list-c-doubly-linked-list_2","title":"XOR Linked List, C++ Doubly Linked List","text":"<pre><code>// Method 2\n// Insert a node at the start of the Xored LinkedList and\n// mark the newly inserted node as head\nvoid insert(Node** head_ref, int data)\n{\n    // Allocate memory for new node\n    Node* new_node = new Node();\n    new_node -&gt; data = data;\n\n    // Since new node is inserted at the\n    // start , xnode of new node will always be\n    // Xor of current head and NULL\n    new_node -&gt; xnode = *head_ref;\n\n    // If linkedlist is not empty, then xnode of\n    // present head node will be Xor of new node\n    // and node next to current head */\n    if (*head_ref != NULL) {\n        // *(head_ref)-&gt;xnode is Xor of (NULL and next).\n        // If we Xor Null with next we get next\n        (*head_ref)\n            -&gt; xnode = Xor(new_node, (*head_ref) -&gt; xnode);\n    }\n\n    // Change head\n    *head_ref = new_node;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list-c-doubly-linked-list_3","title":"XOR Linked List, C++ Doubly Linked List","text":"<pre><code>// Method 3\n// It simply prints contents of doubly linked\n// list in forward direction\nvoid printList(Node* head)\n{\n    Node* curr = head;\n    Node* prev = NULL;\n    Node* next;\n\n    cout &lt;&lt; \"The nodes of Linked List are: \\n\";\n\n    // Till condition holds true\n    while (curr != NULL) {\n        // print current node\n        cout &lt;&lt; curr -&gt; data &lt;&lt; \" \";\n\n        // get address of next node: curr-&gt;xnode is\n        // next^prev, so curr-&gt;xnode^prev will be\n        // next^prev^prev which is next\n        next = Xor(prev, curr -&gt; xnode);\n\n        // update prev and curr for next iteration\n        prev = curr;\n        curr = next;\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#xor-linked-list-c-doubly-linked-list_4","title":"XOR Linked List, C++ Doubly Linked List","text":"<pre><code>// Method 4\n// main driver method\nint main()\n{\n    Node* head = NULL;\n    insert(&amp;head, 10);\n    insert(&amp;head, 100);\n    insert(&amp;head, 1000);\n    insert(&amp;head, 10000);\n\n    // Printing the created list\n    printList(head);\n\n    return (0);\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list","title":"Skip List","text":"<ul> <li>Wikipedia</li> <li>Skip list - Wikipedia</li> <li>Geeks for Geeks </li> <li>Skip List | Set 1 (Introduction) - GeeksforGeeks</li> <li>Skip List | Set 2 (Insertion) - GeeksforGeeks</li> <li>Skip List | Set 3 (Searching and Deletion) - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list_1","title":"Skip List","text":"<ul> <li>Can we search in a sorted linked list better than O(n) time?<ul> <li>The worst-case search time for a sorted linked list is O(n) as we can only linearly traverse the list and cannot skip nodes while searching. </li> <li>For a Balanced Binary Search Tree, we skip almost half of the nodes after one comparison with the root. </li> <li>For a sorted array, we have random access and we can apply Binary Search on arrays. </li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list_2","title":"Skip List","text":"<ul> <li>Can we augment sorted linked lists to search faster? <ul> <li>The answer is\u00a0Skip List. </li> </ul> </li> <li>The idea is simple, <ul> <li>we create multiple layers so that we can skip some nodes. </li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list_3","title":"Skip List","text":"<ul> <li>See the following example list with 16 nodes and two layers. </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list_4","title":"Skip List","text":"<ul> <li>The upper layer works as an \u201cexpress lane\u201d that connects only the main outer stations, and the lower layer works as a \u201cnormal lane\u201d that connects every station. </li> <li>Suppose we want to search for 50, we start from the first node of the \u201cexpress lane\u201d and keep moving on the \u201cexpress lane\u201d till we find a node whose next is greater than 50. - Once we find such a node (30 is the node in the following example) on \u201cexpress lane\u201d, we move to \u201cnormal lane\u201d using a pointer from this node, and linearly search for 50 on \u201cnormal lane\u201d. </li> <li>In the following example, we start from 30 on the \u201cnormal lane\u201d and with linear search, we find 50.\u00a0</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-the-time-complexity-with-two-layers","title":"What is the time complexity with two layers?","text":"<ul> <li>worst-case case time complexity is several nodes on the \u201cexpress lane\u201d plus several nodes in a segment (A segment is several \u201cnormal lane\u201d nodes between two \u201cexpress lane\u201d nodes) of the \u201cnormal lane\u201d. </li> <li>So if we have \\(n\\) nodes on \u201cnormal lane\u201d, \\(\\sqrt(n)\\) (square root of \\(n\\)) nodes on \u201cexpress lane\u201d and we equally divide the \u201cnormal lane\u201d, <ul> <li>then there will be \\(\\sqrt(n)\\) nodes in every segment of \u201cnormal lane\u201d. </li> </ul> </li> <li>\u221an is an optimal division with two layers. </li> <li>With this arrangement, the number of nodes traversed for a search will be <ul> <li>\\(O(\\sqrt(n))\\). </li> </ul> </li> <li>Therefore, with \\(O(\\sqrt(n))\\) extra space, we can reduce the time complexity to <ul> <li>\\(O(\\sqrt(n))\\).</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#advantages-of-skip-list","title":"Advantages of Skip List","text":"<ul> <li>The skip list is solid and trustworthy.</li> <li>To add a new node to it, it will be inserted extremely quickly.\u00a0</li> <li>Easy to implement compared to the hash table and binary search tree</li> <li>The number of nodes in the skip list increases, and the possibility of the worst-case decreases</li> <li>Requires only \\(\\theta(logn)\\) time in the average case for all operations.</li> <li>Finding a node in the list is relatively straightforward.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#disadvantages-of-skip-list","title":"Disadvantages of Skip List","text":"<ul> <li>It needs a greater amount of memory than the balanced tree.</li> <li>Reverse search is not permitted.</li> <li>Searching is slower than a linked list</li> <li>Skip lists are not cache-friendly because they don\u2019t optimize the locality of reference</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deciding-nodes-level","title":"Deciding nodes level","text":"<p>Each element in the list is represented by a node, the level of the node is chosen randomly while insertion in the list.\u00a0**Level does not depend on the number of elements in the node.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#the-level-for-node-is-decided-by-the-following-algorithm","title":"The level for node is decided by the following algorithm","text":"<pre><code>randomLevel()\nlvl := 1\n//random() that returns a random value in [0...1)\nwhile random() &lt; p and lvl &lt; MaxLevel do\nlvl := lvl + 1\nreturn lvl\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#maxlevel-is-the-upper-bound-on-number-of-levels-in-the-skip-list","title":"MaxLevel\u00a0is the upper bound on number of levels in the skip list.","text":"<ul> <li>It can be determined as \u2013 \\(L(N) = log_{p/2}{N}\\). </li> <li>Above algorithm assure that random level will never be greater than MaxLevel. <ul> <li>Here\u00a0\\(p\\)\u00a0is the fraction of the nodes with level\u00a0\\(i\\)\u00a0pointers </li> <li>Also having level\u00a0\\(i+1\\)\u00a0pointers and \\(N\\) is the number of nodes in the list.</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#node-structure","title":"Node Structure","text":"<ul> <li>Each node carries a key and a\u00a0forward\u00a0array carrying pointers to nodes of a different level. A level \\(i\\) node carries \\(i\\) forward pointers indexed through \\(0\\) to \\(i\\).\u00a0</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list","title":"Insertion in Skip List","text":"<ul> <li>We will start from the highest level in the list and compare the key of the next node of the current node with the key to be inserted. The basic idea is If<ul> <li> <ol> <li>Key of next node is less than key to be inserted then we keep on moving forward on the same level</li> </ol> </li> <li> <ol> <li>Key of next node is greater than the key to be inserted then we store the pointer to current node\u00a0i\u00a0at\u00a0update[i]\u00a0and move one level down and continue our search.</li> </ol> </li> </ul> </li> <li>At the level 0, we will definitely find a position to insert the given key. </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-algorithm","title":"Insertion in Skip List Algorithm","text":"<p>Following is the pseudo-code for the insertion algorithm</p> <pre><code>**Insert(list, searchKey)**\nlocal update[0...MaxLevel+1]\nx := list -&gt; header\nfor i := list -&gt; level downto 0 do\n    while x -&gt; forward[i] -&gt; key  forward[i]\nupdate[i] := x\nx := x -&gt; forward[0]\nlvl := randomLevel()\nif lvl &gt; list -&gt; level then\nfor i := list -&gt; level + 1 to lvl do\n    update[i] := list -&gt; header\n    list -&gt; level := lvl\nx := makeNode(lvl, searchKey, value)\nfor i := 0 to level do\n    x -&gt; forward[i] := update[i] -&gt; forward[i]\n    update[i] -&gt; forward[i] := x\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-algorithm_1","title":"Insertion in Skip List Algorithm","text":"<ul> <li>Here \\(update[i]\\) holds the pointer to node at level\u00a0\\(i\\)\u00a0from which we moved down to level\u00a0\\(i-1\\)\u00a0and pointer of node left to insertion position at level \\(0\\). </li> <li>Consider this example where we want to insert key \\(17\\)</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-algorithm_2","title":"Insertion in Skip List Algorithm","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c","title":"Insertion in Skip List in C++","text":"<ul> <li>Following is the code for insertion of key in Skip list</li> </ul> <pre><code>// C++ code for inserting element in skip list\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Class to implement node\nclass Node\n{\npublic:\n    int key;\n\n    // Array to hold pointers to node of different level\n    Node **forward;\n    Node(int, int);\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_1","title":"Insertion in Skip List in C++","text":"<pre><code>Node::Node(int key, int level)\n{\n    this-&gt;key = key;\n\n    // Allocate memory to forward\n    forward = new Node*[level+1];\n\n    // Fill forward array with 0(NULL)\n    memset(forward, 0, sizeof(Node*)*(level+1));\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_2","title":"Insertion in Skip List in C++","text":"<pre><code>// Class for Skip list\nclass SkipList\n{\n    // Maximum level for this skip list\n    int MAXLVL;\n\n    // P is the fraction of the nodes with level\n    // i pointers also having level i+1 pointers\n    float P;\n\n    // current level of skip list\n    int level;\n\n    // pointer to header node\n    Node *header;\npublic:\n    SkipList(int, float);\n    int randomLevel();\n    Node* createNode(int, int);\n    void insertElement(int);\n    void displayList();\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_3","title":"Insertion in Skip List in C++","text":"<pre><code>SkipList::SkipList(int MAXLVL, float P)\n{\n    this-&gt;MAXLVL = MAXLVL;\n    this-&gt;P = P;\n    level = 0;\n\n    // create header node and initialize key to -1\n    header = new Node(-1, MAXLVL);\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_4","title":"Insertion in Skip List in C++","text":"<pre><code>// create random level for node\nint SkipList::randomLevel()\n{\n    float r = (float)rand()/RAND_MAX;\n    int lvl = 0;\n    while (r &lt; P &amp;&amp; lvl &lt; MAXLVL)\n    {\n        lvl++;\n        r = (float)rand()/RAND_MAX;\n    }\n    return lvl;\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_5","title":"Insertion in Skip List in C++","text":"<pre><code>// create new node\nNode* SkipList::createNode(int key, int level)\n{\n    Node *n = new Node(key, level);\n    return n;\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_6","title":"Insertion in Skip List in C++","text":"<pre><code>// Insert given key in skip list\nvoid SkipList::insertElement(int key)\n{\n    Node *current = header;\n\n    // create update array and initialize it\n    Node *update[MAXLVL+1];\n    memset(update, 0, sizeof(Node*)*(MAXLVL+1));\n\n    /* start from highest level of skip list\n        move the current pointer forward while key\n        is greater than key of node next to current\n        Otherwise inserted current in update and\n        move one level down and continue search\n    */\n    for (int i = level; i &gt;= 0; i--)\n    {\n        while (current-&gt;forward[i] != NULL &amp;&amp;\n            current-&gt;forward[i]-&gt;key &lt; key)\n            current = current-&gt;forward[i];\n        update[i] = current;\n    }\n\n    /* reached level 0 and forward pointer to\n    right, which is desired position to\n    insert key.\n    */\n    current = current-&gt;forward[0];\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_7","title":"Insertion in Skip List in C++","text":"<pre><code>...\n    /* if current is NULL that means we have reached\n    to end of the level or current's key is not equal\n    to key to insert that means we have to insert\n    node between update[0] and current node */\n    if (current == NULL || current-&gt;key != key)\n    {\n        // Generate a random level for node\n        int rlevel = randomLevel();\n\n        // If random level is greater than list's current\n        // level (node with highest level inserted in\n        // list so far), initialize update value with pointer\n        // to header for further use\n        if (rlevel &gt; level)\n        {\n            for (int i=level+1;i&lt;rlevel+1;i++)\n                update[i] = header;\n\n            // Update the list current level\n            level = rlevel;\n        }\n\n        // create new node with random level generated\n        Node* n = createNode(key, rlevel);\n\n        // insert node by rearranging pointers\n        for (int i=0;i&lt;=rlevel;i++)\n        {\n            n-&gt;forward[i] = update[i]-&gt;forward[i];\n            update[i]-&gt;forward[i] = n;\n        }\n        cout &lt;&lt; \"Successfully Inserted key \" &lt;&lt; key &lt;&lt; \"\\n\";\n    }\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_8","title":"Insertion in Skip List in C++","text":"<pre><code>// Display skip list level wise\nvoid SkipList::displayList()\n{\n    cout&lt;&lt;\"\\n*****Skip List*****\"&lt;&lt;\"\\n\";\n    for (int i=0;i&lt;=level;i++)\n    {\n        Node *node = header-&gt;forward[i];\n        cout &lt;&lt; \"Level \" &lt;&lt; i &lt;&lt; \": \";\n        while (node != NULL)\n        {\n            cout &lt;&lt; node-&gt;key&lt;&lt;\" \";\n            node = node-&gt;forward[i];\n        }\n        cout &lt;&lt; \"\\n\";\n    }\n};\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-c_9","title":"Insertion in Skip List in C++","text":"<pre><code>// Driver to test above code\nint main()\n{\n    // Seed random number generator\n    srand((unsigned)time(0));\n\n    // create SkipList object with MAXLVL and P\n    SkipList lst(3, 0.5);\n\n    lst.insertElement(3);\n    lst.insertElement(6);\n    lst.insertElement(7);\n    lst.insertElement(9);\n    lst.insertElement(12);\n    lst.insertElement(19);\n    lst.insertElement(17);\n    lst.insertElement(26);\n    lst.insertElement(21);\n    lst.insertElement(25);\n    lst.displayList();\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java","title":"Insertion in Skip List in Java","text":"<pre><code>// Java code for inserting element in skip list\n\nclass GFG {\n\n    // Class to implement node\n    static class Node {\n        int key;\n\n        // Array to hold pointers to node of different level\n        Node forward[];\n\n        Node(int key, int level)\n        {\n            this.key = key;\n\n            // Allocate memory to forward\n            forward = new Node[level + 1];\n        }\n    };\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_1","title":"Insertion in Skip List in Java","text":"<pre><code>    // Class for Skip list\n    static class SkipList {\n        // Maximum level for this skip list\n        int MAXLVL;\n\n        // P is the fraction of the nodes with level\n        // i pointers also having level i+1 pointers\n        float P;\n\n        // current level of skip list\n        int level;\n\n        // pointer to header node\n        Node header;\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_2","title":"Insertion in Skip List in Java","text":"<pre><code>        SkipList(int MAXLVL, float P)\n        {\n            this.MAXLVL = MAXLVL;\n            this.P = P;\n            level = 0;\n\n            // create header node and initialize key to -1\n            header = new Node(-1, MAXLVL);\n        }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_3","title":"Insertion in Skip List in Java","text":"<pre><code>        int randomLevel()\n        {\n            float r = (float)Math.random();\n            int lvl = 0;\n            while (r &lt; P &amp;&amp; lvl &lt; MAXLVL) {\n                lvl++;\n                r = (float)Math.random();\n            }\n            return lvl;\n        }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_4","title":"Insertion in Skip List in Java","text":"<pre><code>        Node createNode(int key, int level)\n        {\n            Node n = new Node(key, level);\n            return n;\n        }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_5","title":"Insertion in Skip List in Java","text":"<pre><code>        // Insert given key in skip list\n\n        void insertElement(int key)\n        {\n            Node current = header;\n\n            // create update array and initialize it\n            Node update[] = new Node[MAXLVL + 1];\n\n            /* start from highest level of skip list\n                    move the current pointer forward while\n            key is greater than key of node next to\n            current Otherwise inserted current in update\n            and move one level down and continue search\n            */\n            for (int i = level; i &gt;= 0; i--) {\n                while (current.forward[i] != null\n                    &amp;&amp; current.forward[i].key &lt; key)\n                    current = current.forward[i];\n                update[i] = current;\n            }\n\n            /* reached level 0 and forward pointer to\n            right, which is desired position to\n            insert key.\n            */\n            current = current.forward[0];\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_6","title":"Insertion in Skip List in Java","text":"<pre><code>...\n            /* if current is NULL that means we have reached\n            to end of the level or current's key is not\n            equal to key to insert that means we have to\n            insert node between update[0] and current node\n        */\n            if (current == null || current.key != key) {\n                // Generate a random level for node\n                int rlevel = randomLevel();\n\n                // If random level is greater than list's\n                // current level (node with highest level\n                // inserted in list so far), initialize\n                // update value with pointer to header for\n                // further use\n                if (rlevel &gt; level) {\n                    for (int i = level + 1; i &lt; rlevel + 1;\n                        i++)\n                        update[i] = header;\n\n                    // Update the list current level\n                    level = rlevel;\n                }\n\n                // create new node with random level\n                // generated\n                Node n = createNode(key, rlevel);\n\n                // insert node by rearranging pointers\n                for (int i = 0; i &lt;= rlevel; i++) {\n                    n.forward[i] = update[i].forward[i];\n                    update[i].forward[i] = n;\n                }\n                System.out.println(\n                    \"Successfully Inserted key \" + key);\n            }\n        }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_7","title":"Insertion in Skip List in Java","text":"<pre><code>        // Display skip list level wise\n        void displayList()\n        {\n            System.out.println(\"\\n*****Skip List*****\");\n            for (int i = 0; i &lt;= level; i++) {\n                Node node = header.forward[i];\n                System.out.print(\"Level \" + i + \": \");\n                while (node != null) {\n                    System.out.print(node.key + \" \");\n                    node = node.forward[i];\n                }\n                System.out.println();\n            }\n        }\n    }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#insertion-in-skip-list-in-java_8","title":"Insertion in Skip List in Java","text":"<pre><code>    // Driver to test above code\n    public static void main(String[] args)\n    {\n        // create SkipList object with MAXLVL and P\n        SkipList lst = new SkipList(3, 0.5f);\n\n        lst.insertElement(3);\n        lst.insertElement(6);\n        lst.insertElement(7);\n        lst.insertElement(9);\n        lst.insertElement(12);\n        lst.insertElement(19);\n        lst.insertElement(17);\n        lst.insertElement(26);\n        lst.insertElement(21);\n        lst.insertElement(25);\n        lst.displayList();\n    }\n}\n\n// This code is contributed by Lovely Jain\n</code></pre> <p>Output</p> <pre><code>Successfully Inserted key 3\nSuccessfully Inserted key 6\nSuccessfully Inserted key 7\nSuccessfully Inserted key 9\nSuccessfully Inserted key 12\nSuccessfully Inserted key 19\nSuccessfully Inserted key 17\nSuccessfully Inserted key 26\nSuccessfully Inserted key 21\nSuccessfully Inserted key 25\n*****Skip List*****\nLevel 0: 3 6 7 9 12 17 19 21 25 26 \nLevel 1: 3 6 12 17 25 26 \nLevel 2: 3 6 12 25 \nLevel 3: 3 25 \n</code></pre> <p>Note:\u00a0The level of nodes is decided randomly, so output may differ.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#time-complexity_1","title":"Time complexity","text":"<ul> <li>Average: \\(O(log n)\\) </li> <li>Worst: \\(O(n)\\)</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-searching-and-deletion","title":"Skip List - Searching and Deletion","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#searching-an-element-in-skip-list","title":"Searching an element in Skip list","text":"<ul> <li>Searching an element is very similar to approach for searching a spot for inserting an element in Skip list. The basic idea is if<ul> <li> <ol> <li>Key of next node is less than search key then we keep on moving forward on the same level.</li> </ol> </li> <li> <ol> <li>Key of next node is greater than the key to be inserted then we store the pointer to current node\u00a0i\u00a0at\u00a0update[i]\u00a0and move one level down and continue our search.</li> </ol> </li> </ul> </li> <li>At the lowest level(0), if the element next to the rightmost element (update[0]) has key equal to the search key, then we have found key otherwise failure. Following is the pseudo code for searching element \u2013</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-searching-algorithm","title":"Skip List - Searching Algorithm","text":"<pre><code>**Search(list, searchKey)**\nx := list -&gt; header\n-- loop invariant: x -&gt; key  level downto 0 do\n    while x -&gt; forward[i] -&gt; key  forward[i]\nx := x -&gt; forward[0]\nif x -&gt; key = searchKey then return x -&gt; value\nelse return failure\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-searching-example","title":"Skip List - Searching Example","text":"<ul> <li>Consider this example where we want to search for key 17-\u00a0</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#deleting-an-element-from-the-skip-list","title":"Deleting an element from the Skip list","text":"<ul> <li>Deletion of an element k is preceded by locating element in the Skip list using above mentioned search algorithm. </li> <li>Once the element is located, rearrangement of pointers is done to remove element form list just like we do in singly linked list. </li> <li>We start from lowest level and do rearrangement until element next to update[i] is not k. - After deletion of element there could be levels with no elements, <ul> <li>so we will remove these levels as well by decrementing the level of Skip list. </li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-algorithm","title":"Skip List - Deletion Algorithm","text":"<pre><code>**Delete(list, searchKey)**\nlocal update[0..MaxLevel+1]\nx := list -&gt; header\nfor i := list -&gt; level downto 0 do\n    while x -&gt; forward[i] -&gt; key  forward[i]\n    update[i] := x\nx := x -&gt; forward[0]\nif x -&gt; key = searchKey then\n    for i := 0 to list -&gt; level do\n        if update[i] -&gt; forward[i] \u2260 x then break\n        update[i] -&gt; forward[i] := x -&gt; forward[i]\n    free(x)\n    while list -&gt; level &gt; 0 and list -&gt; header -&gt; forward[list -&gt; level] = NIL do\n        list -&gt; level := list -&gt; level \u2013 1\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-example","title":"Skip List - Deletion Example","text":"<ul> <li>Consider this example where we want to delete element 6</li> </ul> <ul> <li>Here at level 3, there is no element (arrow in red) after deleting element 6. </li> <li>So we will decrement level of skip list by 1. </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c","title":"Skip List - Deletion in C++","text":"<pre><code>// C++ code for searching and deleting element in skip list\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Class to implement node\nclass Node\n{\npublic:\n    int key;\n\n    // Array to hold pointers to node of different level\n    Node **forward;\n    Node(int, int);\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_1","title":"Skip List - Deletion in C++","text":"<pre><code>Node::Node(int key, int level)\n{\n    this-&gt;key = key;\n\n    // Allocate memory to forward\n    forward = new Node*[level+1];\n\n    // Fill forward array with 0(NULL)\n    memset(forward, 0, sizeof(Node*)*(level+1));\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_2","title":"Skip List - Deletion in C++","text":"<pre><code>// Class for Skip list\nclass SkipList\n{\n    // Maximum level for this skip list\n    int MAXLVL;\n\n    // P is the fraction of the nodes with level\n    // i pointers also having level i+1 pointers\n    float P;\n\n    // current level of skip list\n    int level;\n\n    // pointer to header node\n    Node *header;\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_3","title":"Skip List - Deletion in C++","text":"<pre><code>...\npublic:\n    SkipList(int, float);\n    int randomLevel();\n    Node* createNode(int, int);\n    void insertElement(int);\n    void deleteElement(int);\n    void searchElement(int);\n    void displayList();\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_4","title":"Skip List - Deletion in C++","text":"<pre><code>SkipList::SkipList(int MAXLVL, float P)\n{\n    this-&gt;MAXLVL = MAXLVL;\n    this-&gt;P = P;\n    level = 0;\n\n    // create header node and initialize key to -1\n    header = new Node(-1, MAXLVL);\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_5","title":"Skip List - Deletion in C++","text":"<pre><code>// create random level for node\nint SkipList::randomLevel()\n{\n    float r = (float)rand()/RAND_MAX;\n    int lvl = 0;\n    while(r &lt; P &amp;&amp; lvl &lt; MAXLVL)\n    {\n        lvl++;\n        r = (float)rand()/RAND_MAX;\n    }\n    return lvl;\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_6","title":"Skip List - Deletion in C++","text":"<pre><code>// create new node\nNode* SkipList::createNode(int key, int level)\n{\n    Node *n = new Node(key, level);\n    return n;\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_7","title":"Skip List - Deletion in C++","text":"<pre><code>// Insert given key in skip list\nvoid SkipList::insertElement(int key)\n{\n    Node *current = header;\n\n    // create update array and initialize it\n    Node *update[MAXLVL+1];\n    memset(update, 0, sizeof(Node*)*(MAXLVL+1));\n\n    /* start from highest level of skip list\n        move the current pointer forward while key\n        is greater than key of node next to current\n        Otherwise inserted current in update and\n        move one level down and continue search\n    */\n    for(int i = level; i &gt;= 0; i--)\n    {\n        while(current-&gt;forward[i] != NULL &amp;&amp;\n            current-&gt;forward[i]-&gt;key &lt; key)\n            current = current-&gt;forward[i];\n        update[i] = current;\n    }\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_8","title":"Skip List - Deletion in C++","text":"<pre><code>...\n\n    /* reached level 0 and forward pointer to\n    right, which is desired position to\n    insert key.\n    */\n    current = current-&gt;forward[0];\n\n    /* if current is NULL that means we have reached\n    to end of the level or current's key is not equal\n    to key to insert that means we have to insert\n    node between update[0] and current node */\n    if (current == NULL || current-&gt;key != key)\n    {\n        // Generate a random level for node\n        int rlevel = randomLevel();\n\n        /* If random level is greater than list's current\n        level (node with highest level inserted in\n        list so far), initialize update value with pointer\n        to header for further use */\n        if(rlevel &gt; level)\n        {\n            for(int i=level+1;i&lt;rlevel+1;i++)\n                update[i] = header;\n\n            // Update the list current level\n            level = rlevel;\n        }\n\n        // create new node with random level generated\n        Node* n = createNode(key, rlevel);\n\n        // insert node by rearranging pointers\n        for(int i=0;i&lt;=rlevel;i++)\n        {\n            n-&gt;forward[i] = update[i]-&gt;forward[i];\n            update[i]-&gt;forward[i] = n;\n        }\n        cout&lt;&lt;\"Successfully Inserted key \"&lt;&lt;key&lt;&lt;\"\\n\";\n    }\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_9","title":"Skip List - Deletion in C++","text":"<pre><code>// Delete element from skip list\nvoid SkipList::deleteElement(int key)\n{\n    Node *current = header;\n\n    // create update array and initialize it\n    Node *update[MAXLVL+1];\n    memset(update, 0, sizeof(Node*)*(MAXLVL+1));\n\n    /* start from highest level of skip list\n        move the current pointer forward while key\n        is greater than key of node next to current\n        Otherwise inserted current in update and\n        move one level down and continue search\n    */\n    for(int i = level; i &gt;= 0; i--)\n    {\n        while(current-&gt;forward[i] != NULL &amp;&amp;\n            current-&gt;forward[i]-&gt;key &lt; key)\n            current = current-&gt;forward[i];\n        update[i] = current;\n    }\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_10","title":"Skip List - Deletion in C++","text":"<pre><code>...\n    /* reached level 0 and forward pointer to\n    right, which is possibly our desired node.*/\n    current = current-&gt;forward[0];\n\n    // If current node is target node\n    if(current != NULL and current-&gt;key == key)\n    {\n        /* start from lowest level and rearrange\n        pointers just like we do in singly linked list\n        to remove target node */\n        for(int i=0;i&lt;=level;i++)\n        {\n            /* If at level i, next node is not target\n            node, break the loop, no need to move\n            further level */\n            if(update[i]-&gt;forward[i] != current)\n                break;\n\n            update[i]-&gt;forward[i] = current-&gt;forward[i];\n        }\n\n        // Remove levels having no elements\n        while(level&gt;0 &amp;&amp;\n            header-&gt;forward[level] == 0)\n            level--;\n        cout&lt;&lt;\"Successfully deleted key \"&lt;&lt;key&lt;&lt;\"\\n\";\n    }\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_11","title":"Skip List - Deletion in C++","text":"<pre><code>// Search for element in skip list\nvoid SkipList::searchElement(int key)\n{\n    Node *current = header;\n\n    /* start from highest level of skip list\n        move the current pointer forward while key\n        is greater than key of node next to current\n        Otherwise inserted current in update and\n        move one level down and continue search\n    */\n    for(int i = level; i &gt;= 0; i--)\n    {\n        while(current-&gt;forward[i] &amp;&amp;\n            current-&gt;forward[i]-&gt;key &lt; key)\n            current = current-&gt;forward[i];\n\n    }\n\n    /* reached level 0 and advance pointer to\n    right, which is possibly our desired node*/\n    current = current-&gt;forward[0];\n\n    // If current node have key equal to\n    // search key, we have found our target node\n    if(current and current-&gt;key == key)\n        cout&lt;&lt;\"Found key: \"&lt;&lt;key&lt;&lt;\"\\n\";\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_12","title":"Skip List - Deletion in C++","text":"<pre><code>// Display skip list level wise\nvoid SkipList::displayList()\n{\n    cout&lt;&lt;\"\\n*****Skip List*****\"&lt;&lt;\"\\n\";\n    for(int i=0;i&lt;=level;i++)\n    {\n        Node *node = header-&gt;forward[i];\n        cout&lt;&lt;\"Level \"&lt;&lt;i&lt;&lt;\": \";\n        while(node != NULL)\n        {\n            cout&lt;&lt;node-&gt;key&lt;&lt;\" \";\n            node = node-&gt;forward[i];\n        }\n        cout&lt;&lt;\"\\n\";\n    }\n};\n\n... \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#skip-list-deletion-in-c_13","title":"Skip List - Deletion in C++","text":"<pre><code>// Driver to test above code\nint main()\n{\n    // Seed random number generator\n    srand((unsigned)time(0));\n\n    // create SkipList object with MAXLVL and P\n    SkipList lst(3, 0.5);\n\n    lst.insertElement(3);\n    lst.insertElement(6);\n    lst.insertElement(7);\n    lst.insertElement(9);\n    lst.insertElement(12);\n    lst.insertElement(19);\n    lst.insertElement(17);\n    lst.insertElement(26);\n    lst.insertElement(21);\n    lst.insertElement(25);\n    lst.displayList();\n\n    //Search for node 19\n    lst.searchElement(19);\n\n    //Delete node 19\n    lst.deleteElement(19);\n    lst.displayList();\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#output_1","title":"Output","text":"<pre><code>Successfully Inserted key 3\nSuccessfully Inserted key 6\nSuccessfully Inserted key 7\nSuccessfully Inserted key 9\nSuccessfully Inserted key 12\nSuccessfully Inserted key 19\nSuccessfully Inserted key 17\nSuccessfully Inserted key 26\nSuccessfully Inserted key 21\nSuccessfully Inserted key 25\n*****Skip List*****\nLevel 0: 3 6 7 9 12 17 19 21 25 26 \nLevel 1: 6 9 19 26 \nLevel 2: 19 \nFound key: 19\nSuccessfully deleted key 19\n*****Skip List*****\nLevel 0: 3 6 7 9 12 17 21 25 26 \nLevel 1: 6 9 26 \n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#time-complexity-of-both-searching-and-deletion-same","title":"Time complexity of both searching and deletion (same)","text":"<ul> <li>Time complexity Worst case<ul> <li>Access \u2013 \\(O(n)\\)</li> <li>Search \u2013 \\(O(n)\\)</li> <li>Insert \u2013 \\(O(n)\\)</li> <li>Space \u2013 \\(O(nlogn)\\)</li> <li>Delete \u2013 \\(O(n)\\)</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort","title":"Strand Sort","text":"<ul> <li>Geeks for Geeks</li> <li>Strand Sort - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort_1","title":"Strand Sort","text":"<ul> <li>Strand sort is a recursive sorting algorithm that sorts items of a list into increasing order. </li> <li>It has \\(O(n^2)\\) worst time complexity <ul> <li>which occurs when the input list is reverse sorted. </li> </ul> </li> <li>It has a best case time complexity of \\(O(n)\\) <ul> <li>which occurs when the input is a list that is already sorted.</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-example","title":"Strand Sort Example","text":"<ul> <li>Given a list of items, sort them in increasing order.\u00a0</li> <li>Input:\u00a0 <pre><code>ip[] = {10, 5, 30, 40, 2, 4, 9}  \n</code></pre></li> <li>Output <pre><code>op[] = {2, 4, 5, 9, 10, 30, 40}\n</code></pre></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-example_1","title":"Strand Sort Example","text":"<ul> <li>Given a list of items, sort them in increasing order.\u00a0</li> <li>Input:\u00a0 <pre><code>ip[] = {1, 10, 7}  \n</code></pre></li> <li>Output <pre><code>op[] = {1, 7, 10}\n</code></pre></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-example_2","title":"Strand Sort Example","text":"<ul> <li> <p>Let,\u00a0<code>input[]\u00a0= {10, 5, 30, 40, 2, 4, 9}</code></p> </li> <li> <p>Initialize:\u00a0<code>output[]\u00a0= {}, sublist[] = {}</code></p> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-example_3","title":"Strand Sort Example","text":"<ul> <li>Move first item of input to sublist. <code>sublist[] = {10}</code></li> <li>Traverse remaining items of input and if current element is greater than last item of sublist, move this item from input to sublist.\u00a0  </li> <li>Now, <code>sublist[] = {10, 30, 40}, input[] = {5, 2, 4, 9}</code></li> <li>Merge sublist into output.  <code>op = {10, 30, 40}</code></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-example_4","title":"Strand Sort Example","text":"<ul> <li>Next recursive call<ul> <li>Move first item of input to sublist. <code>sublist[] = {5}</code></li> </ul> </li> <li>Traverse remaining items of input and move elements greater than last inserted. <code>input[] = {2, 4}</code> <code>sublist[] = {5, 9}</code></li> <li>Merge sublist into op. <code>output = {5, 9, 10, 30, 40}</code></li> <li>Last Recursive Call <code>{2, 4}</code> are first moved to sublist and then merged into output. <code>output = {2, 4, 5, 9, 10, 30, 40}</code></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#steps-used-in-the-strand-sort-algorithm","title":"Steps used in the Strand Sort Algorithm","text":"<ul> <li>Let <code>ip[]</code> be input list and <code>op[]</code> be output list.</li> <li>Create an empty sublist and move first item of <code>ip[]</code> to it.</li> <li>Traverse remaining items of ip. For every item <code>x</code>, check if <code>x</code> is greater than last inserted item to sublist. If yes, remove <code>x</code> from <code>ip[]</code> and add at the end of sublist. If no, ignore <code>x</code> (Keep it, it in <code>ip[]</code>)</li> <li>Merge sublist into <code>op[]</code> (output list)</li> <li>Recur for remaining items in <code>ip[]</code> and current items in <code>op[]</code>.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c","title":"Strand Sort in C++","text":"<pre><code>// CPP program to implement Strand Sort\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n// A recursive function to implement Strand\n// sort.\n// ip is input list of items (unsorted).\n// op is output list of items (sorted)\nvoid strandSort(list&lt;int&gt; &amp;ip, list&lt;int&gt; &amp;op)\n{\n    // Base case : input is empty\n    if (ip.empty())\n        return;\n    // Create a sorted sublist with\n    // first item of input list as\n    // first item of the sublist\n    list&lt;int&gt; sublist;\n    sublist.push_back(ip.front());\n    ip.pop_front();\n    ...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_1","title":"Strand Sort in C++","text":"<pre><code>    ...\n    // Traverse remaining items of ip list\n    for (auto it = ip.begin(); it != ip.end(); ) {\n        // If current item of input list\n        // is greater than last added item\n        // to sublist, move current item\n        // to sublist as sorted order is\n        // maintained.\n        if (*it &gt; sublist.back()) {\n            sublist.push_back(*it);\n            // erase() on list removes an\n            // item and returns iterator to\n            // next of removed item.\n            it = ip.erase(it);\n        }\n        // Otherwise ignore current element\n        else\n            it++;\n    }\n\n    ...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_2","title":"Strand Sort in C++","text":"<pre><code>    ...\n    // Merge current sublist into output\n    op.merge(sublist);\n    ...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_3","title":"Strand Sort in C++","text":"<pre><code>    // Recur for remaining items in\n    // input and current items in op.\n    strandSort(ip, op);\n} //end of function...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_4","title":"Strand Sort in C++","text":"<pre><code>// Driver code\nint main(void)\n{\n    list&lt;int&gt; ip{10, 5, 30, 40, 2, 4, 9};\n    // To store sorted output list\n    list&lt;int&gt; op;\n    // Sorting the list\n    strandSort(ip, op);\n    // Printing the sorted list\n    for (auto x : op)\n        cout &lt;&lt; x &lt;&lt; \" \";\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_5","title":"Strand Sort in C","text":"<p>Sorting algorithms/Strand sort - Rosetta Code</p> <pre><code>#include &lt;stdio.h&gt;\n\ntypedef struct node_t *node, node_t;\nstruct node_t { int v; node next; };\ntypedef struct { node head, tail; } slist;\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_6","title":"Strand Sort in C","text":"<pre><code>void push(slist *l, node e) {\n    if (!l-&gt;head) l-&gt;head = e;\n    if (l-&gt;tail)  l-&gt;tail-&gt;next = e;\n    l-&gt;tail = e;\n}\n\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_7","title":"Strand Sort in C","text":"<pre><code>node removehead(slist *l) {\n    node e = l-&gt;head;\n    if (e) {\n        l-&gt;head = e-&gt;next;\n        e-&gt;next = 0;\n    }\n    return e;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_8","title":"Strand Sort in C","text":"<pre><code>void join(slist *a, slist *b) {\n    push(a, b-&gt;head);\n    a-&gt;tail = b-&gt;tail;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_9","title":"Strand Sort in C","text":"<pre><code>void merge(slist *a, slist *b) {\n    slist r = {0};\n    while (a-&gt;head &amp;&amp; b-&gt;head)\n        push(&amp;r, removehead(a-&gt;head-&gt;v &lt;= b-&gt;head-&gt;v ? a : b));\n\n    join(&amp;r, a-&gt;head ? a : b);\n    *a = r;\n    b-&gt;head = b-&gt;tail = 0;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_10","title":"Strand Sort in C","text":"<pre><code>void sort(int *ar, int len)\n{\n    node_t all[len];\n\n    // array to list\n    for (int i = 0; i &lt; len; i++)\n        all[i].v = ar[i], all[i].next = i &lt; len - 1 ? all + i + 1 : 0;\n\n    slist list = {all, all + len - 1}, rem, strand = {0},  res = {0};\n\n    for (node e = 0; list.head; list = rem) {\n        rem.head = rem.tail = 0;\n        while ((e = removehead(&amp;list)))\n            push((!strand.head || e-&gt;v &gt;= strand.tail-&gt;v) ? &amp;strand : &amp;rem, e);\n\n        merge(&amp;res, &amp;strand);\n    }\n\n    // list to array\n    for (int i = 0; res.head; i++, res.head = res.head-&gt;next)\n        ar[i] = res.head-&gt;v;\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_11","title":"Strand Sort in C","text":"<pre><code>void show(const char *title, int *x, int len)\n{\n    printf(\"%s \", title);\n    for (int i = 0; i &lt; len; i++)\n        printf(\"%3d \", x[i]);\n    putchar('\\n');\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#strand-sort-in-c_12","title":"Strand Sort in C","text":"<pre><code>#   define SIZE sizeof(x)/sizeof(int)\n\nint main(void)\n{\n    int x[] = {-2,0,-2,5,5,3,-1,-3,5,5,0,2,-4,4,2};\n\n    show(\"before sort:\", x, SIZE);\n    sort(x, sizeof(x)/sizeof(int));\n    show(\"after sort: \", x, SIZE);\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrays","title":"Arrays","text":"<ul> <li>Geeks for Geeks </li> <li>Array Data Structure - GeeksforGeeks</li> <li>Data structures Tutorials - Arrays</li> <li>Circular array - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array","title":"What is an Array?","text":"<ul> <li>Whenever we want to work with large number of data values, <ul> <li>we need to use that much number of different variables. </li> </ul> </li> <li>As the number of variables are increasing, <ul> <li>complexity of the program also increases and programmers get confused with the variable names. </li> </ul> </li> <li>There may be situations in which we need to work with large number of similar data values. - To make this work more easy, C programming language provides a concept called \"Array\".</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_1","title":"What is an Array?","text":"<p>An array is a variable which can store multiple values of same data type at a time.</p> <p>An array can also be defined as follows...</p> <p>\"Collection of similar data items stored in continuous memory locations with single name\".</p> <p>To understand the concept of arrays, consider the following example declaration.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_2","title":"What is an Array?","text":"<p>int a, b, c</p> <ul> <li>Here, the compiler allocates 2 bytes of memory with name 'a', another 2 bytes of memory with name 'b' and more 2 bytes with name 'c'. </li> <li>These three memory locations are may be in sequence or may not be in sequence. Here these individual variables store only one value at a time.</li> </ul> <p></p> <ul> <li>Now consider the following declaration...</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_3","title":"What is an Array?","text":"<p>int a[3];</p> <ul> <li>Here, the compiler allocates total 6 bytes of continuous memory locations with single name 'a'. But allows to store three different integer values (each in 2 bytes of memory) at a time. </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_4","title":"What is an Array?","text":"<ul> <li>And memory is organized as follows</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_5","title":"What is an Array?","text":"<ul> <li>That means all these three memory locations are named as 'a'. </li> <li>But \"how can we refer individual elements?\" is the big question. </li> <li>Answer for this question is, compiler not only allocates memory, <ul> <li>but also assigns a numerical value to each individual element of an array. </li> <li>This numerical value is called as \"<code>Index</code>\". </li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_6","title":"What is an Array?","text":"<ul> <li><code>Index</code> values for the above example are as follows...</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_7","title":"What is an Array?","text":"<ul> <li>The individual elements of an array are identified using the combination of <code>name</code> and <code>index</code> as follows...<ul> <li><code>arrayName[indexValue]</code></li> </ul> </li> <li>For the above example, the individual elements can be referred as follows...</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-an-array_8","title":"What is an Array?","text":"<p>If I want to assign a value to any of these memory locations (array elements), we can assign as follows...     - <code>a[1] = 100</code>;</p> <p>The result will be as follows...</p> <p></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#types-of-arrays-in-c","title":"Types of Arrays in C","text":"<ul> <li>In c programming language, arrays are classified into\u00a0two types. They are as follows...<ul> <li> <ol> <li>Single Dimensional Array / One Dimensional Array</li> </ol> </li> <li> <ol> <li>Multi Dimensional Array</li> </ol> </li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#single-dimensional-array","title":"Single Dimensional Array","text":"<ul> <li>In c programming language, <ul> <li>single dimensional arrays are used to store list of values of same datatype. </li> <li>In other words, single dimensional arrays are used to store a row of values. </li> </ul> </li> <li>In single dimensional array, data is stored in linear form. </li> <li>Single dimensional arrays are also called as\u00a0<ul> <li>one-dimensional arrays,\u00a0</li> <li>Linear Arrays\u00a0or simply\u00a0</li> <li>1-D Arrays.</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#declaration-of-single-dimensional-array","title":"Declaration of Single Dimensional Array","text":"<ul> <li>We use the following general syntax for declaring a single dimensional array...</li> </ul> <pre><code>datatype arrayName [ size ] ;\n</code></pre> <pre><code>int rollNumbers [60] ;\n</code></pre> <p>The above declaration of single dimensional array reserves 60 continuous memory locations of 2 bytes each with the name\u00a0rollNumbers\u00a0and tells the compiler to allow only integer values into those memory locations.</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#initialization-of-single-dimensional-array","title":"Initialization of Single Dimensional Array","text":"<ul> <li>We use the following general syntax for declaring and initializing a single dimensional array with size and initial values.</li> </ul> <pre><code>datatype arrayName [ size ] = {value1, value2, ...} ;\n</code></pre> <pre><code>int marks [6] = { 89, 90, 76, 78, 98, 86 } ;\n</code></pre> <ul> <li>The above declaration of single dimensional array reserves 6 contiguous memory locations of 2 bytes each with the name\u00a0marks\u00a0and initializes with value <code>89</code> in first memory location, <code>90</code> in second memory location, <code>76</code> in third memory location, <code>78</code> in fourth memory location, <code>98</code> in fifth memory location and <code>86</code> in sixth memory location.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#initialization-of-single-dimensional-array_1","title":"Initialization of Single Dimensional Array","text":"<ul> <li>We can also use the following general syntax to intialize a single dimensional array without specifying size and with initial values.</li> </ul> <pre><code>datatype arrayName [ ] = {value1, value2, ...} ;\n</code></pre> <p>The array must be initialized if it is created without specifying any size. In this case, the size of the array is decided based on the number of values initialized</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#initialization-of-single-dimensional-array_2","title":"Initialization of Single Dimensional Array","text":"<pre><code>int marks [] = { 89, 90, 76, 78, 98, 86 } ;\nchar studentName [] = \"btechsmartclass\";\n</code></pre> <ul> <li>In the above example declaration, size of the array\u00a0<code>marks</code>\u00a0is\u00a0<code>6</code>\u00a0and the size of the array\u00a0<code>studentName</code>\u00a0is\u00a0<code>16</code>. </li> <li>This is because in case of character array, compiler stores one exttra character called\u00a0<code>\\0</code> <code>(NULL)</code> at the end.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#accessing-elements-of-single-dimensional-array","title":"Accessing Elements of Single Dimensional Array","text":"<ul> <li>In c programming language, to access the elements of single dimensional array we use array name followed by index value of the element that to be accessed. </li> <li>Here the index value must be enclosed in square braces.\u00a0</li> <li><code>Index</code>\u00a0value of an element in an array is the reference number given to each element at the time of memory allocation. </li> <li>The index value of single dimensional array starts with zero (0) for first element and incremented by one for each element. </li> <li>The index value in an array is also called as\u00a0<code>subscript</code>\u00a0or\u00a0<code>indices</code>.  </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#accessing-elements-of-single-dimensional-array_1","title":"Accessing Elements of Single Dimensional Array","text":"<ul> <li>We use the following general syntax to access individual elements of single dimensional array...</li> </ul> <pre><code>arrayName [ indexValue ]\n</code></pre> <pre><code>marks [2] = 99 ;\n</code></pre> <ul> <li>In the above statement, the third element of\u00a0'marks'\u00a0array is assinged with value\u00a0'99'.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#multi-dimensional-array","title":"Multi Dimensional Array","text":"<ul> <li>An array of arrays is called as multi dimensional array. </li> <li>In simple words, an array created with more than one dimension (size) is called as multi dimensional array. </li> <li>Multi dimensional array can be of\u00a0two dimensional array\u00a0or\u00a0three dimensional array\u00a0or\u00a0four dimensional array\u00a0or more</li> <li>Most popular and commonly used multi dimensional array is\u00a0two dimensional array. The 2-D arrays are used to store data in the form of table. </li> <li>We also use 2-D arrays to create mathematical\u00a0matrices.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#declaration-of-two-dimensional-array","title":"Declaration of Two Dimensional Array","text":"<ul> <li>We use the following general syntax for declaring a two dimensional array</li> </ul> <pre><code>datatype arrayName [ rowSize ] [ columnSize ] ;\n</code></pre> <pre><code>int matrix_A [2][3] ;\n</code></pre> <ul> <li>The above declaration of two dimensional array reserves 6 continuous memory locations of 2 bytes each in the form of\u00a02 rows\u00a0and\u00a03 columns.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#initialization-of-two-dimensional-array","title":"Initialization of Two Dimensional Array","text":"<ul> <li>We use the following general syntax for declaring and initializing a two dimensional array with specific number of rows and coloumns with initial values</li> </ul> <pre><code>datatype arrayName [rows][colmns] = {\n                                     {r1c1value, r1c2value, ...},\n                                     {r2c1,r2c2,...}\n                                     ...} ;\n</code></pre> <pre><code>int matrix_A [2][3] = { {1, 2, 3},{4, 5, 6} } ;\n</code></pre> <ul> <li>The above declaration of two-dimensional array reserves 6 contiguous memory locations of 2 bytes each in the form of 2 rows and 3 columns. </li> <li>And the first row is initialized with values 1, 2 &amp; 3 and second row is initialized with values 4, 5 &amp; 6.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#initialization-of-two-dimensional-array_1","title":"Initialization of Two Dimensional Array","text":"<p>We can also initialize as follows...</p> <pre><code>int matrix_A [2][3] = {\n                        {1, 2, 3},\n                        {4, 5, 6} \n                      } ;\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#accessing-individual-elements-of-two-dimensional-array","title":"Accessing Individual Elements of Two Dimensional Array","text":"<ul> <li>In a c programming language, to access elements of a two-dimensional array we use array name followed by row index value and column index value of the element that to be accessed. </li> <li>Here the row and column index values must be enclosed in separate square braces. </li> <li>In case of the two-dimensional array the compiler assigns separate index values for rows and columns.  </li> <li>We use the following general syntax to access the individual elements of a two-dimensional array...</li> </ul> <pre><code>arrayName [ rowIndex ] [ columnIndex ]\n</code></pre> <pre><code>matrix_A [0][1] = 10 ;\n</code></pre> <ul> <li>In the above statement, the element with row index 0 and column index 1 of\u00a0matrix_A\u00a0array is assinged with value\u00a010.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array","title":"Circular Array","text":"<ul> <li>An\u00a0array\u00a0is called circular if we consider the first element as next of the last element. </li> <li>Circular arrays are used to implement queue (Refer to\u00a0this\u00a0and\u00a0this).  </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array_1","title":"Circular Array","text":"<p>An example problem :  Suppose n people are sitting at a circular table with names A, B, C, D, ... Given a name, we need to print all n people (in order) starting from the given name.\u00a0 </p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array_2","title":"Circular Array","text":"<ul> <li>For example, consider \\(6\\) people \\(A \\ B \\ C \\ D \\  E \\ F\\) and given name as \\(D\\). People sitting in a circular manner starting from \\(D\\) are \\(D \\ E \\ F \\ A \\ B \\ C\\).  </li> <li>A\u00a0simple solution\u00a0is to create an auxiliary array of size \\(2 \\times n\\) and store it in another array. For example for \\(6\\) people, we create below the auxiliary array.\u00a0  </li> <li>\\(A \\ B \\ C \\ D \\ E \\ F \\ A \\ B \\ C \\ D \\ E \\ F\\) </li> <li> <p>Now for any given index, we simply print n elements starting from it. For example, we print the following \\(6\\).</p> </li> <li> <p>A B C\u00a0D E F A B C\u00a0D E F</p> </li> <li> <p>Below is the implementation of the above approach.</p> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array-in-c","title":"Circular Array in C++","text":"<pre><code>// CPP program to demonstrate use of circular\n// array using extra memory space\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid print(char a[], int n, int ind)\n{\n    // Create an auxiliary array of twice size.\n    char b[(2 * n)];\n\n    // Copy a[] to b[] two times\n    for (int i = 0; i &lt; n; i++)\n        b[i] = b[n + i] = a[i];\n\n    // print from ind-th index to (n+i)th index.\n    for (int i = ind; i &lt; n + ind; i++)\n        cout &lt;&lt; b[i] &lt;&lt; \" \";\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array-in-c_1","title":"Circular Array in C++","text":"<pre><code>// Driver code\nint main()\n{\n    char a[] = { 'A', 'B', 'C', 'D', 'E', 'F' };\n    int n = sizeof(a) / sizeof(a[0]);\n    print(a, n, 3);\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array-in-java","title":"Circular Array in Java","text":"<pre><code>// Java program to demonstrate use of circular\n// array using extra memory space\nimport java.util.*;\nimport java.lang.*;\n\npublic class GfG{\n\n    public static void print(char a[], int n,\n                                int ind){\n\n        // Create an auxiliary array\n        // of twice size.\n        char[] b = new char[(2 * n)];\n\n        // Copy a[] to b[] two times\n        for (int i = 0; i &lt; n; i++)\n            b[i] = b[n + i] = a[i];\n\n        // print from ind-th index to\n        // (n+i)th index.\n        for (int i = ind; i &lt; n + ind; i++)\n            System.out.print(b[i]+\" \");\n    }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array-in-java_1","title":"Circular Array in Java","text":"<pre><code>...\n    // Driver code\n    public static void main(String argc[]){\n        char[] a = new char[]{ 'A', 'B', 'C',\n                            'D', 'E', 'F' };\n        int n = 6;\n        print(a, n, 3);\n    }\n}\n\n/* This code is contributed by Sagar Shukla */\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array-in-c_2","title":"Circular Array in C","text":"<pre><code>// C# program to demonstrate use of circular\n// array using extra memory space\nusing System;\n\npublic class GfG {\n\n    public static void print(char[] a, int n,\n                                    int ind)\n    {\n        // Create an auxiliary array\n        // of twice size.\n        char[] b = new char[(2 * n)];\n\n        // Copy a[] to b[] two times\n        for (int i = 0; i &lt; n; i++)\n            b[i] = b[n + i] = a[i];\n\n        // print from ind-th index to\n        // (n+i)th index.\n        for (int i = ind; i &lt; n + ind; i++)\n            Console.Write(b[i] + \" \");\n    }\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#circular-array-in-c_3","title":"Circular Array in C","text":"<pre><code>...\n    // Driver code\n    public static void Main()\n    {\n        char[] a = new char[] { 'A', 'B', 'C',\n                                'D', 'E', 'F' };\n        int n = 6;\n        print(a, n, 3);\n    }\n}\n\n/* This code is contributed by vt_m*/\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations","title":"Array Rotations","text":"<ul> <li>Geeks for Geeks</li> <li>Program for array rotation - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations_1","title":"Array Rotations","text":"<ul> <li>Given an array of integers\u00a0<code>arr[]</code>\u00a0of size\u00a0<code>N</code>\u00a0and an integer, the task is to rotate the array elements to the\u00a0<code>left</code>\u00a0by\u00a0<code>d</code>\u00a0positions.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-example","title":"Array Rotations - Example","text":"<p>Input <code>arr[] = {1, 2, 3, 4, 5, 6, 7}</code>,<code>d = 2</code> Output <code>3 4 5 6 7 1 2</code></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-example_1","title":"Array Rotations - Example","text":"<p>Input: <code>arr[] = {3, 4, 5, 6, 7, 1, 2}</code>, <code>d=2</code> Output: <code>5 6 7 1 2 3 4</code></p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations_2","title":"Array Rotations","text":"<p>Approach 1 (Using temp array)\u00a0 - This problem can be solved using the below idea:     - After rotating\u00a0d\u00a0positions to the left,      - the first\u00a0d\u00a0elements become the last\u00a0d\u00a0elements of the array     - First store the elements from index\u00a0d\u00a0to\u00a0N-1\u00a0into the temp array.     - Then store the first\u00a0d\u00a0elements of the original array into the temp array.     - Copy back the elements of the temp array into the original array</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations_3","title":"Array Rotations","text":"<ul> <li>Suppose the give array is\u00a0arr[] = [1, 2, 3, 4, 5, 6, 7],\u00a0d = 2.</li> <li>First Step: <ul> <li>=&gt; Store the elements from 2<sup>nd</sup> index to the last.  </li> <li>=&gt;\u00a0temp[] = [3, 4, 5, 6, 7]</li> </ul> </li> <li>Second Step: <ul> <li>=&gt; Now store the first 2 elements into the temp[] array.  </li> <li>=&gt;\u00a0temp[] = [3, 4, 5, 6, 7, 1, 2]</li> </ul> </li> <li>Third Steps: <ul> <li>=&gt; Copy the elements of the temp[] array into the original array.  </li> <li>=&gt;\u00a0arr[] = temp[]\u00a0So\u00a0arr[] = [3, 4, 5, 6, 7, 1, 2]</li> </ul> </li> </ul> <p>Follow the steps below to solve the given problem.\u00a0</p>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations_4","title":"Array Rotations","text":"<ul> <li>Initialize a temporary array(temp[n]) of length same as the original array</li> <li>Initialize an integer(k) to keep a track of the current index</li> <li>Store the elements from the position\u00a0d\u00a0to\u00a0n-1\u00a0in the temporary array</li> <li>Now, store\u00a00\u00a0to\u00a0d-1\u00a0elements of the original array in the temporary array</li> <li>Lastly, copy back the temporary array to the original array</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-c","title":"Array Rotations in C++","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#include-bitsstdch-using-namespace-std-fuction-to-rotate-array-void-rotateint-arr-int-d-int-n-storing-rotated-version-of-array-int-tempn-keepig-track-of-the-current-index-of-temp-int-k-0-storing-the-n-d-elements-of-array-arr-to-the-front-of-temp-for-int-i-d-i-n-i-tempk-arri-k-storing-the-first-d-elements-of-array-arr-into-temp-for-int-i-0-i-d-i-tempk-arri-k-copying-the-elements-of-temp-in-arr-to-get-the-final-rotated-array-for-int-i-0-i-n-i-arri-tempi","title":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Fuction to rotate array\nvoid Rotate(int arr[], int d, int n)\n{\n    // Storing rotated version of array\n    int temp[n];\n\n    // Keepig track of the current index\n    // of temp[]\n    int k = 0;\n\n    // Storing the n - d elements of\n    // array arr[] to the front of temp[]\n    for (int i = d; i &lt; n; i++) {\n        temp[k] = arr[i];\n        k++;\n    }\n\n    // Storing the first d elements of array arr[]\n    // into temp\n    for (int i = 0; i &lt; d; i++) {\n        temp[k] = arr[i];\n        k++;\n    }\n\n    // Copying the elements of temp[] in arr[]\n    // to get the final rotated array\n    for (int i = 0; i &lt; n; i++) {\n        arr[i] = temp[i];\n    }\n}\n\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-c_1","title":"Array Rotations in C++","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#function-to-print-elements-of-array-void-printthearrayint-arr-int-n-for-int-i-0-i-n-i-cout-arri","title":"<pre><code>// Function to print elements of array\nvoid PrintTheArray(int arr[], int n)\n{\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n}\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-c_2","title":"Array Rotations in C++","text":"<pre><code>// Driver code\nint main()\n{\n    int arr[] = { 1, 2, 3, 4, 5, 6, 7 };\n    int N = sizeof(arr) / sizeof(arr[0]);\n    int d = 2;\n\n    // Function calling\n    Rotate(arr, d, N);\n    PrintTheArray(arr, N);\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-java","title":"Array Rotations in Java","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\n\nclass GFG {\n\n\n// Fuction to rotate array\nstatic void Rotate(int arr[], int d, int n)\n{\n    // Storing rotated version of array\n    int temp[] = new int[n];\n\n    // Keepig track of the current index\n    // of temp[]\n    int k = 0;\n\n    // Storing the n - d elements of\n    // array arr[] to the front of temp[]\n    for (int i = d; i &lt; n; i++) {\n        temp[k] = arr[i];\n        k++;\n    }\n\n    // Storing the first d elements of array arr[]\n    // into temp\n    for (int i = 0; i &lt; d; i++) {\n        temp[k] = arr[i];\n        k++;\n    }\n\n    // Copying the elements of temp[] in arr[]\n    // to get the final rotated array\n    for (int i = 0; i &lt; n; i++) {\n        arr[i] = temp[i];\n    }\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-java_1","title":"Array Rotations in Java","text":"<pre><code>// Function to print elements of array\nstatic void PrintTheArray(int arr[], int n)\n{\n    for (int i = 0; i &lt; n; i++) {\n        System.out.print(arr[i]+\" \");\n    }\n}\n    public static void main (String[] args) {\n        int arr[] = { 1, 2, 3, 4, 5, 6, 7 };\n        int N = arr.length;\n        int d = 2;\n\n        // Function calling\n        Rotate(arr, d, N);\n        PrintTheArray(arr, N);\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-c_3","title":"Array Rotations in C","text":"<pre><code>// Include namespace system\nusing System;\n\npublic class GFG\n{\n// Fuction to rotate array\npublic static void Rotate(int[] arr, int d, int n)\n{\n    // Storing rotated version of array\n    int[] temp = new int[n];\n\n    // Keepig track of the current index\n    // of temp[]\n    var k = 0;\n    // Storing the n - d elements of\n    // array arr[] to the front of temp[]\n    for (int i = d; i &lt; n; i++)\n    {\n    temp[k] = arr[i];\n    k++;\n    }\n\n    // Storing the first d elements of array arr[]\n    // into temp\n    for (int i = 0; i &lt; d; i++)\n    {\n    temp[k] = arr[i];\n    k++;\n    }\n\n    // Copying the elements of temp[] in arr[]\n    // to get the final rotated array\n    for (int i = 0; i &lt; n; i++)\n    {\n    arr[i] = temp[i];\n    }\n}\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-c_4","title":"Array Rotations in C","text":"<pre><code>// Function to print elements of array\npublic static void PrintTheArray(int[] arr, int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n    Console.Write(arr[i].ToString() + \" \");\n    }\n}\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-rotations-in-c_5","title":"Array Rotations in C","text":"<pre><code>public static void Main(String[] args)\n{\n    int[] arr = {1, 2, 3, 4, 5, 6, 7};\n    var N = arr.Length;\n    var d = 2;\n\n    // Function calling\n    GFG.Rotate(arr, d, N);\n    GFG.PrintTheArray(arr, N);\n}\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement","title":"Arrangement Rearrangement","text":"<ul> <li>Geeks for Geeks</li> <li>Array Rearrangement - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement_1","title":"Arrangement Rearrangement","text":"<ul> <li>Rearrange an array such that <code>arr[i] = i</code></li> <li>Given an array of elements of length <code>N</code>, ranging from <code>0</code> to <code>N \u2013 1</code>. </li> <li>All elements may not be present in the array. </li> <li>If the element is not present then there will be <code>-1</code> present in the array. </li> <li>Rearrange the array such that <code>A[i] = i</code> and if <code>i</code> is not present, <ul> <li>display <code>-1</code> at that place.</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-example","title":"Arrangement Rearrangement - Example","text":"<ul> <li>Input :  <code>arr = {-1, -1, 6, 1, 9, 3, 2, -1, 4, -1}</code></li> <li>Output :  <code>[-1, 1, 2, 3, 4, -1, 6, -1, -1, 9]</code></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-example_1","title":"Arrangement Rearrangement - Example","text":"<ul> <li>Input :  <code>arr = {19, 7, 0, 3, 18, 15, 12, 6, 1, 8,               11, 10, 9, 5, 13, 16, 2, 14, 17, 4}</code></li> <li>Output :  <code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,           11, 12, 13, 14, 15, 16, 17, 18, 19]</code></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-naive-approach","title":"Arrangement Rearrangement - Naive Approach","text":"<ol> <li>Nav\u00adi\u00adgate the numbers from 0 to n-1.</li> <li>Now navigate through array.</li> <li>If (i==a[j]) , then replace the element at i position with a[j] position.</li> <li>If there is any element in which -1 is used instead of the number then it will be replaced automatically.</li> <li>Now, iterate through the array and check if (a[i]!=i) , if it s true then replace a[i] with -1.</li> </ol>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c","title":"Arrangement Rearrangement in C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#c-program-for-above-approach-include-stdioh-function-to-transform-the-array-void-fixarrayint-ar-int-n-int-i-j-temp-iterate-over-the-array-for-i-0-i-n-i-for-j-0-j-n-j-check-is-any-arj-exists-such-that-arj-is-equal-to-i-if-arj-i-temp-arj-arj-ari-ari-temp-break","title":"<pre><code>// C program for above approach\n#include &lt;stdio.h&gt;\n\n// Function to transform the array\nvoid fixArray(int ar[], int n)\n{\n    int i, j, temp;\n\n    // Iterate over the array\n    for (i = 0; i &lt; n; i++)\n    {\n        for (j = 0; j &lt; n; j++)\n        {\n            // Check is any ar[j]\n            // exists such that\n            // ar[j] is equal to i\n            if (ar[j] == i) {\n                temp = ar[j];\n                ar[j] = ar[i];\n                ar[i] = temp;\n                break;\n            }\n        }\n    }\n\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_1","title":"Arrangement Rearrangement in C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#iterate-over-array-for-i-0-i-n-i-if-not-present-if-ari-i-ari-1","title":"<pre><code>...\n    // Iterate over array\n    for (i = 0; i &lt; n; i++)\n    {\n        // If not present\n        if (ar[i] != i)\n        {\n            ar[i] = -1;\n        }\n    }\n\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_2","title":"Arrangement Rearrangement in C","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#print-the-output-printfarray-after-rearrangingn-for-i-0-i-n-i-printfd-ari","title":"<pre><code>...\n    // Print the output\n    printf(\"Array after Rearranging\\n\");\n    for (i = 0; i &lt; n; i++) {\n        printf(\"%d \",ar[i]);\n    }\n}\n\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_3","title":"Arrangement Rearrangement in C","text":"<pre><code>// Driver Code\nint main()\n{\n    int n, ar[] = { -1, -1, 6, 1, 9, 3, 2, -1, 4, -1 };\n    n = sizeof(ar) / sizeof(ar[0]);\n\n    // Function Call\n    fixArray(ar, n);\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_4","title":"Arrangement Rearrangement in C++","text":"<pre><code>// C++ program for above approach\n#include &lt;iostream&gt;\nusing namespace std;\n\n// Function to transform the array\nvoid fixArray(int ar[], int n)\n{\n    int i, j, temp;\n\n    // Iterate over the array\n    for (i = 0; i &lt; n; i++)\n    {\n        for (j = 0; j &lt; n; j++)\n        {\n            // Check is any ar[j]\n            // exists such that\n            // ar[j] is equal to i\n            if (ar[j] == i) {\n                temp = ar[j];\n                ar[j] = ar[i];\n                ar[i] = temp;\n                break;\n            }\n        }\n    }\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_5","title":"Arrangement Rearrangement in C++","text":"<pre><code>    // Iterate over array\n    for (i = 0; i &lt; n; i++)\n    {\n        // If not present\n        if (ar[i] != i)\n        {\n            ar[i] = -1;\n        }\n    }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_6","title":"Arrangement Rearrangement in C++","text":"<pre><code>...\n    // Print the output\n    cout &lt;&lt; \"Array after Rearranging\" &lt;&lt; endl;\n    for (i = 0; i &lt; n; i++) {\n        cout &lt;&lt; ar[i] &lt;&lt; \" \";\n    }\n}\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_7","title":"Arrangement Rearrangement in C++","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#driver-code-int-main-int-n-ar-1-1-6-1-9-3-2-1-4-1-n-sizeofar-sizeofar0-function-call-fixarrayar-n","title":"<pre><code>...\n// Driver Code\nint main()\n{\n    int n, ar[] = { -1, -1, 6, 1, 9, 3, 2, -1, 4, -1 };\n    n = sizeof(ar) / sizeof(ar[0]);\n\n    // Function Call\n    fixArray(ar, n);\n}\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-java","title":"Arrangement Rearrangement in Java","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#java-program-for-above-approach-class-gfg-function-to-transform-the-array-public-static-void-fixarrayint-ar-int-n-int-i-j-temp-iterate-over-the-array-fori-0-i-n-i-forj-0-j-n-j-check-is-any-arj-exists-such-that-arj-is-equal-to-i-if-arj-i-temp-arj-arj-ari-ari-temp-break","title":"<pre><code>// Java program for above approach\nclass GFG{\n\n// Function to transform the array\npublic static void fixArray(int ar[], int n)\n{\n    int i, j, temp;\n\n    // Iterate over the array\n    for(i = 0; i &lt; n; i++)\n    {\n        for(j = 0; j &lt; n; j++)\n        {\n\n            // Check is any ar[j]\n            // exists such that\n            // ar[j] is equal to i\n            if (ar[j] == i)\n            {\n                temp = ar[j];\n                ar[j] = ar[i];\n                ar[i] = temp;\n                break;\n            }\n        }\n    }\n\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-java_1","title":"Arrangement Rearrangement in Java","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#iterate-over-array-fori-0-i-n-i-if-not-present-if-ari-i-ari-1","title":"<pre><code>...\n    // Iterate over array\n    for(i = 0; i &lt; n; i++)\n    {\n\n        // If not present\n        if (ar[i] != i)\n        {\n            ar[i] = -1;\n        }\n    }\n\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-java_2","title":"Arrangement Rearrangement in Java","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#print-the-output-systemoutprintlnarray-after-rearranging-fori-0-i-n-i-systemoutprintari","title":"<pre><code>...\n    // Print the output\n    System.out.println(\"Array after Rearranging\");\n    for(i = 0; i &lt; n; i++)\n    {\n        System.out.print(ar[i] + \" \");\n    }\n}\n\n...\n</code></pre>","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-java_3","title":"Arrangement Rearrangement in Java","text":"<pre><code>...\n// Driver Code\npublic static void main(String[] args)\n{\n    int n, ar[] = { -1, -1, 6, 1, 9,\n                    3, 2, -1, 4, -1 };\n    n = ar.length;\n\n    // Function Call\n    fixArray(ar, n);\n}\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_8","title":"Arrangement Rearrangement in C","text":"<pre><code>// C# program for above approach\nusing System;\nclass GFG {\n\n    // Function to transform the array\n    static void fixArray(int[] ar, int n)\n    {\n        int i, j, temp;\n\n        // Iterate over the array\n        for(i = 0; i &lt; n; i++)\n        {\n            for(j = 0; j &lt; n; j++)\n            {\n\n                // Check is any ar[j]\n                // exists such that\n                // ar[j] is equal to i\n                if (ar[j] == i)\n                {\n                    temp = ar[j];\n                    ar[j] = ar[i];\n                    ar[i] = temp;\n                    break;\n                }\n            }\n        }\n\n        // Iterate over array\n        for(i = 0; i &lt; n; i++)\n        {\n\n            // If not present\n            if (ar[i] != i)\n            {\n                ar[i] = -1;\n            }\n        }\n\n        // Print the output\n        Console.WriteLine(\"Array after Rearranging\");\n        for(i = 0; i &lt; n; i++)\n        {\n            Console.Write(ar[i] + \" \");\n        }\n    }\n    ...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#arrangement-rearrangement-in-c_9","title":"Arrangement Rearrangement in C","text":"<pre><code>static void Main() {\n        int[] ar = { -1, -1, 6, 1, 9,\n                    3, 2, -1, 4, -1 };\n        int n = ar.Length;\n\n        // Function Call\n        fixArray(ar, n);\n}\n}\n\n// This code is contributed by divyeshrabadiya07\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#array-searching-and-sorting","title":"Array Searching and Sorting","text":"<ul> <li>Geeks for Geeks </li> <li>Difference between Searching and Sorting Algorithms - GeeksforGeeks</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#difference-between-searching-and-sorting-algorithm","title":"Difference between Searching and Sorting Algorithm","text":"S.No. Searching Algorithm Sorting Algorithm 1. Searching Algorithms are designed to retrieve an element from any data structure where it is used. A Sorting Algorithm is used to arranging the data of list or array into some specific order. 2. These algorithms are generally classified into two categories i.e. Sequential Search and Interval Search. There are two different categories in sorting. These are Internal and External Sorting. 3. The worst-case time complexity of searching algorithm is O(N). The worst-case time complexity of many sorting algorithms like Bubble Sort, Insertion Sort, Selection Sort, and Quick Sort is O(N2). 4. There is no stable and unstable searching algorithms. Bubble Sort, Insertion Sort, Merge Sort etc are the stable sorting algorithms whereas Quick Sort, Heap Sort etc are the unstable sorting algorithms. 5. The Linear Search and the Binary Search are the examples of Searching Algorithms. The Bubble Sort, Insertion Sort, Selection Sort, Merge Sort, Quick Sort etc are the examples of Sorting Algorithms.","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix","title":"Matrix","text":"<ul> <li>Geeks for Geeks</li> <li>Matrix Archives - GeeksforGeeks</li> <li>CE100 Algorithms and Programming II - RTEU CE100 Algorithms and Programming-II Course Notes</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-examples","title":"Matrix Rotation - Examples","text":"<ul> <li>Given a matrix, clockwise rotate elements in it</li> <li>Input <pre><code>1    2    3\n4    5    6\n7    8    9\n</code></pre></li> <li>Output <pre><code>4    1    2\n7    5    3\n8    9    6\n</code></pre></li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-examples_1","title":"Matrix Rotation - Examples","text":"<p>For 4*4 matrix</p> <ul> <li>Input <pre><code>1    2    3    4    \n5    6    7    8\n9    10   11   12\n13   14   15   16\n</code></pre></li> </ul> <p>Output: </p><pre><code>5    1    2    3\n9    10   6    4\n13   11   7    8\n14   15   16   12\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-examples_2","title":"Matrix Rotation - Examples","text":"<ul> <li>The idea is to use loops similar to the\u00a0program for printing a matrix in spiral form. </li> <li>One by one rotate all rings of elements, starting from the outermost. </li> <li>To rotate a ring, we need to do following.<ul> <li> <ol> <li>Move elements of top row.\u00a0</li> </ol> </li> <li> <ol> <li>Move elements of last column.\u00a0</li> </ol> </li> <li> <ol> <li>Move elements of bottom row.\u00a0</li> </ol> </li> <li> <ol> <li>Move elements of first column.\u00a0</li> </ol> </li> </ul> </li> <li>Repeat above steps for inner ring while there is an inner ring.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-c","title":"Matrix Rotation in C++","text":"<pre><code>// C++ program to rotate a matrix\n\n#include &lt;bits/stdc++.h&gt;\n#define R 4\n#define C 4\nusing namespace std;\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-c_1","title":"Matrix Rotation in C++","text":"<pre><code>...\n\n// A function to rotate a matrix mat[][] of size R x C.\n// Initially, m = R and n = C\nvoid rotatematrix(int m, int n, int mat[R][C])\n{\n    int row = 0, col = 0;\n    int prev, curr;\n\n    /*\n    row - Starting row index\n    m - ending row index\n    col - starting column index\n    n - ending column index\n    i - iterator\n    */\n    while (row &lt; m &amp;&amp; col &lt; n)\n    {\n\n        if (row + 1 == m || col + 1 == n)\n            break;\n\n        // Store the first element of next row, this\n        // element will replace first element of current\n        // row\n        prev = mat[row + 1][col];\n\n        /* Move elements of first row from the remaining rows */\n        for (int i = col; i &lt; n; i++)\n        {\n            curr = mat[row][i];\n            mat[row][i] = prev;\n            prev = curr;\n        }\n        row++;\n\n        /* Move elements of last column from the remaining columns */\n        for (int i = row; i &lt; m; i++)\n        {\n            curr = mat[i][n-1];\n            mat[i][n-1] = prev;\n            prev = curr;\n        }\n        n--;\n\n        /* Move elements of last row from the remaining rows */\n        if (row &lt; m)\n        {\n            for (int i = n-1; i &gt;= col; i--)\n            {\n                curr = mat[m-1][i];\n                mat[m-1][i] = prev;\n                prev = curr;\n            }\n        }\n        m--;\n\n        /* Move elements of first column from the remaining rows */\n        if (col &lt; n)\n        {\n            for (int i = m-1; i &gt;= row; i--)\n            {\n                curr = mat[i][col];\n                mat[i][col] = prev;\n                prev = curr;\n            }\n        }\n        col++;\n    }\n\n...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-c_2","title":"Matrix Rotation in C++","text":"<pre><code>...\n    // Print rotated matrix\n    for (int i=0; i&lt;R; i++)\n    {\n        for (int j=0; j&lt;C; j++)\n        cout &lt;&lt; mat[i][j] &lt;&lt; \" \";\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-c_3","title":"Matrix Rotation in C++","text":"<pre><code>/* Driver program to test above functions */\nint main()\n{\n    // Test Case 1\n    int a[R][C] = { \n                {1, 2, 3, 4},\n                {5, 6, 7, 8},\n                {9, 10, 11, 12},\n                {13, 14, 15, 16} \n                };\n\n    // Test Case 2\n    /* int a[R][C] = {\n                    {1, 2, 3},\n                    {4, 5, 6},\n                    {7, 8, 9}\n                    };\n    */ \n\n  rotatematrix(R, C, a);\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-java","title":"Matrix Rotation in Java","text":"<pre><code>// Java program to rotate a matrix\nimport java.lang.*;\nimport java.util.*;\n\nclass GFG\n{\n    static int R = 4;\n    static int C = 4;\n\n    // A function to rotate a matrix\n    // mat[][] of size R x C.\n    // Initially, m = R and n = C\n    static void rotatematrix(int m,\n                    int n, int mat[][])\n    {\n        int row = 0, col = 0;\n        int prev, curr;\n\n        /*\n        row - Starting row index\n        m - ending row index\n        col - starting column index\n        n - ending column index\n        i - iterator\n        */\n        while (row &lt; m &amp;&amp; col &lt; n)\n        {\n\n            if (row + 1 == m || col + 1 == n)\n                break;\n\n            // Store the first element of next\n            // row, this element will replace\n            // first element of current row\n            prev = mat[row + 1][col];\n\n            // Move elements of first row\n            // from the remaining rows\n            for (int i = col; i &lt; n; i++)\n            {\n                curr = mat[row][i];\n                mat[row][i] = prev;\n                prev = curr;\n            }\n            row++;\n\n            // Move elements of last column\n            // from the remaining columns\n            for (int i = row; i &lt; m; i++)\n            {\n                curr = mat[i][n-1];\n                mat[i][n-1] = prev;\n                prev = curr;\n            }\n            n--;\n\n            // Move elements of last row\n            // from the remaining rows\n            if (row &lt; m)\n            {\n                for (int i = n-1; i &gt;= col; i--)\n                {\n                    curr = mat[m-1][i];\n                    mat[m-1][i] = prev;\n                    prev = curr;\n                }\n            }\n            m--;\n\n            // Move elements of first column\n            // from the remaining rows\n            if (col &lt; n)\n            {\n                for (int i = m-1; i &gt;= row; i--)\n                {\n                    curr = mat[i][col];\n                    mat[i][col] = prev;\n                    prev = curr;\n                }\n            }\n            col++;\n        }\n\n            // Print rotated matrix\n            for (int i = 0; i &lt; R; i++)\n            {\n                for (int j = 0; j &lt; C; j++)\n                System.out.print( mat[i][j] + \" \");\n                System.out.print(\"\\n\");\n            }\n    }\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-java_1","title":"Matrix Rotation in Java","text":"<pre><code>/* Driver program to test above functions */\n    public static void main(String[] args)\n    {\n    // Test Case 1\n    int a[][] = { \n                {1, 2, 3, 4},\n                {5, 6, 7, 8},\n                {9, 10, 11, 12},\n                {13, 14, 15, 16} \n                };\n\n    // Test Case 2\n    /* int a[][] = new int {\n                          {1, 2, 3},\n                          {4, 5, 6},\n                          {7, 8, 9}\n                        };*/\n    rotatematrix(R, C, a);\n\n    }\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-c_4","title":"Matrix Rotation in C","text":"<pre><code>// C# program to rotate a matrix\nusing System;\n\nclass GFG {\n\n    static int R = 4;\n    static int C = 4;\n\n    // A function to rotate a matrix\n    // mat[][] of size R x C.\n    // Initially, m = R and n = C\n    static void rotatematrix(int m,\n                        int n, int [,]mat)\n    {\n        int row = 0, col = 0;\n        int prev, curr;\n\n        /*\n        row - Starting row index\n        m - ending row index\n        col - starting column index\n        n - ending column index\n        i - iterator\n        */\n        while (row &lt; m &amp;&amp; col &lt; n)\n        {\n\n            if (row + 1 == m || col + 1 == n)\n                break;\n\n            // Store the first element of next\n            // row, this element will replace\n            // first element of current row\n            prev = mat[row + 1, col];\n\n            // Move elements of first row\n            // from the remaining rows\n            for (int i = col; i &lt; n; i++)\n            {\n                curr = mat[row,i];\n                mat[row, i] = prev;\n                prev = curr;\n            }\n            row++;\n\n            // Move elements of last column\n            // from the remaining columns\n            for (int i = row; i &lt; m; i++)\n            {\n                curr = mat[i,n-1];\n                mat[i, n-1] = prev;\n                prev = curr;\n            }\n            n--;\n\n            // Move elements of last row\n            // from the remaining rows\n            if (row &lt; m)\n            {\n                for (int i = n-1; i &gt;= col; i--)\n                {\n                    curr = mat[m-1,i];\n                    mat[m-1,i] = prev;\n                    prev = curr;\n                }\n            }\n            m--;\n\n            // Move elements of first column\n            // from the remaining rows\n            if (col &lt; n)\n            {\n                for (int i = m-1; i &gt;= row; i--)\n                {\n                    curr = mat[i,col];\n                    mat[i,col] = prev;\n                    prev = curr;\n                }\n            }\n            col++;\n        }\n\n            // Print rotated matrix\n            for (int i = 0; i &lt; R; i++)\n            {\n                for (int j = 0; j &lt; C; j++)\n                Console.Write( mat[i,j] + \" \");\n                Console.Write(\"\\n\");\n            }\n    }\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#matrix-rotation-in-c_5","title":"Matrix Rotation in C","text":"<pre><code>    /* Driver program to test above functions */\n    public static void Main()\n    {\n        // Test Case 1\n        int [,]a = { \n                {1, 2, 3, 4},\n                {5, 6, 7, 8},\n                {9, 10, 11, 12},\n                {13, 14, 15, 16} \n                };\n\n        // Test Case 2\n        /* int a[][] = new int {\n                            {1, 2, 3},\n                            {4, 5, 6},\n                            {7, 8, 9}\n                          };*/\n        rotatematrix(R, C, a);\n\n    }\n}\n\n// This code is contributed by nitin mittal.\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix","title":"Sparse Matrix","text":"<ul> <li>Geeks for Geeks</li> <li>Data Structures Tutorials - Sparse Matrix with an example</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-sparse-matrix","title":"What is Sparse Matrix?","text":"<ul> <li>In computer programming, a matrix can be defined with a 2-dimensional array. </li> <li>Any array with 'm' columns and 'n' rows represent a m X n matrix. </li> <li>There may be a situation in which a matrix contains more number of ZERO values than NON-ZERO values. <ul> <li>Such matrix is known as sparse matrix.</li> </ul> </li> <li>Sparse matrix is a matrix which contains very few non-zero elements.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#what-is-sparse-matrix_1","title":"What is Sparse Matrix?","text":"<ul> <li>When a sparse matrix is represented with a 2-dimensional array, <ul> <li>we waste a lot of space to represent that matrix. <ul> <li>For example, consider a matrix of size 100 X 100 containing only 10 non-zero elements. In this matrix, </li> <li>only 10 spaces are filled with non-zero values and remaining spaces of the matrix are filled with zero. </li> <li>That means, totally we allocate 100 X 100 X 2 = 20000 bytes of space to store this integer matrix. </li> <li>And to access these 10 non-zero elements we have to make scanning for 10000 times.</li> </ul> </li> </ul> </li> <li>To make it simple we use the following sparse matrix representation.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-representations","title":"Sparse Matrix Representations","text":"<ul> <li>A sparse matrix can be represented by using TWO representations, those are as follows<ul> <li>Triplet Representation (Array Representation)</li> <li>Linked Representation</li> </ul> </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-triplet-representation-array-representation","title":"Sparse Matrix - Triplet Representation (Array Representation)","text":"<ul> <li>In this representation, we consider only non-zero values along with their row and column index values. </li> <li>In this representation, the 0<sup>th</sup>\u00a0row stores the total number of rows, </li> <li>total number of columns and the total number of non-zero values in the sparse matrix.  </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-triplet-representation-array-representation_1","title":"Sparse Matrix - Triplet Representation (Array Representation)","text":"<ul> <li>For example, consider a matrix of size <code>5 x 6</code> containing <code>6</code> number of non-zero values. This matrix can be represented as shown in the image</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-triplet-representation-array-representation_2","title":"Sparse Matrix - Triplet Representation (Array Representation)","text":"<ul> <li>In above example matrix, there are only <code>6</code> non-zero elements ( those are <code>9, 8, 4, 2, 5 &amp; 2</code>) and matrix size is <code>5 X 6</code>. </li> <li>We represent this matrix as shown in the above image. </li> <li>Here the first row in the right side table is filled with values 5, 6 &amp; 6 which indicates that it is a sparse matrix with <code>5</code> rows, <code>6</code> columns &amp; <code>6</code> non-zero values. </li> <li>The second row is filled with <code>0, 4, &amp; 9</code> which indicates the non-zero value 9 is at the 0<sup>th</sup>-row 4<sup>th</sup> column in the Sparse matrix. </li> <li>In the same way, the remaining non-zero values also follow a similar pattern.</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-triplet-representation-array-representation-in-c","title":"Sparse Matrix - Triplet Representation (Array Representation) in C++","text":"<pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    // sparse matrix of class 5x6 with 6 non-zero values\n    int sparseMatrix[5][6] =\n    {\n        {0 , 0 , 0 , 0 , 9, 0 },\n        {0 , 8 , 0 , 0 , 0, 0 },\n        {4 , 0 , 0 , 2 , 0, 0 },\n        {0 , 0 , 0 , 0 , 0, 5 },\n        {0 , 0 , 2 , 0 , 0, 0 }\n    };\n\n    ...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-triplet-representation-array-representation-in-c_1","title":"Sparse Matrix - Triplet Representation (Array Representation) in C++","text":"<pre><code>...\n    // Finding total non-zero values in the sparse matrix\n    int size = 0;\n    for (int row = 0; row &lt; 5; row++)\n        for (int column = 0; column &lt; 6; column++)\n            if (sparseMatrix[row][column] != 0)\n                size++;\n\n    ...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-triplet-representation-array-representation-in-c_2","title":"Sparse Matrix - Triplet Representation (Array Representation) in C++","text":"<pre><code>...\n    // Defining result Matrix\n    int resultMatrix[3][size];\n\n    // Generating result matrix\n    int k = 0;\n    for (int row = 0; row &lt; 5; row++)\n        for (int column = 0; column &lt; 6; column++)\n            if (sparseMatrix[row][column] != 0)\n            {\n                resultMatrix[0][k] = row;\n                resultMatrix[1][k] = column;\n                resultMatrix[2][k] = sparseMatrix[row][column];\n                k++;\n            }\n    ...\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-triplet-representation-array-representation-in-c_3","title":"Sparse Matrix - Triplet Representation (Array Representation) in C++","text":"<pre><code>...\n    // Displaying result matrix\n    cout&lt;&lt;\"Triplet Representation : \"&lt;&lt;endl;\n    for (int row=0; row&lt;3; row++)\n    {\n        for (int column = 0; column&lt;size; column++)\n            cout&lt;&lt;resultMatrix[row][column]&lt;&lt;\" \";\n\n        cout&lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#output_2","title":"Output","text":"","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-linked-list-representation","title":"Sparse Matrix - Linked List Representation","text":"<ul> <li>In linked representation, we use a linked list data structure to represent a sparse matrix. </li> <li>In this linked list, we use two different nodes namely\u00a0header node\u00a0and\u00a0element node. </li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-linked-list-representation_1","title":"Sparse Matrix - Linked List Representation","text":"<ul> <li>Header node consists of three fields and element node consists of five fields as shown in the image</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-linked-list-representation_2","title":"Sparse Matrix - Linked List Representation","text":"<ul> <li>Consider the above same sparse matrix used in the Triplet representation. This sparse matrix can be represented using linked representation as shown in the below image...</li> </ul>","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-2-linkedlist/ce205-week-2-linkedlist/#sparse-matrix-linked-list-representation_3","title":"Sparse Matrix - Linked List Representation","text":"<ul> <li>In the above representation, <code>H0, H1,..., H5</code> indicates the header nodes which are used to represent indexes. </li> <li>Remaining nodes are used to represent non-zero elements in the matrix, <ul> <li>except the very first node which is used to represent abstract information of the sparse matrix (i.e., It is a matrix of 5 X 6 with 6 non-zero elements).  </li> </ul> </li> <li>In this representation, in each row and column, the last node right field points to its respective header node.</li> </ul> \\[ End-Of-Week-2 \\]","tags":["ce205-week-2","linked-lists","arrays","matrices","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/","title":"CE205 Data Structures Week-3","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#week-3","title":"Week-3","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stacks-queue-structures-and-related-algorithms-and-problems","title":"Stacks, Queue Structures, and Related Algorithms and Problems.","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#outline-1","title":"Outline-1","text":"<ul> <li>Stack ADT</li> <li>Stack Using Array</li> <li>Stack Using Linked List</li> <li>Expressions</li> <li>Infix</li> <li>Postfix</li> <li>Prefix</li> <li>Infix to Postfix Conversion</li> <li>Postfix Expression Evaluation</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#outline-2","title":"Outline-2","text":"<ul> <li>Queue ADT</li> <li>First Come First Serve, FCFS, FIFO</li> <li>Queue Data structure Using Array</li> <li>Queue Using Linked List</li> <li>Circular Queue Data structure</li> <li>Double Ended Queue Data structure</li> <li>Multilevel Queue (MLQ)</li> <li>Hanoi Tower</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-adt","title":"Stack ADT","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/stack-adt.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-data-structure","title":"Stack Data Structure","text":"<p>In this tutorial, you will learn about the stack data structure and its implementation in Python, Java and C/C++.</p> <p>A stack is a linear data structure that follows the principle of\u00a0Last In First Out (LIFO). This means the last element inserted inside the stack is removed first.</p> <p>You can think of the stack data structure as the pile of plates on top of another.</p> <p></p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-data-structure_1","title":"Stack Data Structure","text":"<ul> <li>Stack representation similar to a pile of plate</li> <li>Here, you can:</li> <li>Put a new plate on top</li> <li>Remove the top plate</li> <li>And, if you want the plate at the bottom, </li> <li>You must first remove all the plates on top. </li> <li>This is exactly how the stack data structure works.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#lifo-principle-of-stack","title":"LIFO Principle of Stack","text":"<ul> <li>In programming terms, putting an item on top of the stack is called\u00a0push\u00a0and removing an item is called\u00a0pop.</li> </ul> <ul> <li> <p>In the above image, although item\u00a03\u00a0was kept last, it was removed first. This is exactly how the\u00a0LIFO (Last In First Out) Principle\u00a0works.</p> </li> <li> <p>We can implement a stack in any programming language like C, C++, Java, Python or C#, but the specification is pretty much the same.</p> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#basic-operations-of-stack","title":"Basic Operations of Stack","text":"<ul> <li>Some basic operations allow us to perform different actions on a stack.</li> <li>Push: Add an element to the top of a stack</li> <li>Pop: Remove an element from the top of a stack</li> <li>IsEmpty: Check if the stack is empty</li> <li>IsFull: Check if the stack is full</li> <li>Peek: Get the value of the top element without removing it</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#working-of-stack-data-structure","title":"Working of Stack Data Structure","text":"<p>The operations work as follows:</p> <ol> <li>A pointer called\u00a0TOP\u00a0is used to keep track of the top element in the stack.</li> <li>When initializing the stack, we set its value to -1 so that we can check if the stack is empty by comparing\u00a0<code>TOP == -1</code>.</li> <li>On pushing an element, we increase the value of\u00a0TOP\u00a0and place the new element in the position pointed to by\u00a0TOP.</li> <li>On popping an element, we return the element pointed to by\u00a0TOP\u00a0and reduce its value.</li> <li>Before pushing, we check if the stack is already full</li> <li>Before popping, we check if the stack is already empty</li> </ol>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#working-of-stack-data-structure_1","title":"Working of Stack Data Structure","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-a-stack","title":"What is a Stack?","text":"<ul> <li>Stack is a linear data structure in which the insertion and deletion operations are performed at only one end. </li> <li>In a stack, adding and removing of elements are performed at a single position which is known as \"top\". </li> <li>That means, a new element is added at top of the stack and an element is removed from the top of the stack. </li> <li>In stack, the insertion and deletion operations are performed based on\u00a0LIFO\u00a0(Last In First Out) principle.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-a-stack_1","title":"What is a Stack?","text":"<p>In a stack, the insertion operation is performed using a function called\u00a0\"push\"\u00a0and deletion operation is performed using a function called\u00a0\"pop\".  </p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-a-stack_2","title":"What is a Stack?","text":"<ul> <li>In the figure, PUSH and POP operations are performed at a top position in the stack. </li> <li>That means, both the insertion and deletion operations are performed at one end (i.e., at Top)  </li> <li>A stack data structure can be defined as follows</li> <li>Stack is a linear data structure in which the operations are performed based on LIFO principle.</li> <li>Stack can also be defined as</li> <li>\"A Collection of similar data items in which both insertion and deletion operations are performed based on LIFO principle\".</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-example","title":"Stack Example","text":"<ul> <li>If we want to create a stack by inserting 10,45,12,16,35 and 50. </li> <li>Then 10 becomes the bottom-most element and 50 is the topmost element. </li> <li>The last inserted element 50 is at Top of the stack as shown in the image below.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-example_1","title":"Stack Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#operations-on-a-stack","title":"Operations on a Stack","text":"<ul> <li>The following operations are performed on the stack</li> <li>Push (To insert an element on to the stack)</li> <li>Pop (To delete an element from the stack)</li> <li>Display (To display elements of the stack)</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#implementation-of-a-stack","title":"Implementation of a Stack","text":"<ul> <li>Stack data structure can be implemented in two ways.</li> <li>Using Array</li> <li>Using Linked List</li> <li>When a stack is implemented using an array, that stack can organize an only limited number of elements. </li> <li>When a stack is implemented using a linked list, that stack can organize an unlimited number of elements.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-array","title":"Stack Using Array","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/stack-using-array.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-array_1","title":"Stack Using Array","text":"<ul> <li>A stack data structure can be implemented using a one-dimensional array. </li> <li>But stack implemented using array stores only a fixed number of data values. This implementation is very simple. </li> <li>Just define a one dimensional array of specific size and insert or delete the values into that array by using\u00a0LIFO principle\u00a0with the help of a variable called\u00a0'top'. </li> <li>Initially, the top is set to -1. </li> <li>Whenever we want to insert a value into the stack, increment the top value by one and then insert. </li> <li>Whenever we want to delete a value from the stack, then delete the top value and decrement the top value by one.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-array","title":"Stack Operations using Array","text":"<ul> <li>A stack can be implemented using array as follows</li> <li>Before implementing actual operations, first follow the below steps to create an empty stack.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-array_1","title":"Stack Operations using Array","text":"<ul> <li>Step 1 -\u00a0Include all the\u00a0header files\u00a0which are used in the program and define a constant\u00a0'SIZE'\u00a0with specific value.</li> <li>Step 2 -\u00a0Declare all the\u00a0functions\u00a0used in stack implementation.</li> <li>Step 3 -\u00a0Create a one dimensional array with fixed size (int stack[SIZE])</li> <li>Step 4 -\u00a0Define a integer variable\u00a0'top'\u00a0and initialize with\u00a0'-1'. (int top = -1)</li> <li>Step 5 -\u00a0In main method, display menu with list of operations and make suitable function calls to perform operation selected by the user on the stack.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-array_2","title":"Stack Operations using Array","text":"<p>push(value) - Inserting value into the stack</p> <ul> <li>In a stack, push() is a function used to insert an element into the stack. </li> <li>In a stack, the new element is always inserted at\u00a0top\u00a0position. </li> <li>Push function takes one integer value as parameter and inserts that value into the stack. We can use the following steps to push an element on to the stack</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-array_3","title":"Stack Operations using Array","text":"<ul> <li>Step 1 -\u00a0Check whether\u00a0stack\u00a0is\u00a0FULL. (top == SIZE-1)</li> <li>Step 2 -\u00a0If it is\u00a0FULL, then display\u00a0\"Stack is FULL!!! Insertion is not possible!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT FULL, then increment\u00a0top\u00a0value by one (top++) and set stack[top] to value (stack[top] = value).</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-array_4","title":"Stack Operations using Array","text":"<p>pop() - Delete a value from the Stack</p> <ul> <li>In a stack, pop() is a function used to delete an element from the stack. </li> <li>In a stack, the element is always deleted from\u00a0top\u00a0position. </li> <li>Pop function does not take any value as parameter. </li> <li>We can use the following steps to pop an element from the stack</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-array_5","title":"Stack Operations using Array","text":"<ul> <li>Step 1 -\u00a0Check whether\u00a0stack\u00a0is\u00a0EMPTY. (top == -1)</li> <li>Step 2 -\u00a0If it is\u00a0EMPTY, then display\u00a0\"Stack is EMPTY!!! Deletion is not possible!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT EMPTY, then delete\u00a0stack[top]\u00a0and decrement\u00a0top\u00a0value by one (top--).</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-array_6","title":"Stack Operations using Array","text":"<p>display() - Displays the elements of a Stack</p> <ul> <li>We can use the following steps to display the elements of a stack</li> <li>Step 1 -\u00a0Check whether\u00a0stack\u00a0is\u00a0EMPTY. (top == -1)</li> <li>Step 2 -\u00a0If it is\u00a0EMPTY, then display\u00a0\"Stack is EMPTY!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT EMPTY, then define a variable 'i' and initialize with top. Display\u00a0stack[i]\u00a0value and decrement\u00a0i\u00a0value by one (i--).</li> <li>Step 3 -\u00a0Repeat above step until\u00a0i\u00a0value becomes '0'.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c","title":"Stack Array Implementation in C","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\n#define SIZE 10\n\nvoid push(int);\nvoid pop();\nvoid display();\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_1","title":"Stack Array Implementation in C","text":"<pre><code>...\n\nint stack[SIZE], top = -1;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_2","title":"Stack Array Implementation in C","text":"<pre><code>...\n\nvoid main()\n{\n   int value, choice;\n   clrscr();\n   while(1){\n      printf(\"\\n\\n***** MENU *****\\n\");\n      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\");\n      printf(\"\\nEnter your choice: \");\n      scanf(\"%d\",&amp;choice);\n      switch(choice){\n     case 1: printf(\"Enter the value to be insert: \");\n         scanf(\"%d\",&amp;value);\n         push(value);\n         break;\n     case 2: pop();\n         break;\n     case 3: display();\n         break;\n     case 4: exit(0);\n     default: printf(\"\\nWrong selection!!! Try again!!!\");\n      }\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_3","title":"Stack Array Implementation in C","text":"<pre><code>...\n\nvoid push(int value){\n   if(top == SIZE-1)\n      printf(\"\\nStack is Full!!! Insertion is not possible!!!\");\n   else{\n      top++;\n      stack[top] = value;\n      printf(\"\\nInsertion success!!!\");\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_4","title":"Stack Array Implementation in C","text":"<pre><code>...\n\nvoid pop(){\n   if(top == -1)\n      printf(\"\\nStack is Empty!!! Deletion is not possible!!!\");\n   else{\n      printf(\"\\nDeleted : %d\", stack[top]);\n      top--;\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_5","title":"Stack Array Implementation in C","text":"<pre><code>...\n\nvoid display(){\n   if(top == -1)\n      printf(\"\\nStack is Empty!!!\");\n   else{\n      int i;\n      printf(\"\\nStack elements are:\\n\");\n      for(i=top; i&gt;=0; i--)\n     printf(\"%d\\n\",stack[i]);\n   }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java","title":"Stack Array Implementation in Java","text":"<pre><code>// Stack implementation in Java\n\nclass Stack {\n  private int arr[];\n  private int top;\n  private int capacity;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_1","title":"Stack Array Implementation in Java","text":"<pre><code>...\n\n  // Creating a stack\n  Stack(int size) {\n    arr = new int[size];\n    capacity = size;\n    top = -1;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_2","title":"Stack Array Implementation in Java","text":"<pre><code>...\n  // Add elements into stack\n  public void push(int x) {\n    if (isFull()) {\n      System.out.println(\"OverFlow\\nProgram Terminated\\n\");\n      System.exit(1);\n    }\n\n    System.out.println(\"Inserting \" + x);\n    arr[++top] = x;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_3","title":"Stack Array Implementation in Java","text":"<pre><code>...\n  // Remove element from stack\n  public int pop() {\n    if (isEmpty()) {\n      System.out.println(\"STACK EMPTY\");\n      System.exit(1);\n    }\n    return arr[top--];\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_4","title":"Stack Array Implementation in Java","text":"<pre><code>...\n  // Utility function to return the size of the stack\n  public int size() {\n    return top + 1;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_5","title":"Stack Array Implementation in Java","text":"<pre><code>...\n  // Check if the stack is empty\n  public Boolean isEmpty() {\n    return top == -1;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_6","title":"Stack Array Implementation in Java","text":"<pre><code>...\n  // Check if the stack is full\n  public Boolean isFull() {\n    return top == capacity - 1;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_7","title":"Stack Array Implementation in Java","text":"<pre><code>...\n  public void printStack() {\n    for (int i = 0; i &lt;= top; i++) {\n      System.out.println(arr[i]);\n    }\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-java_8","title":"Stack Array Implementation in Java","text":"<pre><code>...\n  public static void main(String[] args) {\n    Stack stack = new Stack(5);\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    stack.push(4);\n\n    stack.pop();\n    System.out.println(\"\\nAfter popping out\");\n\n    stack.printStack();\n\n  }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_6","title":"Stack Array Implementation in C","text":"<pre><code>// Stack implementation in C\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAX 10\n\nint count = 0;\n\n// Creating a stack\nstruct stack {\n  int items[MAX];\n  int top;\n};\ntypedef struct stack st;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_7","title":"Stack Array Implementation in C","text":"<pre><code>...\n\n// Stack implementation in C\n\nvoid createEmptyStack(st *s) {\n  s-&gt;top = -1;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_8","title":"Stack Array Implementation in C","text":"<pre><code>...\n\n// Check if the stack is full\nint isfull(st *s) {\n  if (s-&gt;top == MAX - 1)\n    return 1;\n  else\n    return 0;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_9","title":"Stack Array Implementation in C","text":"<pre><code>...\n\n// Check if the stack is empty\nint isempty(st *s) {\n  if (s-&gt;top == -1)\n    return 1;\n  else\n    return 0;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_10","title":"Stack Array Implementation in C","text":"<pre><code>...\n\n// Add elements into stack\nvoid push(st *s, int newitem) {\n  if (isfull(s)) {\n    printf(\"STACK FULL\");\n  } else {\n    s-&gt;top++;\n    s-&gt;items[s-&gt;top] = newitem;\n  }\n  count++;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_11","title":"Stack Array Implementation in C","text":"<pre><code>...\n\n// Remove element from stack\nvoid pop(st *s) {\n  if (isempty(s)) {\n    printf(\"\\n STACK EMPTY \\n\");\n  } else {\n    printf(\"Item popped= %d\", s-&gt;items[s-&gt;top]);\n    s-&gt;top--;\n  }\n  count--;\n  printf(\"\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_12","title":"Stack Array Implementation in C","text":"<pre><code>...\n\n// Print elements of stack\nvoid printStack(st *s) {\n  printf(\"Stack: \");\n  for (int i = 0; i &lt; count; i++) {\n    printf(\"%d \", s-&gt;items[i]);\n  }\n  printf(\"\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-c_13","title":"Stack Array Implementation in C","text":"<pre><code>...\n\n// Driver code\nint main() {\n  int ch;\n  st *s = (st *)malloc(sizeof(st));\n\n  createEmptyStack(s);\n\n  push(s, 1);\n  push(s, 2);\n  push(s, 3);\n  push(s, 4);\n\n  printStack(s);\n\n  pop(s);\n\n  printf(\"\\nAfter popping out\\n\");\n  printStack(s);\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp","title":"Stack Array Implementation in CPP","text":"<pre><code>// Stack implementation in C++\n\n#include &lt;stdlib.h&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n#define MAX 10\nint size = 0;\n\n// Creating a stack\nstruct stack {\n  int items[MAX];\n  int top;\n};\ntypedef struct stack st;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp_1","title":"Stack Array Implementation in CPP","text":"<pre><code>void createEmptyStack(st *s) {\n  s-&gt;top = -1;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp_2","title":"Stack Array Implementation in CPP","text":"<pre><code>// Check if the stack is full\nint isfull(st *s) {\n  if (s-&gt;top == MAX - 1)\n    return 1;\n  else\n    return 0;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp_3","title":"Stack Array Implementation in CPP","text":"<pre><code>// Check if the stack is empty\nint isempty(st *s) {\n  if (s-&gt;top == -1)\n    return 1;\n  else\n    return 0;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp_4","title":"Stack Array Implementation in CPP","text":"<pre><code>// Add elements into stack\nvoid push(st *s, int newitem) {\n  if (isfull(s)) {\n    cout &lt;&lt; \"STACK FULL\";\n  } else {\n    s-&gt;top++;\n    s-&gt;items[s-&gt;top] = newitem;\n  }\n  size++;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp_5","title":"Stack Array Implementation in CPP","text":"<pre><code>// Remove element from stack\nvoid pop(st *s) {\n  if (isempty(s)) {\n    cout &lt;&lt; \"\\n STACK EMPTY \\n\";\n  } else {\n    cout &lt;&lt; \"Item popped= \" &lt;&lt; s-&gt;items[s-&gt;top];\n    s-&gt;top--;\n  }\n  size--;\n  cout &lt;&lt; endl;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp_6","title":"Stack Array Implementation in CPP","text":"<pre><code>// Print elements of stack\nvoid printStack(st *s) {\n  printf(\"Stack: \");\n  for (int i = 0; i &lt; size; i++) {\n    cout &lt;&lt; s-&gt;items[i] &lt;&lt; \" \";\n  }\n  cout &lt;&lt; endl;\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-array-implementation-in-cpp_7","title":"Stack Array Implementation in CPP","text":"<pre><code>// Driver code\nint main() {\n  int ch;\n  st *s = (st *)malloc(sizeof(st));\n\n  createEmptyStack(s);\n\n  push(s, 1);\n  push(s, 2);\n  push(s, 3);\n  push(s, 4);\n\n  printStack(s);\n\n  pop(s);\n\n  cout &lt;&lt; \"\\nAfter popping out\\n\";\n  printStack(s);\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-time-complexity","title":"Stack Time Complexity","text":"<p>For the array-based implementation of a stack, the push and pop operations take constant time, i.e.\u00a0<code>O(1)</code>.</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#applications-of-stack-data-structure","title":"Applications of Stack Data Structure","text":"<ul> <li>Although stack is a simple data structure to implement, it is very powerful. The most common uses of a stack are:</li> <li>To reverse a word\u00a0- Put all the letters in a stack and pop them out. Because of the LIFO order of stack, you will get the letters in reverse order.</li> <li>In compilers\u00a0- Compilers use the stack to calculate the value of expressions like\u00a0<code>2 + 4 / 5 * (7 - 9)</code>\u00a0by converting the expression to prefix or postfix form.</li> <li>In browsers\u00a0- The back button in a browser saves all the URLs you have visited previously in a stack. Each time you visit a new page, it is added on top of the stack. When you press the back button, the current URL is removed from the stack, and the previous URL is accessed.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list","title":"Stack Using Linked List","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/stack-using-linked-list.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list_1","title":"Stack Using Linked List","text":"<ul> <li>The major problem with the stack implemented using an array is, it works only for a fixed number of data values. </li> <li>That means the amount of data must be specified at the beginning of the implementation itself. </li> <li>Stack implemented using an array is not suitable, when we don't know the size of data which we are going to use. </li> <li>A stack data structure can be implemented by using a linked list data structure. The stack implemented using linked list can work for an unlimited number of values. </li> <li>That means, stack implemented using linked list works for the variable size of data. So, there is no need to fix the size at the beginning of the implementation. The Stack implemented using linked list can organize as many data values as we want.  </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list_2","title":"Stack Using Linked List","text":"<p>In linked list implementation of a stack, every new element is inserted as 'top' element. That means every newly inserted element is pointed by 'top'. Whenever we want to remove an element from the stack, simply remove the node which is pointed by 'top' by moving 'top' to its previous node in the list. The\u00a0next\u00a0field of the first element must be always\u00a0NULL.</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list-example","title":"Stack Using Linked List Example","text":"<ul> <li>In the above example, the last inserted node is 99 and the first inserted node is 25. The order of elements inserted is 25, 32,50 and 99.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-linked-list","title":"Stack Operations using Linked List","text":"<ul> <li>To implement a stack using a linked list, we need to set the following things before implementing actual operations.</li> <li>Step 1 -\u00a0Include all the\u00a0header files\u00a0which are used in the program. And declare all the\u00a0user defined functions.</li> <li>Step 2 -\u00a0Define a 'Node' structure with two members\u00a0data\u00a0and\u00a0next.</li> <li>Step 3 -\u00a0Define a\u00a0Node\u00a0pointer 'top' and set it to\u00a0NULL.</li> <li>Step 4 -\u00a0Implement the\u00a0main\u00a0method by displaying Menu with list of operations and make suitable function calls in the\u00a0main\u00a0method.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-linked-list_1","title":"Stack Operations using Linked List","text":"<ul> <li>push(value) - Inserting an element into the Stack</li> <li>We can use the following steps to insert a new node into the stack...</li> <li>Step 1 -\u00a0Create a\u00a0newNode\u00a0with given value.</li> <li>Step 2 -\u00a0Check whether stack is\u00a0Empty\u00a0(top\u00a0==\u00a0NULL)</li> <li>Step 3 -\u00a0If it is\u00a0Empty, then set\u00a0newNode \u2192 next\u00a0=\u00a0NULL.</li> <li>Step 4 -\u00a0If it is\u00a0Not Empty, then set\u00a0newNode \u2192 next\u00a0=\u00a0top.</li> <li>Step 5 -\u00a0Finally, set\u00a0top\u00a0=\u00a0newNode.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-linked-list_2","title":"Stack Operations using Linked List","text":"<ul> <li>pop() - Deleting an Element from a Stack</li> <li>We can use the following steps to delete a node from the stack...</li> <li>Step 1 -\u00a0Check whether\u00a0stack\u00a0is\u00a0Empty\u00a0(top == NULL).</li> <li>Step 2 -\u00a0If it is\u00a0Empty, then display\u00a0\"Stack is Empty!!! Deletion is not possible!!!\"\u00a0and terminate the function</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty, then define a\u00a0Node\u00a0pointer 'temp' and set it to 'top'.</li> <li>Step 4 -\u00a0Then set 'top\u00a0=\u00a0top \u2192 next'.</li> <li>Step 5 -\u00a0Finally, delete 'temp'. (free(temp)).</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-operations-using-linked-list_3","title":"Stack Operations using Linked List","text":"<ul> <li>display() - Displaying stack of elements</li> <li>We can use the following steps to display the elements (nodes) of a stack...</li> <li>Step 1 -\u00a0Check whether stack is\u00a0Empty\u00a0(top\u00a0==\u00a0NULL).</li> <li>Step 2 -\u00a0If it is\u00a0Empty, then display\u00a0'Stack is Empty!!!'\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty, then define a Node pointer\u00a0'temp'\u00a0and initialize with\u00a0top.</li> <li>Step 4 -\u00a0Display 'temp \u2192 data\u00a0---&gt;' and move it to the next node. Repeat the same until\u00a0temp\u00a0reaches to the first node in the stack. (temp \u2192 next\u00a0!=\u00a0NULL).</li> <li>Step 5 -\u00a0Finally! Display 'temp \u2192 data\u00a0---&gt;\u00a0NULL'.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list-in-c","title":"Stack using Linked List in C","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\nstruct Node\n{\n   int data;\n   struct Node *next;\n}*top = NULL;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list-in-c_1","title":"Stack using Linked List in C","text":"<pre><code>...\n\nvoid push(int);\nvoid pop();\nvoid display();\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list-in-c_2","title":"Stack using Linked List in C","text":"<pre><code>...\n\nvoid main()\n{\n   int choice, value;\n   clrscr();\n   printf(\"\\n:: Stack using Linked List ::\\n\");\n   while(1){\n      printf(\"\\n****** MENU ******\\n\");\n      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n      printf(\"Enter your choice: \");\n      scanf(\"%d\",&amp;choice);\n      switch(choice){\n     case 1: printf(\"Enter the value to be insert: \");\n         scanf(\"%d\", &amp;value);\n         push(value);\n         break;\n     case 2: pop(); break;\n     case 3: display(); break;\n     case 4: exit(0);\n     default: printf(\"\\nWrong selection!!! Please try again!!!\\n\");\n      }\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list-in-c_3","title":"Stack using Linked List in C","text":"<pre><code>...\n\nvoid push(int value)\n{\n   struct Node *newNode;\n   newNode = (struct Node*)malloc(sizeof(struct Node));\n   newNode-&gt;data = value;\n   if(top == NULL)\n      newNode-&gt;next = NULL;\n   else\n      newNode-&gt;next = top;\n   top = newNode;\n   printf(\"\\nInsertion is Success!!!\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list-in-c_4","title":"Stack using Linked List in C","text":"<pre><code>...\nvoid pop()\n{\n   if(top == NULL)\n      printf(\"\\nStack is Empty!!!\\n\");\n   else{\n      struct Node *temp = top;\n      printf(\"\\nDeleted element: %d\", temp-&gt;data);\n      top = temp-&gt;next;\n      free(temp);\n   }\n}\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#stack-using-linked-list-in-c_5","title":"Stack using Linked List in C","text":"<pre><code>...\nvoid display()\n{\n   if(top == NULL)\n      printf(\"\\nStack is Empty!!!\\n\");\n   else{\n      struct Node *temp = top;\n      while(temp-&gt;next != NULL){\n     printf(\"%d---&gt;\",temp-&gt;data);\n     temp = temp -&gt; next;\n      }\n      printf(\"%d---&gt;NULL\",temp-&gt;data);\n   }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_1","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_2","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#expressions","title":"Expressions","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/expressions.html<ul> <li>Infix</li> <li>Postfix</li> <li>Prefix</li> </ul> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-an-expression","title":"What is an Expression?","text":"<ul> <li>In any programming language, if we want to perform any calculation or to frame a condition etc., </li> <li>we use a set of symbols to perform the task. </li> <li>These set of symbols makes an expression.  </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-an-expression_1","title":"What is an Expression?","text":"<ul> <li>An expression is a collection of operators and operands that represents a specific value.</li> <li>In above definition,\u00a0operator\u00a0is a symbol which performs a particular task like arithmetic operation or logical operation or conditional operation etc.,  </li> <li>Operands\u00a0are the values on which the operators can perform the task. Here operand can be a direct value or variable or address of memory location.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#expression-types","title":"Expression Types","text":"<ul> <li>Based on the operator position, expressions are divided into THREE types. They are as follows...</li> <li>Infix Expression</li> <li>Postfix Expression</li> <li>Prefix Expression</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-expression","title":"Infix Expression","text":"<ul> <li>In infix expression, operator is used in between the operands.  </li> <li>The general structure of an Infix expression is as follows.</li> </ul> <pre><code>Operand1 Operator Operand2\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-expression-example","title":"Infix Expression Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression","title":"Postfix Expression","text":"<ul> <li>In postfix expression, operator is used after operands. </li> <li>We can say that \"Operator follows the Operands\".  </li> <li>The general structure of Postfix expression is as follows.</li> </ul> <pre><code>Operand1 Operand2 Operator\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-example","title":"Postfix Expression Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#prefix-expression","title":"Prefix Expression","text":"<ul> <li>In prefix expression, operator is used before operands. </li> <li>We can say that \"Operands follows the Operator\".  </li> <li>The general structure of Prefix expression is as follows.</li> </ul> <pre><code>Operator Operand1 Operand2\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#prefix-expression-example","title":"Prefix Expression Example","text":"<ul> <li>Every expression can be represented using all the above three different types of expressions. </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#expression-conversions","title":"Expression Conversions","text":"<ul> <li>And we can convert an expression from one form to another form like\u00a0</li> <li>Infix to Postfix,\u00a0</li> <li>Infix to Prefix,\u00a0</li> <li>Prefix to Postfix\u00a0and vice versa.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion","title":"Infix to Postfix Conversion","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/infix-to-postfix.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion_1","title":"Infix to Postfix Conversion","text":"<ul> <li>Any expression can be represented using three types of expressions (Infix, Postfix, and Prefix). </li> <li>We can also convert one type of expression to another type of expression like     </li> <li>Infix to Postfix, </li> <li>Infix to Prefix, </li> <li>Postfix to Prefix and vice versa.  </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion_2","title":"Infix to Postfix Conversion","text":"<ul> <li>To convert any Infix expression into Postfix or Prefix expression we can use the following procedure.</li> <li> <ol> <li>Find all the operators in the given Infix Expression.</li> </ol> </li> <li> <ol> <li>Find the order of operators evaluated according to their Operator precedence.</li> </ol> </li> <li> <ol> <li>Convert each operator into required type of expression (Postfix or Prefix) in the same order.</li> </ol> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-example","title":"Infix to Postfix Example","text":"<ul> <li>Consider the following Infix Expression to be converted into Postfix Expression.</li> <li><code>D = A + B * C</code></li> <li>Step 1 -\u00a0The Operators in the given Infix Expression :\u00a0<code>= , + , *</code></li> <li>Step 2 -\u00a0The Order of Operators according to their preference :\u00a0<code>* , + , =</code></li> <li>Step 3 -\u00a0Now, convert the first operator\u00a0<code>*</code> -&gt;\u00a0<code>D = A +\u00a0B C *</code></li> <li>Step 4 -\u00a0Convert the next operator\u00a0<code>+</code>\u00a0-&gt;\u00a0<code>D =\u00a0A BC* +</code></li> <li>Step 5 -\u00a0Convert the next operator\u00a0<code>=</code>\u00a0-&gt;\u00a0<code>D ABC*+ =</code>     Finally, given Infix Expression is converted into Postfix Expression as follows...     <code>D A B C * + =</code></li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-using-stack-data-structure","title":"Infix to Postfix Conversion using Stack Data Structure","text":"<ul> <li>To convert Infix Expression into Postfix Expression using a stack data structure, We can use the following steps</li> <li> <ol> <li>Read all the symbols one by one from left to right in the given Infix Expression.</li> </ol> </li> <li> <ol> <li>If the reading symbol is\u00a0operand, then directly print it to the result (Output).</li> </ol> </li> <li> <ol> <li>If the reading symbol is\u00a0left parenthesis '(', then Push it on to the Stack.</li> </ol> </li> <li> <ol> <li>If the reading symbol is\u00a0right parenthesis ')', then Pop all the contents of stack until respective left parenthesis is poped and print each poped symbol to the result.</li> </ol> </li> <li> <ol> <li>If the reading symbol is\u00a0operator (+ , - , * , / etc.,), then Push it on to the Stack. However, first pop the operators which are already on the stack that have higher or equal precedence than current operator and print them to the result.</li> </ol> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example","title":"Infix to Postfix Conversion Example","text":"<p>Consider the following Infix Expression...</p> <ul> <li><code>( A + B ) * ( C - D )</code></li> <li>The given infix expression can be converted into postfix expression using Stack data Structure as follows.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_1","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_2","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_3","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_4","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_5","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_6","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_7","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_8","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_9","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_10","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_11","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_12","title":"Infix to Postfix Conversion Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#infix-to-postfix-conversion-example_13","title":"Infix to Postfix Conversion Example","text":"<p>The final Postfix Expression is as follows...</p> <ul> <li><code>A B + C D - *</code></li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation","title":"Postfix Expression Evaluation","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/postfix-evaluation.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation_1","title":"Postfix Expression Evaluation","text":"<ul> <li>A postfix expression is a collection of operators and operands in which the operator is placed after the operands. </li> <li>That means, in a postfix expression the operator follows the operands.  </li> </ul> <p>Postfix Expression has following general structure</p> <pre><code>Operand1 Operand2 Operator\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-using-stack-data-structure","title":"Postfix Expression Evaluation using Stack Data Structure","text":"<ul> <li>A postfix expression can be evaluated using the Stack data structure. </li> <li>To evaluate a postfix expression using Stack data structure we can use the following steps</li> <li> <ol> <li>Read all the symbols one by one from left to right in the given Postfix Expression</li> </ol> </li> <li> <ol> <li>If the reading symbol is\u00a0operand, then push it on to the Stack.</li> </ol> </li> <li> <ol> <li>If the reading symbol is\u00a0operator (+ , - , * , / etc.,), then perform TWO pop operations and store the two popped oparands in two different variables (operand1 and operand2). Then perform reading symbol operation using operand1 and operand2 and push result back on to the Stack.</li> </ol> </li> <li> <ol> <li>Finally! perform a pop operation and display the popped value as final result.</li> </ol> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_1","title":"Postfix Expression Evaluation Example","text":"<ul> <li>Consider the following Expression.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_2","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_3","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_4","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_5","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_6","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_7","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_8","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_9","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_10","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#postfix-expression-evaluation-example_11","title":"Postfix Expression Evaluation Example","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-adt","title":"Queue ADT","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/queue-adt.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-data-structure","title":"Queue Data Structure","text":"<ul> <li>In this tutorial, you will learn what a queue is. Also, you will find implementation of queue in C, C++, Java and Python.</li> <li>A queue is a useful data structure in programming. It is similar to the ticket queue outside a cinema hall, where the first person entering the queue is the first person who gets the ticket.</li> <li>Queue follows the\u00a0First In First Out (FIFO)\u00a0rule - the item that goes in first is the item that comes out first.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-data-structure_1","title":"Queue Data Structure","text":"<ul> <li>FIFO Representation of Queue</li> </ul> <ul> <li>In the above image, since 1 was kept in the queue before 2, </li> <li>it is the first to be removed from the queue as well. </li> <li>It follows the\u00a0FIFO\u00a0rule.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-data-structure_2","title":"Queue Data Structure","text":"<ul> <li>In programming terms, putting items in the queue is called\u00a0enqueue, and removing items from the queue is called\u00a0dequeue.</li> <li>We can implement the queue in any programming language like C, C++, Java, Python or C#, but the specification is pretty much the same.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#basic-operations-of-queue","title":"Basic Operations of Queue","text":"<ul> <li>A queue is an object (an abstract data structure - ADT) that allows the following operations:</li> <li>Enqueue: Add an element to the end of the queue</li> <li>Dequeue: Remove an element from the front of the queue</li> <li>IsEmpty: Check if the queue is empty</li> <li>IsFull: Check if the queue is full</li> <li>Peek: Get the value of the front of the queue without removing it</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#working-of-queue","title":"Working of Queue","text":"<ul> <li>Queue operations work as follows:</li> <li>two pointers\u00a0FRONT\u00a0and\u00a0REAR</li> <li>FRONT\u00a0track the first element of the queue</li> <li>REAR\u00a0track the last element of the queue</li> <li>initially, set value of\u00a0FRONT\u00a0and\u00a0REAR\u00a0to -1</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-operation","title":"Enqueue Operation","text":"<ul> <li>check if the queue is full</li> <li>for the first element, set the value of\u00a0FRONT\u00a0to 0</li> <li>increase the\u00a0REAR\u00a0index by 1</li> <li>add the new element in the position pointed to by\u00a0REAR</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation","title":"Dequeue Operation","text":"<ul> <li>check if the queue is empty</li> <li>return the value pointed by\u00a0FRONT</li> <li>increase the\u00a0FRONT\u00a0index by 1</li> <li>for the last element, reset the values of\u00a0FRONT\u00a0and\u00a0REAR\u00a0to -1</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation_1","title":"Dequeue Operation","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation_2","title":"Dequeue Operation","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation_3","title":"Dequeue Operation","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation_4","title":"Dequeue Operation","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation_5","title":"Dequeue Operation","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation_6","title":"Dequeue Operation","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-operation_7","title":"Dequeue Operation","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c","title":"Enqueue and Dequeue Operations in C","text":"<pre><code>// Queue implementation in C\n\n#include &lt;stdio.h&gt;\n#define SIZE 5\n\nvoid enQueue(int);\nvoid deQueue();\nvoid display();\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_1","title":"Enqueue and Dequeue Operations in C","text":"<pre><code>...\n\nint items[SIZE], front = -1, rear = -1;\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_2","title":"Enqueue and Dequeue Operations in C","text":"<pre><code>...\nint main() {\n  //deQueue is not possible on empty queue\n  deQueue();\n\n  //enQueue 5 elements\n  enQueue(1);\n  enQueue(2);\n  enQueue(3);\n  enQueue(4);\n  enQueue(5);\n\n  // 6th element can't be added to because the queue is full\n  enQueue(6);\n\n  display();\n\n  //deQueue removes element entered first i.e. 1\n  deQueue();\n\n  //Now we have just 4 elements\n  display();\n\n  return 0;\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_3","title":"Enqueue and Dequeue Operations in C","text":"<pre><code>...\nvoid enQueue(int value) {\n  if (rear == SIZE - 1)\n    printf(\"\\nQueue is Full!!\");\n  else {\n    if (front == -1)\n      front = 0;\n    rear++;\n    items[rear] = value;\n    printf(\"\\nInserted -&gt; %d\", value);\n  }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_4","title":"Enqueue and Dequeue Operations in C","text":"<pre><code>...\nvoid deQueue() {\n  if (front == -1)\n    printf(\"\\nQueue is Empty!!\");\n  else {\n    printf(\"\\nDeleted : %d\", items[front]);\n    front++;\n    if (front &gt; rear)\n      front = rear = -1;\n  }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_5","title":"Enqueue and Dequeue Operations in C","text":"<pre><code>...\n// Function to print the queue\nvoid display() {\n  if (rear == -1)\n    printf(\"\\nQueue is Empty!!!\");\n  else {\n    int i;\n    printf(\"\\nQueue elements are:\\n\");\n    for (i = front; i &lt;= rear; i++)\n      printf(\"%d  \", items[i]);\n  }\n  printf(\"\\n\");\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_6","title":"Enqueue and Dequeue Operations in C++","text":"<pre><code>...\n// Queue implementation in C++\n\n#include &lt;iostream&gt;\n#define SIZE 5\n\nusing namespace std;\n\nclass Queue {\n   private:\n  int items[SIZE], front, rear;\n\n   public:\n\n  Queue() {\n    front = -1;\n    rear = -1;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_7","title":"Enqueue and Dequeue Operations in C++","text":"<pre><code>...\n  bool isFull() {\n    if (front == 0 &amp;&amp; rear == SIZE - 1) {\n      return true;\n    }\n    return false;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_8","title":"Enqueue and Dequeue Operations in C++","text":"<pre><code>...\n  bool isEmpty() {\n    if (front == -1)\n      return true;\n    else\n      return false;\n  }\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_9","title":"Enqueue and Dequeue Operations in C++","text":"<pre><code>...\n  void enQueue(int element) {\n    if (isFull()) {\n      cout &lt;&lt; \"Queue is full\";\n    } else {\n      if (front == -1) front = 0;\n      rear++;\n      items[rear] = element;\n      cout &lt;&lt; endl\n         &lt;&lt; \"Inserted \" &lt;&lt; element &lt;&lt; endl;\n    }\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_10","title":"Enqueue and Dequeue Operations in C++","text":"<pre><code>...\n  int deQueue() {\n    int element;\n    if (isEmpty()) {\n      cout &lt;&lt; \"Queue is empty\" &lt;&lt; endl;\n      return (-1);\n    } else {\n      element = items[front];\n      if (front &gt;= rear) {\n        front = -1;\n        rear = -1;\n      } /* Q has only one element, so we reset the queue after deleting it. */\n      else {\n        front++;\n      }\n      cout &lt;&lt; endl\n         &lt;&lt; \"Deleted -&gt; \" &lt;&lt; element &lt;&lt; endl;\n      return (element);\n    }\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_11","title":"Enqueue and Dequeue Operations in C++","text":"<pre><code>...\n  void display() {\n    /* Function to display elements of Queue */\n    int i;\n    if (isEmpty()) {\n      cout &lt;&lt; endl\n         &lt;&lt; \"Empty Queue\" &lt;&lt; endl;\n    } else {\n      cout &lt;&lt; endl\n         &lt;&lt; \"Front index-&gt; \" &lt;&lt; front;\n      cout &lt;&lt; endl\n         &lt;&lt; \"Items -&gt; \";\n      for (i = front; i &lt;= rear; i++)\n        cout &lt;&lt; items[i] &lt;&lt; \"  \";\n      cout &lt;&lt; endl\n         &lt;&lt; \"Rear index-&gt; \" &lt;&lt; rear &lt;&lt; endl;\n    }\n  }\n};\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-c_12","title":"Enqueue and Dequeue Operations in C++","text":"<pre><code>...\nint main() {\n  Queue q;\n\n  //deQueue is not possible on empty queue\n  q.deQueue();\n\n  //enQueue 5 elements\n  q.enQueue(1);\n  q.enQueue(2);\n  q.enQueue(3);\n  q.enQueue(4);\n  q.enQueue(5);\n\n  // 6th element can't be added to because the queue is full\n  q.enQueue(6);\n\n  q.display();\n\n  //deQueue removes element entered first i.e. 1\n  q.deQueue();\n\n  //Now we have just 4 elements\n  q.display();\n\n  return 0;\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-java","title":"Enqueue and Dequeue Operations in Java","text":"<pre><code>// Queue implementation in Java\n\npublic class Queue {\n  int SIZE = 5;\n  int items[] = new int[SIZE];\n  int front, rear;\n\n  Queue() {\n    front = -1;\n    rear = -1;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-java_1","title":"Enqueue and Dequeue Operations in Java","text":"<pre><code>...\n\n  boolean isFull() {\n    if (front == 0 &amp;&amp; rear == SIZE - 1) {\n      return true;\n    }\n    return false;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-java_2","title":"Enqueue and Dequeue Operations in Java","text":"<pre><code>...\n  boolean isEmpty() {\n    if (front == -1)\n      return true;\n    else\n      return false;\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-java_3","title":"Enqueue and Dequeue Operations in Java","text":"<pre><code>...\n  void enQueue(int element) {\n    if (isFull()) {\n      System.out.println(\"Queue is full\");\n    } else {\n      if (front == -1)\n        front = 0;\n      rear++;\n      items[rear] = element;\n      System.out.println(\"Inserted \" + element);\n    }\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-java_4","title":"Enqueue and Dequeue Operations in Java","text":"<pre><code>...\n  int deQueue() {\n    int element;\n    if (isEmpty()) {\n      System.out.println(\"Queue is empty\");\n      return (-1);\n    } else {\n      element = items[front];\n      if (front &gt;= rear) {\n        front = -1;\n        rear = -1;\n      } /* Q has only one element, so we reset the queue after deleting it. */\n      else {\n        front++;\n      }\n      System.out.println(\"Deleted -&gt; \" + element);\n      return (element);\n    }\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-java_5","title":"Enqueue and Dequeue Operations in Java","text":"<pre><code>...\n  void display() {\n    /* Function to display elements of Queue */\n    int i;\n    if (isEmpty()) {\n      System.out.println(\"Empty Queue\");\n    } else {\n      System.out.println(\"\\nFront index-&gt; \" + front);\n      System.out.println(\"Items -&gt; \");\n      for (i = front; i &lt;= rear; i++)\n        System.out.print(items[i] + \"  \");\n\n      System.out.println(\"\\nRear index-&gt; \" + rear);\n    }\n  }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueue-and-dequeue-operations-in-java_6","title":"Enqueue and Dequeue Operations in Java","text":"<pre><code>...\n  public static void main(String[] args) {\n    Queue q = new Queue();\n\n    // deQueue is not possible on empty queue\n    q.deQueue();\n\n    // enQueue 5 elements\n    q.enQueue(1);\n    q.enQueue(2);\n    q.enQueue(3);\n    q.enQueue(4);\n    q.enQueue(5);\n\n    // 6th element can't be added to because the queue is full\n    q.enQueue(6);\n\n    q.display();\n\n    // deQueue removes element entered first i.e. 1\n    q.deQueue();\n\n    // Now we have just 4 elements\n    q.display();\n\n  }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#limitations-of-queue","title":"Limitations of Queue","text":"<ul> <li>As you can see in the image below, after a bit of enqueuing and dequeuing, the size of the queue has been reduced.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#limitations-of-queue_1","title":"Limitations of Queue","text":"<ul> <li>And we can only add indexes 0 and 1 only when the queue is reset (when all the elements have been dequeued).</li> <li>After\u00a0REAR\u00a0reaches the last index, </li> <li>if we can store extra elements in the empty spaces (0 and 1), </li> <li>we can make use of the empty spaces. This is implemented by a modified queue called the\u00a0circular queue.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#complexity-analysis","title":"Complexity Analysis","text":"<ul> <li>The complexity of enqueue and dequeue operations in a queue using an array is\u00a0<code>O(1)</code>. If you use\u00a0<code>pop(N)</code>\u00a0in python code, </li> <li>then the complexity might be\u00a0<code>O(n)</code>\u00a0depending on the position of the item to be popped.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#applications-of-queue","title":"Applications of Queue","text":"<ul> <li>CPU scheduling, Disk Scheduling</li> <li>When data is transferred asynchronously between two processes.The queue is used for synchronization. For example: IO Buffers, pipes, file IO, etc</li> <li>Handling of interrupts in real-time systems.</li> <li>Call Center phone systems use Queues to hold people calling them in order.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-a-queue","title":"What is a Queue?","text":"<ul> <li>Queue is a linear data structure in which the insertion and deletion operations are performed at two different ends. </li> <li>In a queue data structure, adding and removing elements are performed at two different positions. </li> <li>The insertion is performed at one end and deletion is performed at another end. - In a queue data structure, the insertion operation is performed at a position which is known as 'rear' and the deletion operation is performed at a position which is known as 'front'. </li> <li>In queue data structure, the insertion and deletion operations are performed based on\u00a0FIFO (First In First Out)\u00a0principle.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-a-queue_1","title":"What is a Queue?","text":"<ul> <li>In a queue data structure, </li> <li>the insertion operation is performed using a function called \"enQueue()\" and </li> <li>deletion operation is performed using a function called \"deQueue()\".  </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-a-queue_2","title":"What is a Queue?","text":"<ul> <li>Queue data structure can be defined as follows.</li> <li>Queue data structure is a linear data structure in which the operations are performed based on FIFO principle.</li> <li>A queue data structure can also be defined as</li> <li>\"Queue data structure is a collection of similar data items in which insertion and deletion operations are performed based on FIFO principle\".</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-a-queue_3","title":"What is a Queue?","text":"<p>Queue after inserting 25, 30, 51, 60 and 85.</p> <p></p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#operations-on-a-queue","title":"Operations on a Queue","text":"<ul> <li>The following operations are performed on a queue data structure</li> <li> <ol> <li>enQueue(value) - (To insert an element into the queue)</li> </ol> </li> <li> <ol> <li>deQueue() - (To delete an element from the queue)</li> </ol> </li> <li> <ol> <li>display() - (To display the elements of the queue)</li> </ol> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-implementation","title":"Queue Implementation","text":"<ul> <li>Queue data structure can be implemented in two ways. They are as follows...</li> <li> <ol> <li>Using Array</li> </ol> </li> <li> <ol> <li>Using Linked List</li> </ol> </li> <li>When a queue is implemented using an array, that queue can organize an only limited number of elements. </li> <li>When a queue is implemented using a linked list, that queue can organize an unlimited number of elements.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#first-come-first-serve-fcfs-fifo","title":"First Come First Serve, FCFS, FIFO","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/downloads/lab-manuals/Operating-System-Lab-Manual-R18-JNTUH.pdf</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-data-structure-using-array","title":"Queue Data structure Using Array","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/queue-using-array.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array","title":"Queue Datastructure Using Array","text":"<ul> <li>A queue data structure can be implemented using one dimensional array. </li> <li>The queue implemented using array stores only fixed number of data values. </li> <li>The implementation of queue data structure using array is very simple. </li> <li>Just define a one dimensional array of specific size and insert or delete the values into that array by using\u00a0FIFO (First In First Out) principle\u00a0with the help of variables\u00a0'front'\u00a0and 'rear'. </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array_1","title":"Queue Datastructure Using Array","text":"<ul> <li>Initially both 'front' and 'rear' are set to -1. Whenever, we want to insert a new value into the queue, increment 'rear' value by one and then insert at that position. </li> <li>Whenever we want to delete a value from the queue, then delete the element which is at 'front' position and increment 'front' value by one.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-operations-using-array","title":"Queue Operations using Array","text":"<ul> <li>Queue data structure using array can be implemented as follows.</li> <li>Before we implement actual operations, first follow the below steps to create an empty queue.</li> <li>Step 1 -\u00a0Include all the\u00a0header files\u00a0which are used in the program and define a constant\u00a0'SIZE'\u00a0with specific value.</li> <li>Step 2 -\u00a0Declare all the\u00a0user defined functions\u00a0which are used in queue implementation.</li> <li>Step 3 -\u00a0Create a one dimensional array with above defined SIZE (int queue[SIZE])</li> <li>Step 4 -\u00a0Define two integer variables\u00a0'front'\u00a0and 'rear' and initialize both with\u00a0'-1'. (int front = -1, rear = -1)</li> <li>Step 5 -\u00a0Then implement main method by displaying menu of operations list and make suitable function calls to perform operation selected by the user on queue.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-operations-using-array_1","title":"Queue Operations using Array","text":"<p>enQueue(value) - Inserting value into the queue</p> <ul> <li>In a queue data structure, enQueue() is a function used to insert a new element into the queue. </li> <li>In a queue, the new element is always inserted at\u00a0rear\u00a0position. </li> <li>The enQueue() function takes one integer value as a parameter and inserts that value into the queue. We can use the following steps to insert an element into the queue</li> <li>Step 1 -\u00a0Check whether\u00a0queue\u00a0is\u00a0FULL. (rear == SIZE-1)</li> <li>Step 2 -\u00a0If it is\u00a0FULL, then display\u00a0\"Queue is FULL!!! Insertion is not possible!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT FULL, then increment\u00a0rear\u00a0value by one (rear++) and set\u00a0queue[rear]\u00a0=\u00a0value.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-operations-using-array_2","title":"Queue Operations using Array","text":"<p>deQueue() - Deleting a value from the Queue</p> <ul> <li>In a queue data structure, deQueue() is a function used to delete an element from the queue. </li> <li>In a queue, the element is always deleted from\u00a0front\u00a0position. </li> <li>The deQueue() function does not take any value as parameter. </li> <li>We can use the following steps to delete an element from the queue.</li> <li>Step 1 -\u00a0Check whether\u00a0queue\u00a0is\u00a0EMPTY. (front == rear)</li> <li>Step 2 -\u00a0If it is\u00a0EMPTY, then display\u00a0\"Queue is EMPTY!!! Deletion is not possible!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT EMPTY, then increment the\u00a0front\u00a0value by one (front ++). Then display\u00a0queue[front]\u00a0as deleted element. Then check whether both\u00a0front\u00a0and\u00a0rear\u00a0are equal (front\u00a0==\u00a0rear), if it\u00a0TRUE, then set both\u00a0front\u00a0and\u00a0rear\u00a0to '-1' (front\u00a0=\u00a0rear\u00a0=\u00a0-1).</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-operations-using-array_3","title":"Queue Operations using Array","text":"<p>display() - Displays the elements of a Queue</p> <p>-We can use the following steps to display the elements of a queue...   - Step 1 -\u00a0Check whether\u00a0queue\u00a0is\u00a0EMPTY. (front == rear)   - Step 2 -\u00a0If it is\u00a0EMPTY, then display\u00a0\"Queue is EMPTY!!!\"\u00a0and terminate the function.   - Step 3 -\u00a0If it is\u00a0NOT EMPTY, then define an integer variable 'i' and set 'i\u00a0=\u00a0front+1'.   - Step 4 -\u00a0Display 'queue[i]' value and increment 'i' value by one (i++). Repeat the same until 'i' value reaches to\u00a0rear\u00a0(i\u00a0&lt;=\u00a0rear)</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array-in-c","title":"Queue Datastructure using Array in C","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n#define SIZE 10\n\nvoid enQueue(int);\nvoid deQueue();\nvoid display();\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array-in-c_1","title":"Queue Datastructure using Array in C","text":"<pre><code>...\n\nint queue[SIZE], front = -1, rear = -1;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array-in-c_2","title":"Queue Datastructure using Array in C","text":"<pre><code>...\n\nvoid main()\n{\n   int value, choice;\n   clrscr();\n   while(1){\n      printf(\"\\n\\n***** MENU *****\\n\");\n      printf(\"1. Insertion\\n2. Deletion\\n3. Display\\n4. Exit\");\n      printf(\"\\nEnter your choice: \");\n      scanf(\"%d\",&amp;choice);\n      switch(choice){\n     case 1: printf(\"Enter the value to be insert: \");\n         scanf(\"%d\",&amp;value);\n         enQueue(value);\n         break;\n     case 2: deQueue();\n         break;\n     case 3: display();\n         break;\n     case 4: exit(0);\n     default: printf(\"\\nWrong selection!!! Try again!!!\");\n      }\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array-in-c_3","title":"Queue Datastructure using Array in C","text":"<pre><code>...\n\nvoid enQueue(int value){\n   if(rear == SIZE-1)\n      printf(\"\\nQueue is Full!!! Insertion is not possible!!!\");\n   else{\n      if(front == -1)\n     front = 0;\n      rear++;\n      queue[rear] = value;\n      printf(\"\\nInsertion success!!!\");\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array-in-c_4","title":"Queue Datastructure using Array in C","text":"<pre><code>...\n\nvoid deQueue(){\n   if(front == rear)\n      printf(\"\\nQueue is Empty!!! Deletion is not possible!!!\");\n   else{\n      printf(\"\\nDeleted : %d\", queue[front]);\n      front++;\n      if(front == rear)\n     front = rear = -1;\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-datastructure-using-array-in-c_5","title":"Queue Datastructure using Array in C","text":"<pre><code>...\n\nvoid display(){\n   if(rear == -1)\n      printf(\"\\nQueue is Empty!!!\");\n   else{\n      int i;\n      printf(\"\\nQueue elements are:\\n\");\n      for(i=front; i&lt;=rear; i++)\n      printf(\"%d\\t\",queue[i]);\n   }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_3","title":"Output","text":"<p>center h:400px</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list","title":"Queue Using Linked List","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/queue-using-linked-list.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list_1","title":"Queue Using Linked List","text":"<ul> <li>The major problem with the queue implemented using an array is, </li> <li>It will work for an only fixed number of data values. </li> <li>That means, the amount of data must be specified at the beginning itself. </li> <li>Queue using an array is not suitable when we don't know the size of data which we are going to use. </li> <li>A queue data structure can be implemented using a linked list data structure. The queue which is implemented using a linked list can work for an unlimited number of values. </li> <li>That means, queue using linked list can work for the variable size of data (No need to fix the size at the beginning of the implementation). </li> <li>The Queue implemented using linked list can organize as many data values as we want.  </li> <li>In linked list implementation of a queue, the last inserted node is always pointed by 'rear' and the first node is always pointed by 'front'.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list-example","title":"Queue Using Linked List Example","text":"<ul> <li>In above example, the last inserted node is 50 and it is pointed by 'rear' and the first inserted node is 10 and it is pointed by 'front'. The order of elements inserted is 10, 15, 22 and 50.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#operations","title":"Operations","text":"<ul> <li>To implement queue using linked list, we need to set the following things before implementing actual operations.</li> <li>Step 1 -\u00a0Include all the\u00a0header files\u00a0which are used in the program. And declare all the\u00a0user defined functions.</li> <li>Step 2 -\u00a0Define a 'Node' structure with two members\u00a0data\u00a0and\u00a0next.</li> <li>Step 3 -\u00a0Define two\u00a0Node\u00a0pointers 'front' and 'rear' and set both to\u00a0NULL.</li> <li>Step 4 -\u00a0Implement the\u00a0main\u00a0method by displaying Menu of list of operations and make suitable function calls in the\u00a0main\u00a0method to perform user selected operation.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueuevalue-inserting-an-element-into-the-queue","title":"enQueue(value) - Inserting an element into the Queue","text":"<ul> <li>We can use the following steps to insert a new node into the queue...</li> <li>Step 1 -\u00a0Create a\u00a0newNode\u00a0with given value and set 'newNode \u2192 next' to\u00a0NULL.</li> <li>Step 2 -\u00a0Check whether queue is\u00a0Empty\u00a0(rear\u00a0==\u00a0NULL)</li> <li>Step 3 -\u00a0If it is\u00a0Empty\u00a0then,   set\u00a0front\u00a0=\u00a0newNode\u00a0and\u00a0rear\u00a0=\u00a0newNode.</li> <li>Step 4 -\u00a0If it is\u00a0Not Empty\u00a0then, set\u00a0rear \u2192 next\u00a0=\u00a0newNode\u00a0and\u00a0rear\u00a0=\u00a0newNode.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-deleting-an-element-from-queue","title":"deQueue() - Deleting an Element from Queue","text":"<ul> <li>We can use the following steps to delete a node from the queue...</li> <li>Step 1 -\u00a0Check whether\u00a0queue\u00a0is\u00a0Empty\u00a0(front == NULL).</li> <li>Step 2 -\u00a0If it is\u00a0Empty, then display\u00a0\"Queue is Empty!!! Deletion is not possible!!!\"\u00a0and terminate from the function</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty\u00a0then, define a Node pointer 'temp' and set it to 'front'.</li> <li>Step 4 -\u00a0Then set 'front\u00a0=\u00a0front \u2192 next' and delete 'temp' (free(temp)).</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#display-displaying-the-elements-of-queue","title":"display() - Displaying the elements of Queue","text":"<ul> <li>We can use the following steps to display the elements (nodes) of a queue...</li> <li>Step 1 -\u00a0Check whether queue is\u00a0Empty\u00a0(front\u00a0==\u00a0NULL).</li> <li>Step 2 -\u00a0If it is\u00a0Empty\u00a0then, display\u00a0'Queue is Empty!!!'\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0Not Empty\u00a0then, define a Node pointer\u00a0'temp'\u00a0and initialize with\u00a0front.</li> <li>Step 4 -\u00a0Display 'temp \u2192 data\u00a0---&gt;' and move it to the next node. Repeat the same until 'temp' reaches to 'rear' (temp \u2192 next\u00a0!=\u00a0NULL).</li> <li>Step 5 -\u00a0Finally! Display 'temp \u2192 data\u00a0---&gt;\u00a0NULL'.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list-in-c","title":"Queue using Linked List in C","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\nstruct Node\n{\n   int data;\n   struct Node *next;\n}*front = NULL,*rear = NULL;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list-in-c_1","title":"Queue using Linked List in C","text":"<pre><code>...\nvoid insert(int);\nvoid delete();\nvoid display();\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list-in-c_2","title":"Queue using Linked List in C","text":"<pre><code>...\nvoid main()\n{\n   int choice, value;\n   clrscr();\n   printf(\"\\n:: Queue Implementation using Linked List ::\\n\");\n   while(1){\n      printf(\"\\n****** MENU ******\\n\");\n      printf(\"1. Insert\\n2. Delete\\n3. Display\\n4. Exit\\n\");\n      printf(\"Enter your choice: \");\n      scanf(\"%d\",&amp;choice);\n      switch(choice){\n     case 1: printf(\"Enter the value to be insert: \");\n         scanf(\"%d\", &amp;value);\n         insert(value);\n         break;\n     case 2: delete(); break;\n     case 3: display(); break;\n     case 4: exit(0);\n     default: printf(\"\\nWrong selection!!! Please try again!!!\\n\");\n      }\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list-in-c_3","title":"Queue using Linked List in C","text":"<pre><code>...\n\nvoid insert(int value)\n{\n   struct Node *newNode;\n   newNode = (struct Node*)malloc(sizeof(struct Node));\n   newNode-&gt;data = value;\n   newNode -&gt; next = NULL;\n   if(front == NULL)\n      front = rear = newNode;\n   else{\n      rear -&gt; next = newNode;\n      rear = newNode;\n   }\n   printf(\"\\nInsertion is Success!!!\\n\");\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list-in-c_4","title":"Queue using Linked List in C","text":"<pre><code>...\nvoid delete()\n{\n   if(front == NULL)\n      printf(\"\\nQueue is Empty!!!\\n\");\n   else{\n      struct Node *temp = front;\n      front = front -&gt; next;\n      printf(\"\\nDeleted element: %d\\n\", temp-&gt;data);\n      free(temp);\n   }\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#queue-using-linked-list-in-c_5","title":"Queue using Linked List in C","text":"<pre><code>...\nvoid display()\n{\n   if(front == NULL)\n      printf(\"\\nQueue is Empty!!!\\n\");\n   else{\n      struct Node *temp = front;\n      while(temp-&gt;next != NULL){\n     printf(\"%d---&gt;\",temp-&gt;data);\n     temp = temp -&gt; next;\n      }\n      printf(\"%d---&gt;NULL\\n\",temp-&gt;data);\n   }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_4","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_5","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-data-structure","title":"Circular Queue Data structure","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/circular-queue.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-datastructure","title":"Circular Queue Datastructure","text":"<ul> <li>In a normal Queue Data Structure, we can insert elements until queue becomes full. </li> <li>But once the queue becomes full, we can not insert the next element until all the elements are deleted from the queue. </li> <li>For example, consider the queue below.</li> <li>The queue after inserting all the elements into it is as follows...</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-datastructure_1","title":"Circular Queue Datastructure","text":"<ul> <li>Now consider the following situation after deleting three elements from the queue.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-datastructure_2","title":"Circular Queue Datastructure","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-datastructure_3","title":"Circular Queue Datastructure","text":"<ul> <li>This situation also says that Queue is Full and we cannot insert the new element because 'rear' is still at last position. </li> <li>In the above situation, even though we have empty positions in the queue we can not make use of them to insert the new element. </li> <li>This is the major problem in a normal queue data structure. </li> <li>To overcome this problem we use a circular queue data structure.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#what-is-circular-queue","title":"What is Circular Queue?","text":"<ul> <li>A Circular Queue can be defined as follows.</li> <li>A circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle.</li> <li>Graphical representation of a circular queue is as follows.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#implementation-of-circular-queue","title":"Implementation of Circular Queue","text":"<p>To implement a circular queue data structure using an array, we first perform the following steps before we implement actual operations.</p> <ul> <li>Step 1 -\u00a0Include all the\u00a0header files\u00a0which are used in the program and define a constant\u00a0'SIZE'\u00a0with specific value.</li> <li>Step 2 -\u00a0Declare all\u00a0user defined functions\u00a0used in circular queue implementation.</li> <li>Step 3 -\u00a0Create a one dimensional array with above defined SIZE (int cQueue[SIZE])</li> <li>Step 4 -\u00a0Define two integer variables\u00a0'front'\u00a0and 'rear' and initialize both with\u00a0'-1'. (int front = -1, rear = -1)</li> <li>Step 5 -\u00a0Implement main method by displaying menu of operations list and make suitable function calls to perform operation selected by the user on circular queue.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueuevalue-inserting-value-into-the-circular-queue","title":"enQueue(value) - Inserting value into the Circular Queue","text":"<p>In a circular queue, enQueue() is a function which is used to insert an element into the circular queue. In a circular queue, the new element is always inserted at\u00a0rear\u00a0position. The enQueue() function takes one integer value as parameter and inserts that value into the circular queue. We can use the following steps to insert an element into the circular queue...</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#enqueuevalue-inserting-value-into-the-circular-queue_1","title":"enQueue(value) - Inserting value into the Circular Queue","text":"<ul> <li>Step 1 -\u00a0Check whether\u00a0queue\u00a0is\u00a0FULL. ((rear == SIZE-1 &amp;&amp; front == 0) || (front == rear+1))</li> <li>Step 2 -\u00a0If it is\u00a0FULL, then display\u00a0\"Queue is FULL!!! Insertion is not possible!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT FULL, then check\u00a0rear == SIZE - 1 &amp;&amp; front != 0\u00a0if it is\u00a0TRUE, then set\u00a0rear = -1.</li> <li>Step 4 -\u00a0Increment\u00a0rear\u00a0value by one (rear++), set\u00a0queue[rear]\u00a0=\u00a0value\u00a0and check 'front == -1' if it is\u00a0TRUE, then set\u00a0front = 0.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-deleting-a-value-from-the-circular-queue","title":"deQueue() - Deleting a value from the Circular Queue","text":"<p>In a circular queue, deQueue() is a function used to delete an element from the circular queue. In a circular queue, the element is always deleted from\u00a0front\u00a0position. The deQueue() function doesn't take any value as a parameter. We can use the following steps to delete an element from the circular queue.</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#dequeue-deleting-a-value-from-the-circular-queue_1","title":"deQueue() - Deleting a value from the Circular Queue","text":"<ul> <li>Step 1 -\u00a0Check whether\u00a0queue\u00a0is\u00a0EMPTY. (front == -1 &amp;&amp; rear == -1)</li> <li>Step 2 -\u00a0If it is\u00a0EMPTY, then display\u00a0\"Queue is EMPTY!!! Deletion is not possible!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT EMPTY, then display\u00a0queue[front]\u00a0as deleted element and increment the\u00a0front\u00a0value by one (front ++). Then check whether\u00a0front == SIZE, if it is\u00a0TRUE, then set\u00a0front = 0. Then check whether both\u00a0front - 1\u00a0and\u00a0rear\u00a0are equal (front -1\u00a0==\u00a0rear), if it\u00a0TRUE, then set both\u00a0front\u00a0and\u00a0rear\u00a0to '-1' (front\u00a0=\u00a0rear\u00a0=\u00a0-1).</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#display-displays-the-elements-of-a-circular-queue","title":"display() - Displays the elements of a Circular Queue","text":"<p>We can use the following steps to display the elements of a circular queue...</p> <ul> <li>Step 1 -\u00a0Check whether\u00a0queue\u00a0is\u00a0EMPTY. (front == -1)</li> <li>Step 2 -\u00a0If it is\u00a0EMPTY, then display\u00a0\"Queue is EMPTY!!!\"\u00a0and terminate the function.</li> <li>Step 3 -\u00a0If it is\u00a0NOT EMPTY, then define an integer variable 'i' and set 'i\u00a0=\u00a0front'.</li> <li>Step 4 -\u00a0Check whether 'front &lt;= rear', if it is\u00a0TRUE, then display 'queue[i]' value and increment 'i' value by one (i++). Repeat the same until 'i &lt;= rear' becomes\u00a0FALSE.</li> <li>Step 5 -\u00a0If 'front &lt;= rear' is\u00a0FALSE, then display 'queue[i]' value and increment 'i' value by one (i++). Repeat the same until'i &lt;= SIZE - 1' becomes\u00a0FALSE.</li> <li>Step 6 -\u00a0Set\u00a0i\u00a0to\u00a00.</li> <li>Step 7 -\u00a0Again display 'cQueue[i]' value and increment\u00a0i\u00a0value by one (i++). Repeat the same until 'i &lt;= rear' becomes\u00a0FALSE.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-using-array-in-c","title":"Circular Queue using array in C","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n#define SIZE 5\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-using-array-in-c_1","title":"Circular Queue using array in C","text":"<pre><code>...\n\nvoid enQueue(int);\nvoid deQueue();\nvoid display();\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-using-array-in-c_2","title":"Circular Queue using array in C","text":"<pre><code>...\n\nint cQueue[SIZE], front = -1, rear = -1;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-using-array-in-c_3","title":"Circular Queue using array in C","text":"<pre><code>...\n\nvoid main()\n{\n   int choice, value;\n   clrscr();\n   while(1){\n      printf(\"\\n****** MENU ******\\n\");\n      printf(\"1. Insert\\n2. Delete\\n3. Display\\n4. Exit\\n\");\n      printf(\"Enter your choice: \");\n      scanf(\"%d\",&amp;choice);\n      switch(choice){\n     case 1: printf(\"\\nEnter the value to be insert:  \");\n         scanf(\"%d\",&amp;value);\n         enQueue(value);\n         break;\n     case 2: deQueue();\n         break;\n     case 3: display();\n         break;\n     case 4: exit(0);\n     default: printf(\"\\nPlease select the correct choice!!!\\n\");\n      }\n   }\n}\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-using-array-in-c_4","title":"Circular Queue using array in C","text":"<pre><code>...\n\nvoid enQueue(int value)\n{\n   if((front == 0 &amp;&amp; rear == SIZE - 1) || (front == rear+1))\n      printf(\"\\nCircular Queue is Full! Insertion not possible!!!\\n\");\n   else{\n      if(rear == SIZE-1 &amp;&amp; front != 0)\n     rear = -1;\n      cQueue[++rear] = value;\n      printf(\"\\nInsertion Success!!!\\n\");\n      if(front == -1)\n     front = 0;\n   }\n}\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-using-array-in-c_5","title":"Circular Queue using array in C","text":"<pre><code>...\n\nvoid deQueue()\n{\n   if(front == -1 &amp;&amp; rear == -1)\n      printf(\"\\nCircular Queue is Empty! Deletion is not possible!!!\\n\");\n   else{\n      printf(\"\\nDeleted element : %d\\n\",cQueue[front++]);\n      if(front == SIZE)\n     front = 0;\n      if(front-1 == rear)\n     front = rear = -1;\n   }\n}\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#circular-queue-using-array-in-c_6","title":"Circular Queue using array in C","text":"<pre><code>...\n\nvoid display()\n{\n   if(front == -1)\n      printf(\"\\nCircular Queue is Empty!!!\\n\");\n   else{\n      int i = front;\n      printf(\"\\nCircular Queue Elements are : \\n\");\n      if(front &lt;= rear){\n     while(i &lt;= rear)\n        printf(\"%d\\t\",cQueue[i++]);\n      }\n      else{\n     while(i &lt;= SIZE - 1)\n        printf(\"%d\\t\", cQueue[i++]);\n     i = 0;\n     while(i &lt;= rear)\n        printf(\"%d\\t\",cQueue[i++]);\n      }\n   }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_6","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_7","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-data-structure","title":"Double Ended Queue Data structure","text":"<ul> <li>BTech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/double-ended-queue.html</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-datastructure","title":"Double Ended Queue Datastructure","text":"<ul> <li>Double Ended Queue is also a Queue data structure in which the insertion and deletion operations are performed at </li> <li>both the ends (front\u00a0and\u00a0rear). </li> <li>That means, we can insert at both front and rear positions and can delete from both front and rear positions.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-datastructure_1","title":"Double Ended Queue Datastructure","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-datastructure_2","title":"Double Ended Queue Datastructure","text":"<ul> <li>Double Ended Queue can be represented in TWO ways, those are as follows.</li> <li> <ol> <li>Input Restricted Double Ended Queue</li> </ol> </li> <li> <ol> <li>Output Restricted Double Ended Queue</li> </ol> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#input-restricted-double-ended-queue","title":"Input Restricted Double Ended Queue","text":"<ul> <li>In input restricted double-ended queue, the insertion operation is performed at only one end and deletion operation is performed at both the ends.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output-restricted-double-ended-queue","title":"Output Restricted Double Ended Queue","text":"<p>In output restricted double ended queue, the deletion operation is performed at only one end and insertion operation is performed at both the ends.</p> <p></p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c","title":"Double Ended Queue using Array in C","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n#define SIZE 100\n\nvoid enQueue(int);\nint deQueueFront();\nint deQueueRear();\nvoid enQueueRear(int);\nvoid enQueueFront(int);\nvoid display();\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_1","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\nint queue[SIZE];\nint rear = 0, front = 0;\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_2","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\nint main()\n{\n    char ch;\n    int choice1, choice2, value;\n    printf(\"\\n******* Type of Double Ended Queue *******\\n\");\n     do\n     {\n          printf(\"\\n1.Input-restricted deque \\n\");\n          printf(\"2.output-restricted deque \\n\");\n          printf(\"\\nEnter your choice of Queue Type : \");\n          scanf(\"%d\",&amp;choice1);\n          switch(choice1)\n          {\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_3","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\n               case 1: \n                    printf(\"\\nSelect the Operation\\n\");\n                    printf(\"1.Insert\\n2.Delete from Rear\\n3.Delete from Front\\n4. Display\");\n                    do\n                    {\n                       printf(\"\\nEnter your choice for the operation in c deque: \");\n                       scanf(\"%d\",&amp;choice2);\n                       switch(choice2)\n                       {   \n                          case 1: enQueueRear(value);\n                                  display();\n                                 break;\n                             case 2: value = deQueueRear();\n                                 printf(\"\\nThe value deleted is %d\",value);\n                                  display();\n                                 break;\n                          case 3: value=deQueueFront();\n                                     printf(\"\\nThe value deleted is %d\",value);\n                                  display();\n                                     break;\n                          case 4: display();\n                                  break;\n                          default:printf(\"Wrong choice\");\n                       }\n                       printf(\"\\nDo you want to perform another operation (Y/N): \");\n                       ch=getch();\n                    }while(ch=='y'||ch=='Y');\n                    getch();\n                    break; \n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_4","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\n               case 2 :\n                   printf(\"\\n---- Select the Operation ----\\n\");\n                   printf(\"1. Insert at Rear\\n2. Insert at Front\\n3. Delete\\n4. Display\");\n                   do\n                   {\n                      printf(\"\\nEnter your choice for the operation: \");\n                      scanf(\"%d\",&amp;choice2);\n                      switch(choice2)\n                      {   \n                         case 1: enQueueRear(value);\n                                 display();\n                                 break;\n                         case 2: enQueueFront(value);\n                                 display();\n                                 break;\n                         case 3: value = deQueueFront();\n                                 printf(\"\\nThe value deleted is %d\",value); \n                                 display();\n                                 break;\n                         case 4: display();\n                                 break;\n                         default:printf(\"Wrong choice\");\n                       }\n                       printf(\"\\nDo you want to perform another operation (Y/N): \");\n                       ch=getch();\n                    } while(ch=='y'||ch=='Y');\n                    getch();\n                    break ;\n            }\n            printf(\"\\nDo you want to continue(y/n):\");\n            ch=getch();\n      }while(ch=='y'||ch=='Y');\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_5","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\nvoid enQueueRear(int value)\n{   \n     char ch;\n     if(front == SIZE/2)\n      {\n            printf(\"\\nQueue is full!!! Insertion is not possible!!! \");\n            return;\n      }\n      do\n      {\n            printf(\"\\nEnter the value to be inserted:\");\n            scanf(\"%d\",&amp;value);\n            queue[front] = value;\n            front++;\n            printf(\"Do you want to continue insertion Y/N\");\n            ch=getch();\n      }while(ch=='y');\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_6","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\nvoid enQueueFront(int value)\n{   \n     char ch;\n     if(front==SIZE/2)\n      {\n            printf(\"\\nQueue is full!!! Insertion is not possible!!!\");\n            return;\n      }\n      do\n      {\n            printf(\"\\nEnter the value to be inserted:\");\n            scanf(\"%d\",&amp;value);\n            rear--;\n            queue[rear] = value;\n            printf(\"Do you want to continue insertion Y/N\");\n            ch = getch();\n      }\n      while(ch == 'y');\n}\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_7","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\nint deQueueRear()\n{\n     int deleted;\n     if(front == rear)\n     {\n            printf(\"\\nQueue is Empty!!! Deletion is not possible!!!\");\n            return 0;\n     }\n     front--;\n     deleted = queue[front+1];\n     return deleted;\n}\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_8","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\nint deQueueFront()\n{\n     int deleted;\n     if(front == rear)\n     {\n            printf(\"\\nQueue is Empty!!! Deletion is not possible!!!\");\n            return 0;\n     }\n     rear++;\n     deleted = queue[rear-1];\n     return deleted;\n}\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#double-ended-queue-using-array-in-c_9","title":"Double Ended Queue using Array in C","text":"<pre><code>...\n\nvoid display()\n{\n     int i;\n     if(front == rear)\n        printf(\"\\nQueue is Empty!!! Deletion is not possible!!!\");\n     else{\n        printf(\"\\nThe Queue elements are:\");\n        for(i=rear; i &lt; front; i++)\n        {\n           printf(\"%d\\t \",queue[i]);\n        }\n     }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_8","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#multilevel-queue-mlq","title":"Multilevel Queue (MLQ)","text":"<ul> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/multilevel-queue-mlq-cpu-scheduling/</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#priority-queue","title":"Priority Queue","text":"<ul> <li>A priority queue is a special type of queue in which each element is associated with a priority and is served according to its priority. If elements with the same priority occur, they are served according to their order in the queue.</li> </ul> <ul> <li>Insertion occurs based on the arrival of the values and removal occurs based on priority.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#hanoi-tower","title":"Hanoi Tower","text":"<ul> <li>Geeks for Geeks</li> <li>Recursive Version<ul> <li>Program for Tower of Hanoi - GeeksforGeeks</li> </ul> </li> <li>Iterative Version<ul> <li>Iterative Tower of Hanoi - GeeksforGeeks</li> </ul> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#hanoi-tower-iterative-algorithm","title":"Hanoi Tower Iterative Algorithm:","text":"<pre><code>S = Source\nA = Aux\nD = Dest\n</code></pre> Calculate the total number of moves required i.e. <p>\\(pow(2, n)- 1\\) here n is number of disks.</p>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#hanoi-tower-iterative-algorithm_1","title":"Hanoi Tower Iterative Algorithm:","text":"<ul> <li>If number of disks (i.e. n) is even then interchange destination    pole and auxiliary pole.</li> <li>for i = 1 to total number of moves:</li> <li>if i%3 == 1:<ul> <li>legal movement of top disk between source pole and destination pole</li> </ul> </li> <li>if i%3 == 2:<ul> <li>legal movement top disk between source pole and auxiliary pole</li> </ul> </li> <li>if i%3 == 0:<ul> <li>legal movement top disk between auxiliary pole and destination pole</li> </ul> </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#hanoi-tower-iterative-algorithm_2","title":"Hanoi Tower Iterative Algorithm","text":"<ul> <li>Tower of Hanoi is a mathematical puzzle where we have three rods (A,\u00a0B, and\u00a0C) and\u00a0N\u00a0disks. </li> <li>Initially, all the disks are stacked in decreasing value of diameter </li> <li>i.e., the smallest disk is placed on the top and they are on rod\u00a0A. </li> <li>The objective of the puzzle is to move the entire stack to another rod (here considered\u00a0C), obeying the following simple rules</li> <li>Only one disk can be moved at a time.</li> <li>Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk can only be moved if it is the uppermost disk on a stack.</li> <li>No disk may be placed on top of a smaller disk.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#hanoi-tower-iterative-algorithm-examples","title":"Hanoi Tower Iterative Algorithm Examples","text":"<pre><code>**Input**: 2  \n**Output:**\u00a0Disk 1 moved from A to B  \nDisk 2 moved from A to C  \nDisk 1 moved from B to C\n</code></pre> <pre><code>**Input:**\u00a03  \n**Output:**\u00a0Disk 1 moved from A to C  \n Disk 2 moved from A to B  \n Disk 1 moved from C to B  \n Disk 3 moved from A to C  \n Disk 1 moved from B to A  \n Disk 2 moved from B to C  \n Disk 1 moved from A to C\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-using-recursion","title":"Tower of Hanoi using Recursion","text":"<ul> <li>The idea is to use the helper node to reach the destination using recursion. Below is the pattern for this problem:</li> <li>Shift <code>N-1</code> disks from <code>A</code> to <code>B</code>, using <code>C</code>.</li> <li>Shift last disk from <code>A</code> to <code>C</code>.</li> <li>Shift <code>N-1</code> disks from <code>B</code> to <code>C</code>, using <code>A</code>.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-using-recursion_1","title":"Tower of Hanoi using Recursion","text":"<p>Image illustration for 3 disks</p> <ul> <li>Follow the steps below to solve the problem</li> <li>Create a function\u00a0towerOfHanoi\u00a0where pass the\u00a0N\u00a0(current number of disk),\u00a0from_rod,\u00a0to_rod,\u00a0aux_rod.</li> <li>Make a function call for N \u2013 1 th disk.</li> <li>Then print the current the disk along with\u00a0from_rod\u00a0and\u00a0to_rod</li> <li>Again make a function call for N \u2013 1 th disk.</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive","title":"Tower of Hanoi in C++ Recursive","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#c-recursive-function-to-solve-tower-of-hanoi-puzzle-include-bitsstdch-using-namespace-std-void-towerofhanoiint-n-char-from_rod-char-to_rod-char-aux_rod-if-n-0-return-towerofhanoin-1-from_rod-aux_rod-to_rod-cout-move-disk-n-from-rod-from_rod-to-rod-to_rod-endl-towerofhanoin-1-aux_rod-to_rod-from_rod","title":"<pre><code>// C++ recursive function to\n// solve tower of hanoi puzzle\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid towerOfHanoi(int n, char from_rod, char to_rod,\n                char aux_rod)\n{\n    if (n == 0) {\n        return;\n    }\n    towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);\n    cout &lt;&lt; \"Move disk \" &lt;&lt; n &lt;&lt; \" from rod \" &lt;&lt; from_rod\n        &lt;&lt; \" to rod \" &lt;&lt; to_rod &lt;&lt; endl;\n    towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);\n}\n\n...\n</code></pre>","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_1","title":"Tower of Hanoi in C++ Recursive","text":"<pre><code>...\n\n// Driver code\nint main()\n{\n    int N = 3;\n\n    // A, B and C are names of rods\n    towerOfHanoi(N, 'A', 'C', 'B');\n    return 0;\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-java-recursive","title":"Tower of Hanoi in Java Recursive","text":"<pre><code>// JAVA recursive function to\n// solve tower of hanoi puzzle\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nclass GFG {\n\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-java-recursive_1","title":"Tower of Hanoi in Java Recursive","text":"<pre><code>...\n    static void towerOfHanoi(int n, char from_rod,\n                            char to_rod, char aux_rod)\n    {\n        if (n == 0) {\n            return;\n        }\n        towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);\n        System.out.println(\"Move disk \" + n + \" from rod \"\n                        + from_rod + \" to rod \"\n                        + to_rod);\n        towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);\n    }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-java-recursive_2","title":"Tower of Hanoi in Java Recursive","text":"<pre><code>...\n    // Driver code\n    public static void main(String args[])\n    {\n        int N = 3;\n\n        // A, B and C are names of rods\n        towerOfHanoi(N, 'A', 'C', 'B');\n    }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_2","title":"Tower of Hanoi in C# Recursive","text":"<pre><code>// C# recursive program to solve tower of hanoi puzzle\nusing System;\nclass GFG {\n    static void towerOfHanoi(int n, char from_rod,\n                            char to_rod, char aux_rod)\n    {\n        if (n == 0) {\n            return;\n        }\n        towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);\n        Console.WriteLine(\"Move disk \" + n + \" from rod \"\n                        + from_rod + \" to rod \" + to_rod);\n        towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);\n    }\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_3","title":"Tower of Hanoi in C# Recursive","text":"<pre><code>...\n    // Driver method\n    public static void Main(String[] args)\n    {\n        int N = 3;\n\n        // A, B and C are names of rods\n        towerOfHanoi(N, 'A', 'C', 'B');\n    }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#output_9","title":"Output","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#move-disk-1-from-rod-a-to-rod-c-move-disk-2-from-rod-a-to-rod-b-move-disk-1-from-rod-c-to-rod-b-move-disk-3-from-rod-a-to-rod-c-move-disk-1-from-rod-b-to-rod-a-move-disk-2-from-rod-b-to-rod-c-move-disk-1-from-rod-a-to-rod-c","title":"<pre><code>Move disk 1 from rod A to rod C\nMove disk 2 from rod A to rod B\nMove disk 1 from rod C to rod B\nMove disk 3 from rod A to rod C\nMove disk 1 from rod B to rod A\nMove disk 2 from rod B to rod C\nMove disk 1 from rod A to rod C\n</code></pre>","text":"","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#time-complexity","title":"Time complexity","text":"<ul> <li>\\(O(2N)\\) </li> <li>There are two possibilities for every disk. </li> <li>Therefore, 2 * 2 * 2 * . . . * 2(N times) is 2N  </li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#auxiliary-space","title":"Auxiliary Space","text":"<ul> <li>\\(O(N)\\)</li> <li>Function call stack space</li> </ul>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-java-recursive_3","title":"Tower of Hanoi in Java Recursive","text":"<pre><code>// Assuming n-th disk is\n// bottom disk (count down)\nclass GFG {\n\nstatic void tower(int n, char sourcePole,\n                char destinationPole, char auxiliaryPole)\n{\n    // Base case (termination condition)\n    if (0 == n)\n    return;\n\n    // Move first n-1 disks from source pole\n    // to auxiliary pole using destination as\n    // temporary pole\n    tower(n - 1, sourcePole, auxiliaryPole,\n                        destinationPole);\n\n    // Move the remaining disk from source\n    // pole to destination pole\n    System.out.printf(\"Move the disk %d from %c to %c\\n\",\n                        n, sourcePole, destinationPole);\n\n    // Move the n-1 disks from auxiliary (now source)\n    // pole to destination pole using source pole as\n    // temporary (auxiliary) pole\n    tower(n - 1, auxiliaryPole, destinationPole, sourcePole);\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-java-recursive_4","title":"Tower of Hanoi in Java Recursive","text":"<pre><code>public static void main(String[] args)\n{\n    tower(3, 'S', 'D', 'A');\n}\n}\n\n// This code is contributed by Smitha Dinesh Semwal.\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_4","title":"Tower of Hanoi in C# Recursive","text":"<pre><code>// Assuming n-th disk is bottom disk\n// (count down)\nusing System;\n\nclass GFG {\n\n    static void tower(int n, char sourcePole,\n                        char destinationPole,\n                        char auxiliaryPole)\n    {\n\n        // Base case (termination condition)\n        if (0 == n)\n            return;\n\n        // Move first n-1 disks from source\n        // pole to auxiliary pole using\n        // destination as temporary pole\n        tower(n - 1, sourcePole, auxiliaryPole,\n                            destinationPole);\n\n        // Move the remaining disk from source\n        // pole to destination pole\n        Console.WriteLine(\"Move the disk \" + n\n                + \"from \" + sourcePole + \"to \"\n                        + destinationPole);\n\n        // Move the n-1 disks from auxiliary\n        // (now source) pole to destination\n        // pole using source pole as temporary\n        // (auxiliary) pole\n        tower(n - 1, auxiliaryPole,\n                destinationPole, sourcePole);\n    }\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_5","title":"Tower of Hanoi in C# Recursive","text":"<pre><code>    // Driver code\n    public static void Main()\n    {\n        tower(3, 'S', 'D', 'A');\n    }\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_6","title":"Tower of Hanoi in C Recursive","text":"<pre><code>#include&lt;stdio.h&gt;\n\n// Assuming n-th disk is bottom disk (count down)\nvoid tower(int n, char sourcePole, char destinationPole, char auxiliaryPole)\n{\n// Base case (termination condition)\nif(0 == n)\n    return;\n\n// Move first n-1 disks from source pole\n// to auxiliary pole using destination as\n// temporary pole\ntower(n-1, sourcePole, auxiliaryPole,\n    destinationPole);\n\n    // Move the remaining disk from source\n// pole to destination pole\nprintf(\"Move the disk %d from %c to %c\\n\",\n    n,sourcePole, destinationPole);\n\n// Move the n-1 disks from auxiliary (now source)\n// pole to destination pole using source pole as\n// temporary (auxiliary) pole\ntower(n-1, auxiliaryPole, destinationPole,\n    sourcePole);\n}\n\n...\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_7","title":"Tower of Hanoi in C Recursive","text":"<pre><code>...\n\nint main()\n{\ntower(3, 'S', 'D', 'A');\n\nreturn 0;\n}\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_8","title":"Tower of Hanoi in C# Recursive","text":"<pre><code>// Assuming n-th disk is bottom disk\n// (count down)\nusing System;\n\nclass GFG {\n\n    static void tower(int n, char sourcePole,\n                        char destinationPole,\n                        char auxiliaryPole)\n    {\n\n        // Base case (termination condition)\n        if (0 == n)\n            return;\n\n        // Move first n-1 disks from source\n        // pole to auxiliary pole using\n        // destination as temporary pole\n        tower(n - 1, sourcePole, auxiliaryPole,\n                            destinationPole);\n\n        // Move the remaining disk from source\n        // pole to destination pole\n        Console.WriteLine(\"Move the disk \" + n\n                + \"from \" + sourcePole + \"to \"\n                        + destinationPole);\n\n        // Move the n-1 disks from auxiliary\n        // (now source) pole to destination\n        // pole using source pole as temporary\n        // (auxiliary) pole\n        tower(n - 1, auxiliaryPole,\n                destinationPole, sourcePole);\n    }\n</code></pre>","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-3-stack/ce205-week-3-stack/#tower-of-hanoi-in-c-recursive_9","title":"Tower of Hanoi in C# Recursive","text":"<pre><code>    // Driver code\n    public static void Main()\n    {\n        tower(3, 'S', 'D', 'A');\n    }\n}\n</code></pre> \\[ End-Of-Week-3 \\]","tags":["ce205-week-3","stacks","queues","algorithms"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/","title":"CE205 Data Structures Week-4","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#week-4","title":"Week-4","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-data-structure-types-and-applications-binary-tree-tree-traversals-heaps","title":"Tree Data Structure Types and Applications (Binary Tree, Tree Traversals, Heaps)","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#outline","title":"Outline","text":"<ul> <li> <p>Graph Representation Tools </p> </li> <li> <p>Tree Structures and Binary Tree and Traversals (In-Order, Pre-Order, Post-Order)</p> </li> <li> <p>Heaps (Max, Min, Binary , Binomial, Fibonacci, Leftist, K-ary) and Priority Queue</p> </li> <li> <p>Heap Sort</p> </li> <li> <p>Huffman Coding</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#graph-representation-tools","title":"Graph Representation Tools","text":"<ul> <li>Microsoft Automatic Graph Layout</li> <li>https://www.microsoft.com/en-us/download/details.aspx?id=52034 </li> <li>https://github.com/microsoft/automatic-graph-layout</li> <li>Graphviz</li> <li>https://graphviz.org/resources/</li> <li>Plantuml</li> <li>https://ucoruh.github.io/ce204-object-oriented-programming/week-5/ce204-week-5/#calling-plantuml-from-java_1</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#graph-representation-tools_1","title":"Graph Representation Tools","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#microsoft-automatic-graph-layout","title":"Microsoft Automatic Graph Layout","text":"<pre><code>using System;\nusing System.Collections.Generic; \nusing System.Windows.Forms; \nclass ViewerSample { \n    public static void Main() { \n    //create a form \n        System.Windows.Forms.Form form = new System.Windows.Forms.Form();\n    //create a viewer object \n        Microsoft.Msagl.GraphViewerGdi.GViewer viewer = new Microsoft.Msagl.GraphViewerGdi.GViewer();\n    //create a graph object \n        Microsoft.Msagl.Drawing.Graph graph = new Microsoft.Msagl.Drawing.Graph(\"graph\");\n    //create the graph content \n        graph.AddEdge(\"A\", \"B\");\n        graph.AddEdge(\"B\", \"C\");\n        graph.AddEdge(\"A\", \"C\").Attr.Color = Microsoft.Msagl.Drawing.Color.Green;\n        graph.FindNode(\"A\").Attr.FillColor = Microsoft.Msagl.Drawing.Color.Magenta;\n        graph.FindNode(\"B\").Attr.FillColor = Microsoft.Msagl.Drawing.Color.MistyRose;\n        Microsoft.Msagl.Drawing.Node c = graph.FindNode(\"C\");\n        c.Attr.FillColor = Microsoft.Msagl.Drawing.Color.PaleGreen;\n        c.Attr.Shape = Microsoft.Msagl.Drawing.Shape.Diamond;\n    //bind the graph to the viewer \n        viewer.Graph = graph;\n    //associate the viewer with the form \n        form.SuspendLayout();\n        viewer.Dock = System.Windows.Forms.DockStyle.Fill;\n        form.Controls.Add(viewer);\n        form.ResumeLayout();\n    //show the form \n        form.ShowDialog();\n    } \n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#graph-representation-tools_2","title":"Graph Representation Tools","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#microsoft-automatic-graph-layout_1","title":"Microsoft Automatic Graph Layout","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#msagl-modules","title":"MSAGL Modules","text":"<p>The Core Layout engine (AutomaticGraphLayout.dll)\u00a0-\u00a0NuGet package\u00a0This .NET asssembly contains the core layout functionality. Use this library if you just want MSAGL to perform the layout only and afterwards you will use a separate tool to perform the rendering and visalization.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#msagl-modules_1","title":"MSAGL Modules","text":"<p>The Drawing module (AutomaticGraphLayout.Drawing.dll)\u00a0-\u00a0NuGet package\u00a0The Definitions of different drawing attributes like colors, line styles, etc. It also contains definitions of a node class, an edge class, and a graph class. By using these classes a user can create a graph object and use it later for layout, and rendering.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#msagl-modules_2","title":"MSAGL Modules","text":"<p>A WPF control (Microsoft.Msagl.WpfGraphControl.dll)\u00a0-\u00a0NuGet package\u00a0The viewer control lets you visualize graphs and has and some other rendering functionality. Key features: (1) Pan and Zoom (2) Navigate Forward and Backward (3) tooltips and highlighting on graph entities (4) Search for and focus on graph entities.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#msagl-modules_3","title":"MSAGL Modules","text":"<p>A Windows Forms Viewer control (Microsoft.Msagl.GraphViewerGdi.dll)\u00a0-\u00a0NuGet package\u00a0The viewer control lets you visualize graphs and has and some other rendering functionality. Key features: (1) Pan and Zoom (2) Navigate Forward and Backward (3) tooltips and highlighting on graph entities (4) Search for and focus on graph entities.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#custom-msagl-demo-project","title":"Custom MSAGL Demo Project","text":"<ul> <li> <p>Clone and test your self</p> </li> <li> <p>GitHub - ucoruh/microsoft-graph-layout-cs-demo: Example Usage of https://github.com/microsoft/automatic-graph-layout</p> </li> <li> <p>Also you can find another example in this homework</p> </li> <li> <p>GitHub - ucoruh/ce205-hw3-template: CE205-HW3-Template</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#custom-msagl-demo-project_1","title":"Custom MSAGL Demo Project","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#custom-msagl-demo-project_2","title":"Custom MSAGL Demo Project","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-structures-and-binary-tree-and-traversals-in-order-pre-order-post-order","title":"Tree Structures and Binary Tree and Traversals (In-Order, Pre-Order, Post-Order)","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-terminology","title":"Tree - Terminology","text":"<ul> <li>Btech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/tree-terminology.html</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-terminology_1","title":"Tree - Terminology","text":"<ul> <li> <p>In linear data structure data is organized in sequential order and in non-linear data structure data is organized in random order. </p> </li> <li> <p>A tree is a very popular non-linear data structure used in a wide range of applications. A tree data structure can be defined as follows.</p> </li> <li> <p>Tree is a non-linear data structure which organizes data in hierarchical structure and this is a recursive definition.</p> </li> <li> <p>A tree data structure can also be defined as follows</p> </li> <li> <p>Tree data structure is a collection of data (Node) which is organized in hierarchical structure recursively</p> </li> <li> <p>In tree data structure, every individual element is called as\u00a0Node. </p> </li> <li> <p>Node in a tree data structure stores the actual data of that particular element and link to next element in hierarchical structure.  </p> </li> <li> <p>In a tree data structure, if we have\u00a0N\u00a0number of nodes then we can have a maximum of\u00a0N-1\u00a0number of links.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-example","title":"Tree Example","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-terminology_2","title":"Tree Terminology","text":"<ul> <li>In a tree data structure, we use the following terminology</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#1-root","title":"1. Root","text":"<ul> <li> <p>In a tree data structure, the first node is called as\u00a0Root Node. </p> </li> <li> <p>Every tree must have a root node. </p> </li> <li> <p>We can say that the root node is the origin of the tree data structure. </p> </li> <li> <p>In any tree, there must be only one root node. </p> </li> <li> <p>We never have multiple root nodes in a tree.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#2-edge","title":"2. Edge","text":"<ul> <li>In a tree data structure, the connecting link between any two nodes is called as\u00a0EDGE. In a tree with 'N' number of nodes there will be a maximum of 'N-1' number of edges.</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#3-parent","title":"3. Parent","text":"<ul> <li> <p>In a tree data structure, the node which is a predecessor of any node is called as\u00a0PARENT NODE. </p> </li> <li> <p>In simple words, the node which has a branch from it to any other node is called a parent node. </p> </li> <li> <p>Parent node can also be defined as \"The node which has child / children\".</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#4-child","title":"4. Child","text":"<ul> <li> <p>In a tree data structure, the node which is descendant of any node is called as\u00a0CHILD Node. In simple words, the node which has a link from its parent node is called as child node. </p> </li> <li> <p>In a tree, any parent node can have any number of child nodes. In a tree, all the nodes except root are child nodes.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#5-siblings","title":"5. Siblings","text":"<ul> <li> <p>In a tree data structure, nodes which belong to same Parent are called as\u00a0SIBLINGS</p> </li> <li> <p>In simple words, the nodes with the same parent are called Sibling nodes.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#6-leaf","title":"6. Leaf","text":"<ul> <li> <p>In a tree data structure, the node which does not have a child is called as\u00a0LEAF Node. </p> </li> <li> <p>In simple words, a leaf is a node with no child.  </p> </li> <li> <p>In a tree data structure, the leaf nodes are also called as\u00a0External Nodes. External node is also a node with no child. </p> </li> <li> <p>In a tree,\u00a0leaf node is also called as 'Terminal' node.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#7-internal-nodes","title":"7. Internal Nodes","text":"<ul> <li> <p>In a tree data structure, the node which has atleast one child is called as\u00a0INTERNAL Node. In simple words, an internal node is a node with atleast one child.  </p> </li> <li> <p>In a tree data structure, nodes other than leaf nodes are called as\u00a0Internal Nodes.\u00a0\u00a0The root node is also said to be Internal Node </p> </li> <li> <p>if the tree has more than one node.\u00a0Internal nodes are also called as 'Non-Terminal' nodes.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#8-degree","title":"8. Degree","text":"<ul> <li> <p>In a tree data structure, the total number of children of a node is called as\u00a0DEGREE\u00a0of that Node. In simple words, the Degree of a node is total number of children it has. </p> </li> <li> <p>The highest degree of a node among all the nodes in a tree is called as 'Degree of Tree'</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#9-level","title":"9. Level","text":"<ul> <li> <p>In a tree data structure, the root node is said to be at Level 0 and the children of root node are at Level 1 and the children of the nodes which are at Level 1 will be at Level 2 and so on</p> </li> <li> <p>In simple words, in a tree each step from top to bottom is called as a Level and the Level count starts with '0' and incremented by one at each level (Step).</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#10-height","title":"10. Height","text":"<ul> <li> <p>In a tree data structure, the total number of edges from leaf node to a particular node in the longest path is called as\u00a0HEIGHT\u00a0of that Node.\u00a0</p> </li> <li> <p>In a tree, height of the root node is said to be\u00a0height of the tree. </p> </li> <li> <p>In a tree,\u00a0height of all leaf nodes is '0'.</p> </li> </ul> <p></p> <ul> <li> <p>In a tree data structure, the total number of egdes from root node to a particular node is called as\u00a0DEPTH\u00a0of that Node.\u00a0</p> </li> <li> <p>In a tree, the total number of edges from root node to a leaf node in the longest path is said to be\u00a0Depth of the tree. </p> </li> <li> <p>In simple words, the highest depth of any leaf node in a tree is said to be depth of that tree. </p> </li> <li> <p>In a tree,\u00a0depth of the root node is '0'.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#12-path","title":"12. Path","text":"<ul> <li> <p>In a tree data structure, the sequence of Nodes and Edges from one node to another node is called as\u00a0PATH\u00a0between that two Nodes.\u00a0</p> </li> <li> <p>Length of a Path\u00a0is total number of nodes in that path.\u00a0In below example\u00a0the path A - B - E - J has length 4.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#13-sub-tree","title":"13. Sub Tree","text":"<ul> <li> <p>In a tree data structure, each child from a node forms a subtree recursively. </p> </li> <li> <p>Every child node will form a subtree on its parent node.</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-representations","title":"Tree Representations","text":"<ul> <li>Btech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/tree-representations.html</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#tree-representations_1","title":"Tree Representations","text":"<p>A tree data structure can be represented in two methods. Those methods are as follows.</p> <ol> <li>List Representation</li> <li>Left Child - Right Sibling Representation</li> </ol> <p>Consider the following tree.</p> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#1-list-representation","title":"1. List Representation","text":"<ul> <li> <p>In this representation, we use two types of nodes one for representing the node with data called 'data node' and another for representing only references called 'reference node'. </p> </li> <li> <p>We start with a 'data node' from the root node in the tree. </p> </li> <li> <p>Then it is linked to an internal node through a 'reference node' which is further linked to any other node directly. </p> </li> <li> <p>This process repeats for all the nodes in the tree.  </p> </li> </ul> <p>The above example tree can be represented using List representation as follows...</p> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#2-left-child-right-sibling-representation","title":"2. Left Child - Right Sibling Representation","text":"<ul> <li> <p>In this representation, we use a list with one type of node which consists of three fields namely Data field, Left child reference field and Right sibling reference field. </p> </li> <li> <p>Data field stores the actual value of a node, left reference field stores the address of the left child and right reference field stores the address of the right sibling node. </p> </li> </ul> <ul> <li>Graphical representation of that node is as follows.</li> </ul> <p></p> <ul> <li> <p>In this representation, every node's data field stores the actual value of that node. If that node has left a child, then left reference field stores the address of that left child node otherwise stores NULL. </p> </li> <li> <p>If that node has the right sibling, then right reference field stores the address of right sibling node otherwise stores NULL.  </p> </li> </ul> <ul> <li>The above example tree can be represented using Left Child - Right Sibling representation as follows.</li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-datastructure","title":"Binary Tree Datastructure","text":"<ol> <li>Construction and Conversion</li> <li>Checking and Printing</li> <li>Summation</li> <li>Longest Common Ancestor</li> </ol> <p>Lowest Common Ancestor in a Binary Tree - GeeksforGeeks - Btech Smart Class   - http://www.btechsmartclass.com/data_structures/binary-tree.html - William Fiset   - https://www.youtube.com/watch?v=sD1IoalFomA&amp;ab_channel=WilliamFiset</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#longet-common-ancestor","title":"Longet Common Ancestor","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#longet-common-ancestor_1","title":"Longet Common Ancestor","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#lowest-common-ancestor-in-a-binary-tree","title":"Lowest Common Ancestor in a Binary Tree","text":"<p>The\u00a0lowest common ancestor\u00a0is the lowest node in the tree that has both n1 and n2 as\u00a0descendants,\u00a0where n1 and n2 are the nodes for which we wish to find the LCA. Hence, the LCA of a binary tree with nodes n1 and n2 is the shared ancestor of n1 and n2 that is located farthest from the root.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#application-of-lowest-common-ancestorlca","title":"Application of Lowest Common Ancestor(LCA)","text":"<p>To determine the distance between pairs of nodes in a tree: the distance from n1 to n2 can be computed as the distance from the root to n1, plus the distance from the root to n2, minus twice the distance from the root to their lowest common ancestor. </p> <p></p> <p>Lowest Common Ancestor in Binary Tree</p> <p>Illustration:</p> <p></p> <p>Find the LCA of 5 and 6</p> <p>Path from root to 5 = { 1, 2, 5 } Path from root to 6 = { 1, 3, 6 }</p> <ul> <li>We start checking from 0 index. As both of the value matches( pathA[0] = pathB[0] ), we move to the next index.</li> <li>pathA[1] not equals to pathB[1], there\u2019s a mismatch so we consider the previous value.\u00a0</li> <li>Therefore the LCA of (5,6) = 1</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#lca-in-c","title":"LCA in C++","text":"<pre><code>// C++ Program for Lowest Common Ancestor in a Binary Tree\n// A O(n) solution to find LCA of two given values n1 and n2\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// A Binary Tree node\nstruct Node\n{\n    int key;\n    struct Node *left, *right;\n};\n\n// Utility function creates a new binary tree node with given key\nNode * newNode(int k)\n{\n    Node *temp = new Node;\n    temp-&gt;key = k;\n    temp-&gt;left = temp-&gt;right = NULL;\n    return temp;\n}\n\n// Finds the path from root node to given root of the tree, Stores the\n// path in a vector path[], returns true if path exists otherwise false\nbool findPath(Node *root, vector&lt;int&gt; &amp;path, int k)\n{\n    // base case\n    if (root == NULL) return false;\n\n    // Store this node in path vector. The node will be removed if\n    // not in path from root to k\n    path.push_back(root-&gt;key);\n\n    // See if the k is same as root's key\n    if (root-&gt;key == k)\n        return true;\n\n    // Check if k is found in left or right sub-tree\n    if ( (root-&gt;left &amp;&amp; findPath(root-&gt;left, path, k)) ||\n        (root-&gt;right &amp;&amp; findPath(root-&gt;right, path, k)) )\n        return true;\n\n    // If not present in subtree rooted with root, remove root from\n    // path[] and return false\n    path.pop_back();\n    return false;\n}\n\n// Returns LCA if node n1, n2 are present in the given binary tree,\n// otherwise return -1\nint findLCA(Node *root, int n1, int n2)\n{\n    // to store paths to n1 and n2 from the root\n    vector&lt;int&gt; path1, path2;\n\n    // Find paths from root to n1 and root to n2. If either n1 or n2\n    // is not present, return -1\n    if ( !findPath(root, path1, n1) || !findPath(root, path2, n2))\n        return -1;\n\n    /* Compare the paths to get the first different value */\n    int i;\n    for (i = 0; i &lt; path1.size() &amp;&amp; i &lt; path2.size() ; i++)\n        if (path1[i] != path2[i])\n            break;\n    return path1[i-1];\n}\n\n// Driver program to test above functions\nint main()\n{\n    // Let us create the Binary Tree shown in above diagram.\n    Node * root = newNode(1);\n    root-&gt;left = newNode(2);\n    root-&gt;right = newNode(3);\n    root-&gt;left-&gt;left = newNode(4);\n    root-&gt;left-&gt;right = newNode(5);\n    root-&gt;right-&gt;left = newNode(6);\n    root-&gt;right-&gt;right = newNode(7);\n    cout &lt;&lt; \"LCA(4, 5) = \" &lt;&lt; findLCA(root, 4, 5);\n    cout &lt;&lt; \"\\nLCA(4, 6) = \" &lt;&lt; findLCA(root, 4, 6);\n    cout &lt;&lt; \"\\nLCA(3, 4) = \" &lt;&lt; findLCA(root, 3, 4);\n    cout &lt;&lt; \"\\nLCA(2, 4) = \" &lt;&lt; findLCA(root, 2, 4);\n    return 0;\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#lca-in-java","title":"LCA in Java","text":"<pre><code>// Java Program for Lowest Common Ancestor in a Binary Tree\n// A O(n) solution to find LCA of two given values n1 and n2\nimport java.util.ArrayList;\nimport java.util.List;\n\n// A Binary Tree node\nclass Node {\n    int data;\n    Node left, right;\n\n    Node(int value) {\n        data = value;\n        left = right = null;\n    }\n}\n\npublic class BT_NoParentPtr_Solution1\n{\n\n    Node root;\n    private List&lt;Integer&gt; path1 = new ArrayList&lt;&gt;();\n    private List&lt;Integer&gt; path2 = new ArrayList&lt;&gt;();\n\n    // Finds the path from root node to given root of the tree.\n    int findLCA(int n1, int n2) {\n        path1.clear();\n        path2.clear();\n        return findLCAInternal(root, n1, n2);\n    }\n\n    private int findLCAInternal(Node root, int n1, int n2) {\n\n        if (!findPath(root, n1, path1) || !findPath(root, n2, path2)) {\n            System.out.println((path1.size() &gt; 0) ? \"n1 is present\" : \"n1 is missing\");\n            System.out.println((path2.size() &gt; 0) ? \"n2 is present\" : \"n2 is missing\");\n            return -1;\n        }\n\n        int i;\n        for (i = 0; i &lt; path1.size() &amp;&amp; i &lt; path2.size(); i++) {\n\n        // System.out.println(path1.get(i) + \" \" + path2.get(i));\n            if (!path1.get(i).equals(path2.get(i)))\n                break;\n        }\n\n        return path1.get(i-1);\n    }\n\n    // Finds the path from root node to given root of the tree, Stores the\n    // path in a vector path[], returns true if path exists otherwise false\n    private boolean findPath(Node root, int n, List&lt;Integer&gt; path)\n    {\n        // base case\n        if (root == null) {\n            return false;\n        }\n\n        // Store this node . The node will be removed if\n        // not in path from root to n.\n        path.add(root.data);\n\n        if (root.data == n) {\n            return true;\n        }\n\n        if (root.left != null &amp;&amp; findPath(root.left, n, path)) {\n            return true;\n        }\n\n        if (root.right != null &amp;&amp; findPath(root.right, n, path)) {\n            return true;\n        }\n\n        // If not present in subtree rooted with root, remove root from\n        // path[] and return false\n        path.remove(path.size()-1);\n\n        return false;\n    }\n\n    // Driver code\n    public static void main(String[] args)\n    {\n        BT_NoParentPtr_Solution1 tree = new BT_NoParentPtr_Solution1();\n        tree.root = new Node(1);\n        tree.root.left = new Node(2);\n        tree.root.right = new Node(3);\n        tree.root.left.left = new Node(4);\n        tree.root.left.right = new Node(5);\n        tree.root.right.left = new Node(6);\n        tree.root.right.right = new Node(7);\n\n        System.out.println(\"LCA(4, 5): \" + tree.findLCA(4,5));\n        System.out.println(\"LCA(4, 6): \" + tree.findLCA(4,6));\n        System.out.println(\"LCA(3, 4): \" + tree.findLCA(3,4));\n        System.out.println(\"LCA(2, 4): \" + tree.findLCA(2,4));\n\n    }\n}\n// This code is contributed by Sreenivasulu Rayanki.\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#lca-in-c_1","title":"LCA in C","text":"<pre><code>// C# Program for Lowest Common\n// Ancestor in a Binary Tree\n// A O(n) solution to find LCA\n// of two given values n1 and n2\nusing System.Collections;\nusing System;\n\n// A Binary Tree node\nclass Node\n{\npublic int data;\npublic Node left, right;\n\npublic Node(int value)\n{\n    data = value;\n    left = right = null;\n}\n}\n\npublic class BT_NoParentPtr_Solution1\n{\n\nNode root;\nprivate ArrayList path1 =\n        new ArrayList();\nprivate ArrayList path2 =\n        new ArrayList();\n\n// Finds the path from root\n// node to given root of the\n// tree.\nint findLCA(int n1,\n            int n2)\n{\n    path1.Clear();\n    path2.Clear();\n    return findLCAInternal(root,\n                        n1, n2);\n}\n\nprivate int findLCAInternal(Node root,\n                            int n1, int n2)\n{\nif (!findPath(root, n1, path1) ||\n    !findPath(root, n2, path2)) {\n    Console.Write((path1.Count &gt; 0) ?\n                \"n1 is present\" :\n                \"n1 is missing\");\n    Console.Write((path2.Count &gt; 0) ?\n                \"n2 is present\" :\n                \"n2 is missing\");\n    return -1;\n}\n\nint i;\nfor (i = 0; i &lt; path1.Count &amp;&amp;\n    i &lt; path2.Count; i++)\n{\n    // System.out.println(path1.get(i)\n    // + \" \" + path2.get(i));\n    if ((int)path1[i] !=\n        (int)path2[i])\n    break;\n}\nreturn (int)path1[i - 1];\n}\n\n// Finds the path from root node\n// to given root of the tree,\n// Stores the path in a vector\n// path[], returns true if path\n// exists otherwise false\nprivate bool findPath(Node root,\n                    int n,\n                    ArrayList path)\n{\n// base case\nif (root == null)\n{\n    return false;\n}\n\n// Store this node . The node\n// will be removed if not in\n// path from root to n.\npath.Add(root.data);\n\nif (root.data == n)\n{\n    return true;\n}\n\nif (root.left != null &amp;&amp;\n    findPath(root.left,\n            n, path))\n{\n    return true;\n}\n\nif (root.right != null &amp;&amp;\n    findPath(root.right,\n            n, path))\n{\n    return true;\n}\n\n// If not present in subtree\n//rooted with root, remove root\n// from path[] and return false\npath.RemoveAt(path.Count - 1);\n\nreturn false;\n}\n\n// Driver code\npublic static void Main(String[] args)\n{\nBT_NoParentPtr_Solution1 tree =\n    new BT_NoParentPtr_Solution1();\n\ntree.root = new Node(1);\ntree.root.left = new Node(2);\ntree.root.right = new Node(3);\ntree.root.left.left = new Node(4);\ntree.root.left.right = new Node(5);\ntree.root.right.left = new Node(6);\ntree.root.right.right = new Node(7);\n\nConsole.Write(\"LCA(4, 5): \" +\n                tree.findLCA(4, 5));\nConsole.Write(\"\\nLCA(4, 6): \" +\n                tree.findLCA(4, 6));\nConsole.Write(\"\\nLCA(3, 4): \" +\n                tree.findLCA(3, 4));\nConsole.Write(\"\\nLCA(2, 4): \" +\n                tree.findLCA(2, 4));\n}\n}\n\n// This code is contributed by Rutvik_56\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#output","title":"Output","text":"<pre><code>LCA(4, 5) = 2\nLCA(4, 6) = 1\nLCA(3, 4) = 1\nLCA(2, 4) = 2\n</code></pre> <ul> <li> <p>Time Complexity:\u00a0O(n). The tree is traversed twice, and then path arrays are compared.\u00a0</p> </li> <li> <p>Auxiliary Space:\u00a0O(n). Extra Space for path1 and path2.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-datastructure_1","title":"Binary Tree Datastructure","text":"<ul> <li> <p>In a normal tree, every node can have any number of children. </p> </li> <li> <p>A binary tree is a special type of tree data structure in which every node can have a\u00a0maximum of 2 children. </p> </li> <li> <p>One is known as a left child and the other is known as right child.</p> </li> <li> <p>A tree in which every node can have a maximum of two children is called Binary Tree.</p> </li> <li> <p>In a binary tree, every node can have either 0 children or 1 child or 2 children but not more than 2 children.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#example","title":"Example","text":"<p>There are different types of binary trees and they are</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#1-strictly-binary-tree-full-binary-tree-proper-binary-tree-or-2-tree","title":"1. Strictly Binary Tree (Full Binary Tree / Proper Binary Tree or 2-Tree)","text":"<ul> <li> <p>In a binary tree, every node can have a maximum of two children. </p> </li> <li> <p>But in strictly binary tree, every node should have exactly two children or none. That means every internal node must have exactly two children. </p> </li> <li> <p>A strictly Binary Tree can be defined as follows.</p> </li> <li> <p>A binary tree in which every node has either two or zero number of children is called Strictly Binary Tree</p> </li> <li> <p>Strictly binary tree is also called as\u00a0Full Binary Tree\u00a0or\u00a0Proper Binary Tree\u00a0or\u00a02-Tree</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#example_1","title":"Example","text":"<ul> <li>Strictly binary tree data structure is used to represent mathematical expressions.</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#full-binary-tree-theorems","title":"Full Binary Tree Theorems","text":"<pre><code>Let, i = the number of internal nodes\n     n = be the total number of nodes\n     l = number of leaves\n     \u03bb = number of levels\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#full-binary-tree-theorems_1","title":"Full Binary Tree Theorems","text":"<ol> <li>The number of leaves is\u00a0<code>i + 1</code>.</li> <li>The total number of nodes is\u00a0<code>2i + 1</code>.</li> <li>The number of internal nodes is\u00a0<code>(n \u2013 1) / 2</code>.</li> <li>The number of leaves is\u00a0<code>(n + 1) / 2</code>.</li> <li>The total number of nodes is\u00a0<code>2l \u2013 1</code>.</li> <li>The number of internal nodes is\u00a0<code>l \u2013 1</code>.</li> <li>The number of leaves is at most\u00a0<code>2\u03bb - 1</code>.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#full-binary-tree-in-c","title":"Full Binary Tree in C","text":"<pre><code>// Checking if a binary tree is a full binary tree in C\n\n#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node {\n  int item;\n  struct Node *left, *right;\n};\n\n// Creation of new Node\nstruct Node *createNewNode(char k) {\n  struct Node *node = (struct Node *)malloc(sizeof(struct Node));\n  node-&gt;item = k;\n  node-&gt;right = node-&gt;left = NULL;\n  return node;\n}\n\nbool isFullBinaryTree(struct Node *root) {\n  // Checking tree emptiness\n  if (root == NULL)\n    return true;\n\n  // Checking the presence of children\n  if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)\n    return true;\n\n  if ((root-&gt;left) &amp;&amp; (root-&gt;right))\n    return (isFullBinaryTree(root-&gt;left) &amp;&amp; isFullBinaryTree(root-&gt;right));\n\n  return false;\n}\n\nint main() {\n  struct Node *root = NULL;\n  root = createNewNode(1);\n  root-&gt;left = createNewNode(2);\n  root-&gt;right = createNewNode(3);\n\n  root-&gt;left-&gt;left = createNewNode(4);\n  root-&gt;left-&gt;right = createNewNode(5);\n  root-&gt;left-&gt;right-&gt;left = createNewNode(6);\n  root-&gt;left-&gt;right-&gt;right = createNewNode(7);\n\n  if (isFullBinaryTree(root))\n    printf(\"The tree is a full binary tree\\n\");\n  else\n    printf(\"The tree is not a full binary tree\\n\");\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#full-binary-tree-in-c_1","title":"Full Binary Tree in C++","text":"<pre><code>// Checking if a binary tree is a full binary tree in C++\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Node {\n  int key;\n  struct Node *left, *right;\n};\n\n// New node creation\nstruct Node *newNode(char k) {\n  struct Node *node = (struct Node *)malloc(sizeof(struct Node));\n  node-&gt;key = k;\n  node-&gt;right = node-&gt;left = NULL;\n  return node;\n}\n\nbool isFullBinaryTree(struct Node *root) {\n\n  // Checking for emptiness\n  if (root == NULL)\n    return true;\n\n  // Checking for the presence of children\n  if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)\n    return true;\n\n  if ((root-&gt;left) &amp;&amp; (root-&gt;right))\n    return (isFullBinaryTree(root-&gt;left) &amp;&amp; isFullBinaryTree(root-&gt;right));\n\n  return false;\n}\n\nint main() {\n  struct Node *root = NULL;\n  root = newNode(1);\n  root-&gt;left = newNode(2);\n  root-&gt;right = newNode(3);\n  root-&gt;left-&gt;left = newNode(4);\n  root-&gt;left-&gt;right = newNode(5);\n  root-&gt;left-&gt;right-&gt;left = newNode(6);\n  root-&gt;left-&gt;right-&gt;right = newNode(7);\n\n  if (isFullBinaryTree(root))\n    cout &lt;&lt; \"The tree is a full binary tree\\n\";\n  else\n    cout &lt;&lt; \"The tree is not a full binary tree\\n\";\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#full-binary-in-java","title":"Full Binary in Java","text":"<pre><code>// Checking if a binary tree is a full binary tree in Java\n\nclass Node {\n  int data;\n  Node leftChild, rightChild;\n\n  Node(int item) {\n  data = item;\n  leftChild = rightChild = null;\n  }\n}\n\nclass BinaryTree {\n  Node root;\n\n  // Check for Full Binary Tree\n  boolean isFullBinaryTree(Node node) {\n\n  // Checking tree emptiness\n  if (node == null)\n    return true;\n\n  // Checking the children\n  if (node.leftChild == null &amp;&amp; node.rightChild == null)\n    return true;\n\n  if ((node.leftChild != null) &amp;&amp; (node.rightChild != null))\n    return (isFullBinaryTree(node.leftChild) &amp;&amp; isFullBinaryTree(node.rightChild));\n\n  return false;\n  }\n\n  public static void main(String args[]) {\n    BinaryTree tree = new BinaryTree();\n    tree.root = new Node(1);\n    tree.root.leftChild = new Node(2);\n    tree.root.rightChild = new Node(3);\n    tree.root.leftChild.leftChild = new Node(4);\n    tree.root.leftChild.rightChild = new Node(5);\n    tree.root.rightChild.leftChild = new Node(6);\n    tree.root.rightChild.rightChild = new Node(7);\n\n    if (tree.isFullBinaryTree(tree.root))\n      System.out.print(\"The tree is a full binary tree\");\n    else\n      System.out.print(\"The tree is not a full binary tree\");\n  }\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#2-complete-binary-tree-perfect-binary-tree","title":"2. Complete Binary Tree (Perfect Binary Tree)","text":"<ul> <li> <p>In a binary tree, every node can have a maximum of two children. </p> </li> <li> <p>But in strictly binary tree, every node should have exactly two children or none and in complete binary tree all the nodes must have exactly two children and at every level of complete binary tree there must be 2level\u00a0number of nodes. </p> </li> <li> <p>For example at level 2 there must be 22\u00a0= 4 nodes and at level 3 there must be 23\u00a0= 8 nodes.</p> </li> <li> <p>A binary tree in which every internal node has exactly two children and all leaf nodes are at same level is called Complete Binary Tree.</p> </li> <li> <p>Complete binary tree is also called as\u00a0Perfect Binary Tree</p> </li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#perfect-binary-tree-theorems","title":"Perfect Binary Tree Theorems","text":"<ol> <li>A perfect binary tree of height h has\u00a0<code>2h + 1\u00a0\u2013 1</code>\u00a0node.</li> <li>A perfect binary tree with n nodes has height\u00a0<code>log(n + 1) \u2013 1 = \u0398(ln(n))</code>.</li> <li>A perfect binary tree of height h has\u00a0<code>2h</code>\u00a0leaf nodes.</li> <li>The average depth of a node in a perfect binary tree is\u00a0<code>\u0398(ln(n))</code>.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#perfect-binary-tree-in-c","title":"Perfect Binary Tree in C","text":"<pre><code>// Checking if a binary tree is a perfect binary tree in C\n\n#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct node {\n  int data;\n  struct node *left;\n  struct node *right;\n};\n\n// Creating a new node\nstruct node *newnode(int data) {\n  struct node *node = (struct node *)malloc(sizeof(struct node));\n  node-&gt;data = data;\n  node-&gt;left = NULL;\n  node-&gt;right = NULL;\n\n  return (node);\n}\n\n// Calculate the depth\nint depth(struct node *node) {\n  int d = 0;\n  while (node != NULL) {\n    d++;\n    node = node-&gt;left;\n  }\n  return d;\n}\n\n// Check if the tree is perfect\nbool is_perfect(struct node *root, int d, int level) {\n    // Check if the tree is empty\n  if (root == NULL)\n    return true;\n\n  // Check the presence of children\n  if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)\n    return (d == level + 1);\n\n  if (root-&gt;left == NULL || root-&gt;right == NULL)\n    return false;\n\n  return is_perfect(root-&gt;left, d, level + 1) &amp;&amp;\n       is_perfect(root-&gt;right, d, level + 1);\n}\n\n// Wrapper function\nbool is_Perfect(struct node *root) {\n  int d = depth(root);\n  return is_perfect(root, d, 0);\n}\n\nint main() {\n  struct node *root = NULL;\n  root = newnode(1);\n  root-&gt;left = newnode(2);\n  root-&gt;right = newnode(3);\n  root-&gt;left-&gt;left = newnode(4);\n  root-&gt;left-&gt;right = newnode(5);\n  root-&gt;right-&gt;left = newnode(6);\n\n  if (is_Perfect(root))\n    printf(\"The tree is a perfect binary tree\\n\");\n  else\n    printf(\"The tree is not a perfect binary tree\\n\");\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#perfect-binary-tree-in-c_1","title":"Perfect Binary Tree in C++","text":"<pre><code>// Checking if a binary tree is a perfect binary tree in C++\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Node {\n  int key;\n  struct Node *left, *right;\n};\n\nint depth(Node *node) {\n  int d = 0;\n  while (node != NULL) {\n    d++;\n    node = node-&gt;left;\n  }\n  return d;\n}\n\nbool isPerfectR(struct Node *root, int d, int level = 0) {\n  if (root == NULL)\n    return true;\n\n  if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)\n    return (d == level + 1);\n\n  if (root-&gt;left == NULL || root-&gt;right == NULL)\n    return false;\n\n  return isPerfectR(root-&gt;left, d, level + 1) &amp;&amp;\n       isPerfectR(root-&gt;right, d, level + 1);\n}\n\nbool isPerfect(Node *root) {\n  int d = depth(root);\n  return isPerfectR(root, d);\n}\n\nstruct Node *newNode(int k) {\n  struct Node *node = new Node;\n  node-&gt;key = k;\n  node-&gt;right = node-&gt;left = NULL;\n  return node;\n}\n\nint main() {\n  struct Node *root = NULL;\n  root = newNode(1);\n  root-&gt;left = newNode(2);\n  root-&gt;right = newNode(3);\n  root-&gt;left-&gt;left = newNode(4);\n  root-&gt;left-&gt;right = newNode(5);\n  root-&gt;right-&gt;left = newNode(6);\n\n  if (isPerfect(root))\n    cout &lt;&lt; \"The tree is a perfect binary tree\\n\";\n  else\n    cout &lt;&lt; \"The tree is not a perfect binary tree\\n\";\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#perfect-binary-tree-in-java","title":"Perfect Binary Tree in Java","text":"<pre><code>// Checking if a binary tree is a perfect binary tree in Java\n\nclass PerfectBinaryTree {\n\n  static class Node {\n    int key;\n    Node left, right;\n  }\n\n  // Calculate the depth\n  static int depth(Node node) {\n    int d = 0;\n    while (node != null) {\n      d++;\n      node = node.left;\n    }\n    return d;\n  }\n\n  // Check if the tree is perfect binary tree\n  static boolean is_perfect(Node root, int d, int level) {\n\n    // Check if the tree is empty\n    if (root == null)\n      return true;\n\n    // If for children\n    if (root.left == null &amp;&amp; root.right == null)\n      return (d == level + 1);\n\n    if (root.left == null || root.right == null)\n      return false;\n\n    return is_perfect(root.left, d, level + 1) &amp;&amp; is_perfect(root.right, d, level + 1);\n  }\n\n  // Wrapper function\n  static boolean is_Perfect(Node root) {\n    int d = depth(root);\n    return is_perfect(root, d, 0);\n  }\n\n  // Create a new node\n  static Node newNode(int k) {\n    Node node = new Node();\n    node.key = k;\n    node.right = null;\n    node.left = null;\n    return node;\n  }\n\n  public static void main(String args[]) {\n    Node root = null;\n    root = newNode(1);\n    root.left = newNode(2);\n    root.right = newNode(3);\n    root.left.left = newNode(4);\n    root.left.right = newNode(5);\n\n    if (is_Perfect(root) == true)\n      System.out.println(\"The tree is a perfect binary tree\");\n    else\n      System.out.println(\"The tree is not a perfect binary tree\");\n  }\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#3-extended-binary-tree","title":"3. Extended Binary Tree","text":"<ul> <li> <p>A binary tree can be converted into Full Binary tree by adding dummy nodes to existing nodes wherever required.</p> </li> <li> <p>The full binary tree obtained by adding dummy nodes to a binary tree is called as Extended Binary Tree.</p> </li> </ul> <p></p> <ul> <li>In above figure, a normal binary tree is converted into full binary tree by adding dummy nodes (In pink colour).</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#complete-binary-tree","title":"Complete Binary Tree","text":"<ul> <li> <p>A complete binary tree is a binary tree in which all the levels are completely filled except possibly the lowest one, which is filled from the left.</p> </li> <li> <p>A complete binary tree is just like a full binary tree, but with two major differences</p> </li> <li> <p>All the leaf elements must lean towards the left.</p> </li> <li> <p>The last leaf element might not have a right sibling i.e. a complete binary tree doesn't have to be a full binary tree.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#complete-binary-tree_1","title":"Complete Binary Tree","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#comparison-between-full-binary-tree-and-complete-binary-tree","title":"Comparison between full binary tree and complete binary tree","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#comparison-between-full-binary-tree-and-complete-binary-tree_1","title":"Comparison between full binary tree and complete binary tree","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#comparison-between-full-binary-tree-and-complete-binary-tree_2","title":"Comparison between full binary tree and complete binary tree","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#comparison-between-full-binary-tree-and-complete-binary-tree_3","title":"Comparison between full binary tree and complete binary tree","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#how-a-complete-binary-tree-is-created","title":"How a Complete Binary Tree is Created?","text":"<ol> <li>Select the first element of the list to be the root node. (no. of elements on level-I: 1)</li> </ol> <p>Select the first element as root</p> <ol> <li>Put the second element as a left child of the root node and the third element as the right child. (no. of elements on level-II: 2)</li> </ol> <p></p> <p>12 as a left child and 9 as a right child</p> <ol> <li>Put the next two elements as children of the left node of the second level. Again, put the next two elements as children of the right node of the second level (no. of elements on level-III: 4) elements).</li> </ol> <ol> <li>Keep repeating until you reach the last element.</li> </ol> <p></p> <p>5 as a left child and 6 as a right child</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#relationship-between-array-indexes-and-tree-element","title":"Relationship between array indexes and tree element","text":"<ul> <li> <p>A complete binary tree has an interesting property that we can use to find the children and parents of any node.</p> </li> <li> <p>If the index of any element in the array is\u00a0i, the element in the index\u00a0<code>2i+1</code>\u00a0will become the left child and element in\u00a0<code>2i+2</code>\u00a0index will become the right child. </p> </li> <li> <p>Also, the parent of any element at index\u00a0i\u00a0is given by the lower bound of\u00a0<code>(i-1)/2</code>.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#complete-binary-tree-in-c","title":"Complete Binary Tree in C","text":"<pre><code>// Checking if a binary tree is a complete binary tree in C\n\n#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node {\n  int key;\n  struct Node *left, *right;\n};\n\n// Node creation\nstruct Node *newNode(char k) {\n  struct Node *node = (struct Node *)malloc(sizeof(struct Node));\n  node-&gt;key = k;\n  node-&gt;right = node-&gt;left = NULL;\n  return node;\n}\n\n// Count the number of nodes\nint countNumNodes(struct Node *root) {\n  if (root == NULL)\n    return (0);\n  return (1 + countNumNodes(root-&gt;left) + countNumNodes(root-&gt;right));\n}\n\n// Check if the tree is a complete binary tree\nbool checkComplete(struct Node *root, int index, int numberNodes) {\n  // Check if the tree is complete\n  if (root == NULL)\n    return true;\n\n  if (index &gt;= numberNodes)\n    return false;\n\n  return (checkComplete(root-&gt;left, 2 * index + 1, numberNodes) &amp;&amp; checkComplete(root-&gt;right, 2 * index + 2, numberNodes));\n}\n\nint main() {\n  struct Node *root = NULL;\n  root = newNode(1);\n  root-&gt;left = newNode(2);\n  root-&gt;right = newNode(3);\n  root-&gt;left-&gt;left = newNode(4);\n  root-&gt;left-&gt;right = newNode(5);\n  root-&gt;right-&gt;left = newNode(6);\n\n  int node_count = countNumNodes(root);\n  int index = 0;\n\n  if (checkComplete(root, index, node_count))\n    printf(\"The tree is a complete binary tree\\n\");\n  else\n    printf(\"The tree is not a complete binary tree\\n\");\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#complete-binary-tree-in-c_1","title":"Complete Binary Tree in C++","text":"<pre><code>// Checking if a binary tree is a complete binary tree in C++\n\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct Node {\n  int key;\n  struct Node *left, *right;\n};\n\n// Create node\nstruct Node *newNode(char k) {\n  struct Node *node = (struct Node *)malloc(sizeof(struct Node));\n  node-&gt;key = k;\n  node-&gt;right = node-&gt;left = NULL;\n  return node;\n}\n\n// Count the number of nodes\nint countNumNodes(struct Node *root) {\n  if (root == NULL)\n    return (0);\n  return (1 + countNumNodes(root-&gt;left) + countNumNodes(root-&gt;right));\n}\n\n// Check if the tree is a complete binary tree\nbool checkComplete(struct Node *root, int index, int numberNodes) {\n\n  // Check if the tree is empty\n  if (root == NULL)\n    return true;\n\n  if (index &gt;= numberNodes)\n    return false;\n\n  return (checkComplete(root-&gt;left, 2 * index + 1, numberNodes) &amp;&amp; checkComplete(root-&gt;right, 2 * index + 2, numberNodes));\n}\n\nint main() {\n  struct Node *root = NULL;\n  root = newNode(1);\n  root-&gt;left = newNode(2);\n  root-&gt;right = newNode(3);\n  root-&gt;left-&gt;left = newNode(4);\n  root-&gt;left-&gt;right = newNode(5);\n  root-&gt;right-&gt;left = newNode(6);\n\n  int node_count = countNumNodes(root);\n  int index = 0;\n\n  if (checkComplete(root, index, node_count))\n    cout &lt;&lt; \"The tree is a complete binary tree\\n\";\n  else\n    cout &lt;&lt; \"The tree is not a complete binary tree\\n\";\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#complete-binary-tree-in-java","title":"Complete Binary Tree in Java","text":"<pre><code>// Checking if a binary tree is a complete binary tree in Java\n\n// Node creation\nclass Node {\n  int data;\n  Node left, right;\n\n  Node(int item) {\n    data = item;\n    left = right = null;\n  }\n}\n\nclass BinaryTree {\n  Node root;\n\n  // Count the number of nodes\n  int countNumNodes(Node root) {\n    if (root == null)\n      return (0);\n    return (1 + countNumNodes(root.left) + countNumNodes(root.right));\n  }\n\n  // Check for complete binary tree\n  boolean checkComplete(Node root, int index, int numberNodes) {\n\n    // Check if the tree is empty\n    if (root == null)\n      return true;\n\n    if (index &gt;= numberNodes)\n      return false;\n\n    return (checkComplete(root.left, 2 * index + 1, numberNodes)\n        &amp;&amp; checkComplete(root.right, 2 * index + 2, numberNodes));\n  }\n\n  public static void main(String args[]) {\n    BinaryTree tree = new BinaryTree();\n\n    tree.root = new Node(1);\n    tree.root.left = new Node(2);\n    tree.root.right = new Node(3);\n    tree.root.left.right = new Node(5);\n    tree.root.left.left = new Node(4);\n    tree.root.right.left = new Node(6);\n\n    int node_count = tree.countNumNodes(tree.root);\n    int index = 0;\n\n    if (tree.checkComplete(tree.root, index, node_count))\n      System.out.println(\"The tree is a complete binary tree\");\n    else\n      System.out.println(\"The tree is not a complete binary tree\");\n  }\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-representations","title":"Binary Tree Representations","text":"<ul> <li>Btech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/binary-tree-representations.html</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-representations_1","title":"Binary Tree Representations","text":"<ul> <li> <p>A binary tree data structure is represented using two methods. Those methods are as follows.</p> </li> <li> <p>Array Representation</p> </li> <li> <p>Linked List Representation</p> </li> </ul> <ul> <li>Consider the following binary tree</li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#1-array-representation-of-binary-tree","title":"1. Array Representation of Binary Tree","text":"<ul> <li> <p>In array representation of a binary tree, we use one-dimensional array (1-D Array) to represent a binary tree.</p> </li> <li> <p>Consider the above example of a binary tree and it is represented as follows.</p> </li> </ul> <p></p> <ul> <li>To represent a binary tree of depth\u00a0'n'\u00a0using array representation, we need one dimensional array with a maximum size of\u00a02n + 1.</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#2-linked-list-representation-of-binary-tree","title":"2. Linked List Representation of Binary Tree","text":"<ul> <li> <p>We use a double linked list to represent a binary tree. </p> </li> <li> <p>In a double linked list, every node consists of three fields. </p> </li> <li> <p>First field for storing left child address, second for storing actual data and third for storing right child address.</p> </li> <li> <p>In this linked list representation, a node has the following structure.</p> </li> </ul> <p></p> <ul> <li>The above example of the binary tree represented using Linked list representation is shown as follows.</li> </ul> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-traversals","title":"Binary Tree Traversals","text":"<ul> <li>Btech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/binary-tree-traversals.html<ul> <li>In-Order</li> <li>Pre-Order</li> <li>Post-Order</li> </ul> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-traversals_1","title":"Binary Tree Traversals","text":"<ul> <li> <p>When we wanted to display a binary tree, </p> </li> <li> <p>we need to follow some order in which all the nodes of that binary tree must be displayed. </p> </li> <li> <p>In any binary tree, displaying order of nodes depends on the traversal method.</p> </li> <li> <p>Displaying (or) visiting order of nodes in a binary tree is called as Binary Tree Traversal.</p> </li> </ul> <ul> <li> <p>There are three types of binary tree traversals.</p> </li> <li> <p>In - Order Traversal</p> </li> <li> <p>Pre - Order Traversal</p> </li> <li> <p>Post - Order Traversal</p> </li> </ul> <p>Consider the following binary tree for</p> <p>ref : Tree traversal - Wikipedia</p> <p></p> <p>Depth-first traversal (dotted path) of a binary tree:</p> <ul> <li>Pre-order (node visited at position red):       F, B, A, D, C, E, G, I, H;</li> <li>In-order (node visited at position green):  \u00a0 \u00a0 A, B, C, D, E, F, G, H, I;</li> <li>Post-order (node visited at position blue):  \u00a0 \u00a0 A, C, E, D, B, H, I, G, F.</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#notations-we-will-use-for-orders","title":"Notations We Will Use For Orders","text":"<p>NLR : Node Left Right</p> <p>LRN : Left Right Node</p> <p>LNR : Left Node Right</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#pre-order-nlr","title":"Pre-order, NLR","text":"<ol> <li>Visit the current node (in the figure: position red).</li> <li>Recursively traverse the current node's left subtree.</li> <li>Recursively traverse the current node's right subtree.</li> </ol> <p>The pre-order traversal is a\u00a0topologically sorted\u00a0one, because a parent node is processed before any of its child nodes is done.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#post-order-lrn","title":"Post-order, LRN","text":"<ol> <li>Recursively traverse the current node's left subtree.</li> <li>Recursively traverse the current node's right subtree.</li> <li>Visit the current node (in the figure: position blue).</li> </ol> <p>Post-order traversal can be useful to get postfix expression of a\u00a0binary expression tree.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#in-order-lnr","title":"In-order, LNR","text":"<ol> <li>Recursively traverse the current node's left subtree.</li> <li>Visit the current node (in the figure: position green).</li> <li>Recursively traverse the current node's right subtree.</li> </ol> <ul> <li> <p>In a\u00a0binary search tree\u00a0ordered such that in each node the key is greater than all keys in its left subtree and less than all keys in its right subtree, </p> </li> <li> <p>in-order traversal retrieves the keys in\u00a0ascending\u00a0sorted order.[7]</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#reverse-pre-order-nrl","title":"Reverse pre-order, NRL","text":"<ol> <li>Visit the current node.</li> <li>Recursively traverse the current node's right subtree.</li> <li>Recursively traverse the current node's left subtree.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#reverse-post-order-rln","title":"Reverse post-order, RLN","text":"<ol> <li>Recursively traverse the current node's right subtree.</li> <li>Recursively traverse the current node's left subtree.</li> <li>Visit the current node.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#reverse-in-order-rnl","title":"Reverse in-order, RNL","text":"<ol> <li>Recursively traverse the current node's right subtree.</li> <li>Visit the current node.</li> <li>Recursively traverse the current node's left subtree.</li> </ol> <ul> <li> <p>In a\u00a0binary search tree\u00a0ordered such that in each node the key is greater than all keys in its left subtree and less than all keys in its right subtree, </p> </li> <li> <p>reverse in-order traversal retrieves the keys in\u00a0descending\u00a0sorted order.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#applications-for-pre-order","title":"Applications for Pre-Order","text":"<ul> <li> <p>Pre-order traversal can be used to make a prefix expression (Polish notation) from\u00a0expression trees: traverse the expression tree pre-orderly. </p> </li> <li> <p>For example, traversing the depicted arithmetic expression in pre-order yields \"+ *\u00a0A\u00a0\u2212\u00a0B C\u00a0+\u00a0D E\". </p> </li> <li> <p>In prefix notation, no need any parentheses as long as each operator has a fixed number of operands. </p> </li> <li> <p>Preorder traversal is also used to create a copy of the tree.</p> </li> </ul> <p></p> <p>Tree representing the arithmetic expression:\u00a0A\u00a0*\u00a0(B\u00a0\u2212\u00a0C)\u00a0+\u00a0(D\u00a0+\u00a0E)</p> <ul> <li> <p>Post-order traversal can generate a postfix representation (Reverse Polish notation) of a binary tree. </p> </li> <li> <p>Traversing the depicted arithmetic expression in post-order yields \"A B C\u00a0\u2212 *\u00a0D E\u00a0+ +\"; the latter can easily be transformed into\u00a0machine code\u00a0to evaluate the expression by a\u00a0stack machine. </p> </li> <li> <p>Postorder traversal is also used to delete the tree. </p> </li> <li> <p>Each node is freed after freeing its children.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#pre-order-implementation-recursive","title":"Pre-order implementation Recursive","text":"<pre><code>procedure preorder(node)\n    if node = null\n        return\n    visit(node)\n    preorder(node.left)\n    preorder(node.right) \n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#pre-order-implementation-iterative","title":"Pre-order implementation Iterative","text":"<pre><code>procedure iterativePreorder(node)\n    if node = null\n        return\n    stack \u2190 empty stack\n    stack.push(node)\n    while not stack.isEmpty()\n        node \u2190 stack.pop()\n        visit(node)\n        // right child is pushed first so that left is processed first\n        if node.right \u2260 null\n            stack.push(node.right)\n        if node.left \u2260 null\n            stack.push(node.left)\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#post-order-implementation-recursive","title":"Post-order implementation Recursive","text":"<pre><code>procedure postorder(node)\n    if node = null\n        return\n    postorder(node.left)\n    postorder(node.right)\n    visit(node)\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#post-order-implementation-iterative","title":"Post-order implementation Iterative","text":"<pre><code>procedure iterativePostorder(node)\n    stack \u2190 empty stack\n    lastNodeVisited \u2190 null\n    while not stack.isEmpty() or node \u2260 null\n        if node \u2260 null\n            stack.push(node)\n            node \u2190 node.left\n        else\n            peekNode \u2190 stack.peek()\n            // if right child exists and traversing node\n            // from left child, then move right\n            if peekNode.right \u2260 null and lastNodeVisited \u2260 peekNode.right\n                node \u2190 peekNode.right\n            else\n                visit(peekNode)\n                lastNodeVisited \u2190 stack.pop()\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#in-order-implementation-recursive","title":"In-order implementation Recursive","text":"<pre><code>procedure inorder(node)\n    if node = null\n        return\n    inorder(node.left)\n    visit(node)\n    inorder(node.right)\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#in-order-implementation-iterative","title":"In-order implementation Iterative","text":"<pre><code>procedure iterativeInorder(node)\n    stack \u2190 empty stack\n    while not stack.isEmpty() or node \u2260 null\n        if node \u2260 null\n            stack.push(node)\n            node \u2190 node.left\n        else\n            node \u2190 stack.pop()\n            visit(node)\n            node \u2190 node.right\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-traversal-in-c","title":"Binary Tree Traversal in C","text":"<pre><code>// Tree traversal in C\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct node {\n  int item;\n  struct node* left;\n  struct node* right;\n};\n\n// Inorder traversal\nvoid inorderTraversal(struct node* root) {\n  if (root == NULL) return;\n  inorderTraversal(root-&gt;left);\n  printf(\"%d -&gt;\", root-&gt;item);\n  inorderTraversal(root-&gt;right);\n}\n\n// preorderTraversal traversal\nvoid preorderTraversal(struct node* root) {\n  if (root == NULL) return;\n  printf(\"%d -&gt;\", root-&gt;item);\n  preorderTraversal(root-&gt;left);\n  preorderTraversal(root-&gt;right);\n}\n\n// postorderTraversal traversal\nvoid postorderTraversal(struct node* root) {\n  if (root == NULL) return;\n  postorderTraversal(root-&gt;left);\n  postorderTraversal(root-&gt;right);\n  printf(\"%d -&gt;\", root-&gt;item);\n}\n\n// Create a new Node\nstruct node* createNode(value) {\n  struct node* newNode = malloc(sizeof(struct node));\n  newNode-&gt;item = value;\n  newNode-&gt;left = NULL;\n  newNode-&gt;right = NULL;\n\n  return newNode;\n}\n\n// Insert on the left of the node\nstruct node* insertLeft(struct node* root, int value) {\n  root-&gt;left = createNode(value);\n  return root-&gt;left;\n}\n\n// Insert on the right of the node\nstruct node* insertRight(struct node* root, int value) {\n  root-&gt;right = createNode(value);\n  return root-&gt;right;\n}\n\nint main() {\n  struct node* root = createNode(1);\n  insertLeft(root, 12);\n  insertRight(root, 9);\n\n  insertLeft(root-&gt;left, 5);\n  insertRight(root-&gt;left, 6);\n\n  printf(\"Inorder traversal \\n\");\n  inorderTraversal(root);\n\n  printf(\"\\nPreorder traversal \\n\");\n  preorderTraversal(root);\n\n  printf(\"\\nPostorder traversal \\n\");\n  postorderTraversal(root);\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-traversal-in-c_1","title":"Binary Tree Traversal in C++","text":"<pre><code>// Tree traversal in C++\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Node {\n  int data;\n  struct Node *left, *right;\n  Node(int data) {\n    this-&gt;data = data;\n    left = right = NULL;\n  }\n};\n\n// Preorder traversal\nvoid preorderTraversal(struct Node* node) {\n  if (node == NULL)\n    return;\n\n  cout &lt;&lt; node-&gt;data &lt;&lt; \"-&gt;\";\n  preorderTraversal(node-&gt;left);\n  preorderTraversal(node-&gt;right);\n}\n\n// Postorder traversal\nvoid postorderTraversal(struct Node* node) {\n  if (node == NULL)\n    return;\n\n  postorderTraversal(node-&gt;left);\n  postorderTraversal(node-&gt;right);\n  cout &lt;&lt; node-&gt;data &lt;&lt; \"-&gt;\";\n}\n\n// Inorder traversal\nvoid inorderTraversal(struct Node* node) {\n  if (node == NULL)\n    return;\n\n  inorderTraversal(node-&gt;left);\n  cout &lt;&lt; node-&gt;data &lt;&lt; \"-&gt;\";\n  inorderTraversal(node-&gt;right);\n}\n\nint main() {\n  struct Node* root = new Node(1);\n  root-&gt;left = new Node(12);\n  root-&gt;right = new Node(9);\n  root-&gt;left-&gt;left = new Node(5);\n  root-&gt;left-&gt;right = new Node(6);\n\n  cout &lt;&lt; \"Inorder traversal \";\n  inorderTraversal(root);\n\n  cout &lt;&lt; \"\\nPreorder traversal \";\n  preorderTraversal(root);\n\n  cout &lt;&lt; \"\\nPostorder traversal \";\n  postorderTraversal(root);\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-tree-traversal-in-java","title":"Binary Tree Traversal in Java","text":"<pre><code>// Tree traversal in Java\n\nclass Node {\n  int item;\n  Node left, right;\n\n  public Node(int key) {\n  item = key;\n  left = right = null;\n  }\n}\n\nclass BinaryTree {\n  // Root of Binary Tree\n  Node root;\n\n  BinaryTree() {\n  root = null;\n  }\n\n  void postorder(Node node) {\n  if (node == null)\n    return;\n\n  // Traverse left\n  postorder(node.left);\n  // Traverse right\n  postorder(node.right);\n  // Traverse root\n  System.out.print(node.item + \"-&gt;\");\n  }\n\n  void inorder(Node node) {\n  if (node == null)\n    return;\n\n  // Traverse left\n  inorder(node.left);\n  // Traverse root\n  System.out.print(node.item + \"-&gt;\");\n  // Traverse right\n  inorder(node.right);\n  }\n\n  void preorder(Node node) {\n  if (node == null)\n    return;\n\n  // Traverse root\n  System.out.print(node.item + \"-&gt;\");\n  // Traverse left\n  preorder(node.left);\n  // Traverse right\n  preorder(node.right);\n  }\n\n  public static void main(String[] args) {\n  BinaryTree tree = new BinaryTree();\n  tree.root = new Node(1);\n  tree.root.left = new Node(12);\n  tree.root.right = new Node(9);\n  tree.root.left.left = new Node(5);\n  tree.root.left.right = new Node(6);\n\n  System.out.println(\"Inorder traversal\");\n  tree.inorder(tree.root);\n\n  System.out.println(\"\\nPreorder traversal \");\n  tree.preorder(tree.root);\n\n  System.out.println(\"\\nPostorder traversal\");\n  tree.postorder(tree.root);\n  }\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#review","title":"Review","text":"<p>Consider the following binary tree.</p> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#1-in-order-traversal-leftchild-root-rightchild","title":"1. In - Order Traversal ( leftChild - root - rightChild )","text":"<ul> <li> <p>In In-Order traversal, </p> </li> <li> <p>the root node is visited between the left child and right child. </p> </li> <li> <p>In this traversal, </p> </li> <li> <p>the left child node is visited first, </p> </li> <li> <p>then the root node is visited and </p> </li> <li> <p>later we go for visiting the right child node. </p> </li> <li> <p>This in-order traversal is applicable for every root node of all subtrees in the tree. This is performed recursively for all nodes in the tree.  </p> </li> </ul> <ul> <li> <p>In the above example of a binary tree, </p> </li> <li> <p>first we try to visit left child of root node 'A', </p> </li> <li> <p>but A's left child 'B' is a root node for left subtree. </p> </li> <li> <p>so we try to visit its (B's) left child 'D' and </p> </li> <li> <p>again D is a root for subtree with nodes D, I and J. </p> </li> <li> <p>So we try to visit its left child 'I' and it is the leftmost child. </p> </li> </ul> <ul> <li> <p>So first we visit\u00a0'I'\u00a0then go for its root node\u00a0'D'\u00a0and later we visit D's right child\u00a0'J'. </p> </li> <li> <p>With this we have completed the left part of node B. </p> </li> <li> <p>Then visit\u00a0'B'\u00a0and next B's right child\u00a0'F'\u00a0is visited. </p> </li> <li> <p>With this we have completed left part of node A. </p> </li> <li> <p>Then visit root node\u00a0'A'. With this we have completed left and root parts of node A.</p> </li> </ul> <ul> <li> <p>Then we go for the right part of the node A. In right of A again there is a subtree with root C. So go for left child of C and again it is a subtree with root G. </p> </li> <li> <p>But G does not have left part so we visit\u00a0'G'\u00a0and then visit G's right child K. </p> </li> <li> <p>With this we have completed the left part of node C. </p> </li> <li> <p>Then visit root node\u00a0'C'\u00a0and next visit C's right child\u00a0'H'\u00a0which is the rightmost child in the tree. So we stop the process.  </p> </li> </ul> <ul> <li>That means here we have visited in the order of\u00a0I - D - J - B - F - A - G - K - C - H\u00a0using In-Order Traversal.</li> </ul> <p>In-Order Traversal for above example of binary tree is </p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#i-d-j-b-f-a-g-k-c-h","title":"I - D - J - B - F - A - G - K - C - H","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#2-pre-order-traversal-root-leftchild-rightchild","title":"2. Pre - Order Traversal ( root - leftChild - rightChild )","text":"<ul> <li> <p>In Pre-Order traversal, </p> </li> <li> <p>the root node is visited before the left child and right child nodes. </p> </li> <li> <p>In this traversal, </p> </li> <li> <p>the root node is visited first, </p> </li> <li> <p>then its left child and </p> </li> <li> <p>later its right child. </p> </li> <li> <p>This pre-order traversal is applicable for every root node of all subtrees in the tree.</p> </li> </ul> <ul> <li> <p>In the above example of binary tree, </p> </li> <li> <p>first we visit root node\u00a0'A'\u00a0then visit its left child\u00a0'B'\u00a0which is a root for D and F. </p> </li> <li> <p>So we visit B's left child\u00a0'D'\u00a0and again D is a root for I and J. </p> </li> <li> <p>So we visit D's left child\u00a0'I'\u00a0which is the leftmost child. </p> </li> <li> <p>So next we go for visiting D's right child\u00a0'J'. </p> </li> <li> <p>With this we have completed root, </p> </li> </ul> <ul> <li> <p>left and right parts of node D and root, </p> </li> <li> <p>left parts of node B. </p> </li> <li> <p>Next visit B's right child\u00a0'F'. </p> </li> <li> <p>With this we have completed root and left parts of node A. </p> </li> <li> <p>So we go for A's right child\u00a0'C'\u00a0which is a root node for G and H. </p> </li> </ul> <ul> <li> <p>After visiting C, we go for its left child\u00a0'G'\u00a0which is a root for node K. </p> </li> <li> <p>So next we visit left of G, but it does not have left child so we go for G's right child\u00a0'K'. With this, we have completed node C's root and left parts. </p> </li> <li> <p>Next visit C's right child\u00a0'H'\u00a0which is the rightmost child in the tree. So we stop the process.  </p> </li> </ul> <ul> <li> <p>That means here we have visited in the order of\u00a0A-B-D-I-J-F-C-G-K-H\u00a0using Pre-Order Traversal.</p> </li> <li> <p>Pre-Order Traversal for above example binary tree is </p> </li> <li> <p>A - B - D - I - J - F - C - G - K - H</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#3-post-order-traversal-leftchild-rightchild-root","title":"3. Post - Order Traversal ( leftChild - rightChild - root )","text":"<ul> <li> <p>In Post-Order traversal, </p> </li> <li> <p>the root node is visited after left child and right child. </p> </li> <li> <p>In this traversal, </p> </li> <li> <p>left child node is visited first, </p> </li> <li> <p>then its right child and </p> </li> <li> <p>then its root node. </p> </li> <li> <p>This is recursively performed until the right most node is visited.  </p> </li> </ul> <ul> <li> <p>Here we have visited in the order of\u00a0I - J - D - F - B - K - G - H - C - A\u00a0using Post-Order Traversal.</p> </li> <li> <p>Post-Order Traversal for above example binary tree is </p> </li> <li> <p>I - J - D - F - B - K - G - H - C - A</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#program-to-create-binary-tree-and-display-using-in-order-traversal-c-programming","title":"Program to Create Binary Tree and display using In-Order Traversal - C Programming","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\nstruct Node{\n   int data;\n   struct Node *left;\n   struct Node *right;\n};\n\nstruct Node *root = NULL;\nint count = 0;\n\nstruct Node* insert(struct Node*, int);\nvoid display(struct Node*);\n\nvoid main(){\n   int choice, value;\n   clrscr();\n   printf(\"\\n----- Binary Tree -----\\n\");\n   while(1){\n      printf(\"\\n***** MENU *****\\n\");\n      printf(\"1. Insert\\n2. Display\\n3. Exit\");\n      printf(\"\\nEnter your choice: \");\n      scanf(\"%d\",&amp;choice);\n      switch(choice){\n     case 1: printf(\"\\nEnter the value to be insert: \");\n         scanf(\"%d\", &amp;value);\n         root = insert(root,value);\n         break;\n     case 2: display(root); break;\n     case 3: exit(0);\n     default: printf(\"\\nPlease select correct operations!!!\\n\");\n      }\n   }\n}\n\nstruct Node* insert(struct Node *root,int value){\n   struct Node *newNode;\n   newNode = (struct Node*)malloc(sizeof(struct Node));\n   newNode-&gt;data = value;\n   if(root == NULL){\n      newNode-&gt;left = newNode-&gt;right = NULL;\n      root = newNode;\n      count++;\n   }\n   else{\n      if(count%2 != 0)\n     root-&gt;left = insert(root-&gt;left,value);\n      else\n     root-&gt;right = insert(root-&gt;right,value);\n   }\n   return root;\n}\n// display is performed by using Inorder Traversal\nvoid display(struct Node *root)\n{\n   if(root != NULL){\n      display(root-&gt;left);\n      printf(\"%d\\t\",root-&gt;data);\n      display(root-&gt;right);\n   }\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#output_1","title":"Output","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#output_2","title":"Output","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#threaded-binary-trees","title":"Threaded Binary Trees","text":"<ul> <li>Btech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/threaded-binary-trees.html</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#threaded-binary-trees_1","title":"Threaded Binary Trees","text":"<ul> <li> <p>A binary tree can be represented using array representation or linked list representation. </p> </li> <li> <p>When a binary tree is represented using linked list representation, the reference part of the node which doesn't have a child is filled with a NULL pointer. </p> </li> <li> <p>In any binary tree linked list representation, there is a number of NULL pointers than actual pointers. </p> </li> <li> <p>Generally, in any binary tree linked list representation, if there are\u00a02N\u00a0number of reference fields, then\u00a0N+1\u00a0number of reference fields are filled with NULL (\u00a0N+1 are NULL out of 2N\u00a0). </p> </li> <li> <p>This NULL pointer does not play any role except indicating that there is no link (no child).  </p> </li> </ul> <ul> <li> <p>A. J. Perlis and C. Thornton have proposed new binary tree called \"Threaded Binary Tree\", which makes use of NULL pointers to improve its traversal process. </p> </li> <li> <p>In a threaded binary tree, NULL pointers are replaced by references of other nodes in the tree. These extra references are called as\u00a0threads.</p> </li> <li> <p>Threaded Binary Tree is also a binary tree in which all left child pointers that are NULL (in Linked list representation) points to its in-order predecessor, and all right child pointers that are NULL (in Linked list representation) points to its in-order successor.</p> </li> </ul> <ul> <li>If there is no in-order predecessor or in-order successor, then it points to the root node.</li> </ul> <p>Consider the following binary tree.</p> <p></p> <ul> <li>To convert the above example binary tree into a threaded binary tree, first find the in-order traversal of that tree...</li> </ul> <p>In-order traversal of above binary tree...</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#h-d-i-b-e-a-f-j-c-g","title":"H - D - I - B - E - A - F - J - C - G","text":"<ul> <li> <p>When we represent the above binary tree using linked list representation, nodes\u00a0H, I, E, F, J\u00a0and\u00a0G\u00a0left child pointers are NULL. </p> </li> <li> <p>This NULL is replaced by address of its in-order predecessor respectively (I to D, E to B, F to A, J to F and G to C), but here the node H does not have its in-order predecessor, so it points to the root node A. </p> </li> <li> <p>And nodes\u00a0H, I, E, J\u00a0and\u00a0G\u00a0right child pointers are NULL. </p> </li> <li> <p>These NULL pointers are replaced by address of its in-order successor respectively (H to D, I to B, E to A, and J to C), but here the node G does not have its in-order successor, so it points to the root node A.  </p> </li> </ul> <ul> <li>Above example binary tree is converted into threaded binary tree as follows.</li> </ul> <p></p> <ul> <li>In the above figure, threads are indicated with dotted links.</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#heaps-max-min-binary-binomial-fibonacci-leftist-k-ary-and-priority-queue","title":"Heaps (Max, Min, Binary , Binomial, Fibonacci, Leftist, K-ary) and Priority Queue","text":"","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#heap-data-structure","title":"Heap Data Structure","text":"<ul> <li> <p>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-4/ce100-week-4-heap/</p> </li> <li> <p>Programiz</p> </li> <li> <p>https://www.programiz.com/dsa/heap-data-structure</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-heap","title":"Max-Heap","text":"<ul> <li>Data Structures Tutorials - Max Heap with an exaple</li> <li>CE100 Algorithms and Programming II - RTEU CE100 Algorithms and Programming-II Course Notes</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-priority-queue","title":"Max Priority Queue","text":"<ul> <li> <p>Course Notes</p> </li> <li> <p>CE100 Algorithms and Programming II - RTEU CE100 Algorithms and Programming-II Course Notes</p> </li> <li> <p>Btech Smart Class</p> </li> <li> <p>http://www.btechsmartclass.com/data_structures/max-priority-queue.html</p> </li> <li> <p>William Fiset</p> </li> <li> <p>https://www.youtube.com/watch?v=wptevk0bshY&amp;t=0s&amp;ab_channel=WilliamFiset</p> </li> <li>https://github.com/williamfiset/Algorithms/tree/master/src/main/java/com/williamfiset/algorithms/datastructures/priorityqueue </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-priority-queue-with-heap","title":"Max Priority Queue with Heap","text":"<ul> <li> <p>Please follow the link below for Heap and Max-Priority</p> </li> <li> <p>CE100 Algorithms and Programming II - RTEU CE100 Algorithms and Programming-II Course Notes</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-priority-queue-in-c","title":"Max Priority Queue in C","text":"<pre><code>// Priority Queue implementation in C\n\n#include &lt;stdio.h&gt;\nint size = 0;\nvoid swap(int *a, int *b) {\n  int temp = *b;\n  *b = *a;\n  *a = temp;\n}\n\n// Function to heapify the tree\nvoid heapify(int array[], int size, int i) {\n  if (size == 1) {\n    printf(\"Single element in the heap\");\n  } else {\n    // Find the largest among root, left child and right child\n    int largest = i;\n    int l = 2 * i + 1;\n    int r = 2 * i + 2;\n    if (l &lt; size &amp;&amp; array[l] &gt; array[largest])\n      largest = l;\n    if (r &lt; size &amp;&amp; array[r] &gt; array[largest])\n      largest = r;\n\n    // Swap and continue heapifying if root is not largest\n    if (largest != i) {\n      swap(&amp;array[i], &amp;array[largest]);\n      heapify(array, size, largest);\n    }\n  }\n}\n\n// Function to insert an element into the tree\nvoid insert(int array[], int newNum) {\n  if (size == 0) {\n    array[0] = newNum;\n    size += 1;\n  } else {\n    array[size] = newNum;\n    size += 1;\n    for (int i = size / 2 - 1; i &gt;= 0; i--) {\n      heapify(array, size, i);\n    }\n  }\n}\n\n// Function to delete an element from the tree\nvoid deleteRoot(int array[], int num) {\n  int i;\n  for (i = 0; i &lt; size; i++) {\n    if (num == array[i])\n      break;\n  }\n\n  swap(&amp;array[i], &amp;array[size - 1]);\n  size -= 1;\n  for (int i = size / 2 - 1; i &gt;= 0; i--) {\n    heapify(array, size, i);\n  }\n}\n\n// Print the array\nvoid printArray(int array[], int size) {\n  for (int i = 0; i &lt; size; ++i)\n    printf(\"%d \", array[i]);\n  printf(\"\\n\");\n}\n\n// Driver code\nint main() {\n  int array[10];\n\n  insert(array, 3);\n  insert(array, 4);\n  insert(array, 9);\n  insert(array, 5);\n  insert(array, 2);\n\n  printf(\"Max-Heap array: \");\n  printArray(array, size);\n\n  deleteRoot(array, 4);\n\n  printf(\"After deleting an element: \");\n\n  printArray(array, size);\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-priority-queue-in-c_1","title":"Max Priority Queue in C++","text":"<pre><code>// Priority Queue implementation in C++\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n// Function to swap position of two elements\nvoid swap(int *a, int *b) {\n  int temp = *b;\n  *b = *a;\n  *a = temp;\n}\n\n// Function to heapify the tree\nvoid heapify(vector&lt;int&gt; &amp;hT, int i) {\n  int size = hT.size();\n\n  // Find the largest among root, left child and right child\n  int largest = i;\n  int l = 2 * i + 1;\n  int r = 2 * i + 2;\n  if (l &lt; size &amp;&amp; hT[l] &gt; hT[largest])\n    largest = l;\n  if (r &lt; size &amp;&amp; hT[r] &gt; hT[largest])\n    largest = r;\n\n  // Swap and continue heapifying if root is not largest\n  if (largest != i) {\n    swap(&amp;hT[i], &amp;hT[largest]);\n    heapify(hT, largest);\n  }\n}\n\n// Function to insert an element into the tree\nvoid insert(vector&lt;int&gt; &amp;hT, int newNum) {\n  int size = hT.size();\n  if (size == 0) {\n    hT.push_back(newNum);\n  } else {\n    hT.push_back(newNum);\n    for (int i = size / 2 - 1; i &gt;= 0; i--) {\n      heapify(hT, i);\n    }\n  }\n}\n\n// Function to delete an element from the tree\nvoid deleteNode(vector&lt;int&gt; &amp;hT, int num) {\n  int size = hT.size();\n  int i;\n  for (i = 0; i &lt; size; i++) {\n    if (num == hT[i])\n      break;\n  }\n  swap(&amp;hT[i], &amp;hT[size - 1]);\n\n  hT.pop_back();\n  for (int i = size / 2 - 1; i &gt;= 0; i--) {\n    heapify(hT, i);\n  }\n}\n\n// Print the tree\nvoid printArray(vector&lt;int&gt; &amp;hT) {\n  for (int i = 0; i &lt; hT.size(); ++i)\n    cout &lt;&lt; hT[i] &lt;&lt; \" \";\n  cout &lt;&lt; \"\\n\";\n}\n\n// Driver code\nint main() {\n  vector&lt;int&gt; heapTree;\n\n  insert(heapTree, 3);\n  insert(heapTree, 4);\n  insert(heapTree, 9);\n  insert(heapTree, 5);\n  insert(heapTree, 2);\n\n  cout &lt;&lt; \"Max-Heap array: \";\n  printArray(heapTree);\n\n  deleteNode(heapTree, 4);\n\n  cout &lt;&lt; \"After deleting an element: \";\n\n  printArray(heapTree);\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-priority-queue-in-java","title":"Max Priority Queue in Java","text":"<pre><code>// Priority Queue implementation in Java\n\nimport java.util.ArrayList;\n\nclass Heap {\n  // Function to heapify the tree\n  void heapify(ArrayList&lt;Integer&gt; hT, int i) {\n    int size = hT.size();\n    // Find the largest among root, left child and right child\n    int largest = i;\n    int l = 2 * i + 1;\n    int r = 2 * i + 2;\n    if (l &lt; size &amp;&amp; hT.get(l) &gt; hT.get(largest))\n      largest = l;\n    if (r &lt; size &amp;&amp; hT.get(r) &gt; hT.get(largest))\n      largest = r;\n\n    // Swap and continue heapifying if root is not largest\n    if (largest != i) {\n      int temp = hT.get(largest);\n      hT.set(largest, hT.get(i));\n      hT.set(i, temp);\n\n      heapify(hT, largest);\n    }\n  }\n\n  // Function to insert an element into the tree\n  void insert(ArrayList&lt;Integer&gt; hT, int newNum) {\n    int size = hT.size();\n    if (size == 0) {\n      hT.add(newNum);\n    } else {\n      hT.add(newNum);\n      for (int i = size / 2 - 1; i &gt;= 0; i--) {\n        heapify(hT, i);\n      }\n    }\n  }\n\n  // Function to delete an element from the tree\n  void deleteNode(ArrayList&lt;Integer&gt; hT, int num) {\n    int size = hT.size();\n    int i;\n    for (i = 0; i &lt; size; i++) {\n      if (num == hT.get(i))\n        break;\n    }\n\n    int temp = hT.get(i);\n    hT.set(i, hT.get(size - 1));\n    hT.set(size - 1, temp);\n\n    hT.remove(size - 1);\n    for (int j = size / 2 - 1; j &gt;= 0; j--) {\n      heapify(hT, j);\n    }\n  }\n\n  // Print the tree\n  void printArray(ArrayList&lt;Integer&gt; array, int size) {\n    for (Integer i : array) {\n      System.out.print(i + \" \");\n    }\n    System.out.println();\n  }\n\n  // Driver code\n  public static void main(String args[]) {\n\n    ArrayList&lt;Integer&gt; array = new ArrayList&lt;Integer&gt;();\n    int size = array.size();\n\n    Heap h = new Heap();\n    h.insert(array, 3);\n    h.insert(array, 4);\n    h.insert(array, 9);\n    h.insert(array, 5);\n    h.insert(array, 2);\n\n    System.out.println(\"Max-Heap array: \");\n    h.printArray(array, size);\n\n    h.deleteNode(array, 4);\n    System.out.println(\"After deleting an element: \");\n    h.printArray(array, size);\n  }\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-priority-queue-with-array","title":"Max Priority Queue with Array","text":"<ul> <li> <p>In the normal queue data structure, </p> </li> <li> <p>insertion is performed at the end of the queue and deletion is performed based on the FIFO principle. </p> </li> <li> <p>This queue implementation may not be suitable for all applications.</p> </li> <li> <p>Consider a networking application where the server has to respond for requests from multiple clients using queue data structure. </p> </li> </ul> <ul> <li>Assume four requests arrived at the queue in the order of R1, R2, R3 &amp; R4 where R1 requires 20 units of time, R2 requires 2 units of time, R3 requires 10 units of time and R4 requires 5 units of time. A queue is as follows.</li> </ul> <p></p> <p>Now, check to wait time of each request that to be completed.</p> <ol> <li>R1 : 20 units of time</li> <li>R2 : 22 units of time (R2 must wait until R1 completes 20 units and R2 itself requires 2 units. Total 22 units)</li> <li>R3 : 32 units of time (R3 must wait until R2 completes 22 units and R3 itself requires 10 units. Total 32 units)</li> <li>R4 : 37 units of time (R4 must wait until R3 completes 35 units and R4 itself requires 5 units. Total 37 units)</li> </ol> <p>****Here, the average waiting time for all requests (R1, R2, R3 and R4) is (20+22+32+37)/4 \u2248 27 units of time.**</p> <ul> <li> <p>That means, if we use a normal queue data structure to serve these requests the average waiting time for each request is 27 units of time.  </p> </li> <li> <p>Now, consider another way of serving these requests. </p> </li> <li> <p>If we serve according to their required amount of time, first we serve R2 which has minimum time (2 units) requirement. </p> </li> <li> <p>Then serve R4 which has second minimum time (5 units) requirement and then serve R3 which has third minimum time (10 units) requirement and finally R1 is served which has maximum time (20 units) requirement.</p> </li> </ul> <p>Now, check to wait time of each request that to be completed.</p> <ol> <li>R2 : 2 units of time</li> <li>R4 : 7 units of time (R4 must wait until R2 completes 2 units and R4 itself requires 5 units. Total 7 units)</li> <li>R3 : 17 units of time (R3 must wait until R4 completes 7 units and R3 itself requires 10 units. Total 17 units)</li> <li>R1 : 37 units of time (R1 must wait until R3 completes 17 units and R1 itself requires 20 units. Total 37 units)</li> </ol> <p>****Here, the average waiting time for all requests (R1, R2, R3 and R4) is (2+7+17+37)/4 \u2248 15 units of time.**</p> <ul> <li> <p>From the above two situations, it is very clear that the second method server can complete all four requests with very less time compared to the first method. </p> </li> <li> <p>This is what exactly done by the priority queue.</p> </li> <li> <p>Priority queue is a variant of a queue data structure in which insertion is performed in the order of arrival and deletion is performed based on the priority.</p> </li> </ul> <ul> <li> <p>There are two types of priority queues they are as follows.</p> </li> <li> <p>Max Priority Queue</p> </li> <li> <p>Min Priority Queue</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#1-max-priority-queue","title":"1. Max Priority Queue","text":"<ul> <li> <p>In a max priority queue, elements are inserted in the order in which they arrive the queue and the maximum value is always removed first from the queue. </p> </li> <li> <p>For example, assume that we insert in the order 8, 3, 2 &amp; 5 and they are removed in the order 8, 5, 3, 2.  </p> </li> <li> <p>The following are the operations performed in a Max priority queue...</p> </li> <li> <p>isEmpty()\u00a0- Check whether queue is Empty.</p> </li> <li> <p>insert()\u00a0- Inserts a new value into the queue.</p> </li> <li> <p>findMax()\u00a0- Find maximum value in the queue.</p> </li> <li> <p>remove()\u00a0- Delete maximum value from the queue.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#max-priority-queue-representations","title":"Max Priority Queue Representations","text":"<ul> <li> <p>There are 6 representations of max priority queue.</p> </li> <li> <p>Using an Unordered Array (Dynamic Array)</p> </li> <li> <p>Using an Unordered Array (Dynamic Array) with the index of the maximum value</p> </li> <li> <p>Using an Array (Dynamic Array) in Decreasing Order</p> </li> <li> <p>Using an Array (Dynamic Array) in Increasing Order</p> </li> <li> <p>Using Linked List in Increasing Order</p> </li> <li> <p>Using Unordered Linked List with reference to node with the maximum value</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#1-using-an-unordered-array-dynamic-array","title":"1. Using an Unordered Array (Dynamic Array)","text":"<ul> <li> <p>In this representation, elements are inserted according to their arrival order and the largest element is deleted first from the max priority queue.  </p> </li> <li> <p>For example, assume that elements are inserted in the order of 8, 2, 3 and 5. And they are removed in the order 8, 5, 3 and 2.</p> </li> </ul> <p></p> <ul> <li> <p>Now, let us analyze each operation according to this representation.</p> </li> <li> <p>isEmpty()\u00a0- If 'front == -1' queue is Empty. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>insert()\u00a0- New element is added at the end of the queue. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>findMax()\u00a0- To find the maximum element in the queue, we need to compare it with all the elements in the queue. This operation requires\u00a0O(n)\u00a0time complexity.</p> </li> <li> <p>remove()\u00a0- To remove an element from the max priority queue, first we need to find the largest element using\u00a0findMax()\u00a0which requires\u00a0O(n)\u00a0time complexity, then that element is deleted with constant time complexity\u00a0O(1). The remove() operation requires\u00a0O(n) + O(1) \u2248 O(n)\u00a0time complexity.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#2-using-an-unordered-array-dynamic-array-with-the-index-of-the-maximum-value","title":"2. Using an Unordered Array (Dynamic Array) with the index of the maximum value","text":"<ul> <li> <p>In this representation, elements are inserted according to their arrival order and the largest element is deleted first from max priority queue. </p> </li> <li> <p>For example, assume that elements are inserted in the order of 8, 2, 3 and 5. And they are removed in the order 8, 5, 3 and 2.</p> </li> </ul> <p></p> <ul> <li> <p>Now, let us analyze each operation according to this representation.</p> </li> <li> <p>isEmpty()\u00a0- If 'front == -1' queue is Empty. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>insert()\u00a0- New element is added at the end of the queue with\u00a0O(1)\u00a0time complexity and for each insertion we need to update maxIndex with\u00a0O(1)\u00a0time complexity. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>findMax()\u00a0- Finding the maximum element in the queue is very simple because index of the maximum element is stored in maxIndex. This operation requires\u00a0O(1)\u00a0time complexity.</p> </li> <li> <p>remove()\u00a0- To remove an element from the queue, first we need to find the largest element using\u00a0findMax()\u00a0which requires\u00a0O(1)\u00a0time complexity, then that element is deleted with constant time complexity\u00a0O(1)\u00a0and finally we need to update the next largest element index value in maxIndex which requires\u00a0O(n)\u00a0time complexity. The remove() operation requires\u00a0O(1)+O(1)+O(n) \u2248 O(n)\u00a0time complexity.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#3-using-an-array-dynamic-array-in-decreasing-order","title":"3. Using an Array (Dynamic Array) in Decreasing Order","text":"<ul> <li> <p>In this representation, elements are inserted according to their value in decreasing order and largest element is deleted first from max priority queue.  </p> </li> <li> <p>For example, assume that elements are inserted in the order of 8, 5, 3 and 2. And they are removed in the order 8, 5, 3 and 2.</p> </li> </ul> <p></p> <ul> <li> <p>Now, let us analyze each operation according to this representation...</p> </li> <li> <p>isEmpty()\u00a0- If 'front == -1' queue is Empty. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>insert()\u00a0- New element is added at a particular position based on the decreasing order of elements which requires\u00a0O(n)\u00a0time complexity as it needs to shift existing elements inorder to insert new element in decreasing order. This insert() operation requires\u00a0O(n)\u00a0time complexity.</p> </li> <li> <p>findMax()\u00a0- Finding the maximum element in the queue is very simple because maximum element is at the beginning of the queue. This findMax() operation requires\u00a0O(1)\u00a0time complexity.</p> </li> <li> <p>remove()\u00a0- To remove an element from the max priority queue, first we need to find the largest element using\u00a0findMax()\u00a0operation which requires\u00a0O(1)\u00a0time complexity, then that element is deleted with constant time complexity\u00a0O(1)\u00a0and finally we need to rearrange the remaining elements in the list which requires\u00a0O(n)\u00a0time complexity. This remove() operation requires\u00a0O(1) + O(1) + O(n) \u2248 O(n)\u00a0time complexity.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#4-using-an-array-dynamic-array-in-increasing-order","title":"4. Using an Array (Dynamic Array) in Increasing Order","text":"<ul> <li> <p>In this representation, elements are inserted according to their value in increasing order and maximum element is deleted first from max priority queue.  </p> </li> <li> <p>For example, assume that elements are inserted in the order of 2, 3, 5 and 8. And they are removed in the order 8, 5, 3 and 2.</p> </li> </ul> <p></p> <ul> <li> <p>Now, let us analyze each operation according to this representation...</p> </li> <li> <p>isEmpty()\u00a0- If 'front == -1' queue is Empty. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>insert()\u00a0- New element is added at a particular position in the increasing order of elements into the queue which requires\u00a0O(n)\u00a0time complexity as it needs to shift existing elements to maintain increasing order of elements. This insert() operation requires\u00a0O(n)\u00a0time complexity.</p> </li> <li> <p>findMax()\u00a0- Finding the maximum element in the queue is very simple becuase maximum element is at the end of the queue. This findMax() operation requires\u00a0O(1)\u00a0time complexity.</p> </li> <li> <p>remove()\u00a0- To remove an element from the queue first we need to find the largest element using\u00a0findMax()\u00a0which requires\u00a0O(1)\u00a0time complexity, then that element is deleted with constant time complexity\u00a0O(1). Finally, we need to rearrange the remaining elements to maintain increasing order of elements which requires\u00a0O(n)\u00a0time complexity. This remove() operation requires\u00a0O(1) + O(1) + O(n) \u2248 O(n)\u00a0time complexity.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#5-using-linked-list-in-increasing-order","title":"5. Using Linked List in Increasing Order","text":"<ul> <li> <p>In this representation, we use a single linked list to represent max priority queue. In this representation, elements are inserted according to their value in increasing order and a node with the maximum value is deleted first from the max priority queue.  </p> </li> <li> <p>For example, assume that elements are inserted in the order of 2, 3, 5 and 8. And they are removed in the order of 8, 5, 3 and 2.</p> </li> </ul> <p></p> <ul> <li> <p>Now, let us analyze each operation according to this representation...</p> </li> <li> <p>isEmpty()\u00a0- If 'head == NULL' queue is Empty. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>insert()\u00a0- New element is added at a particular position in the increasing order of elements which requires\u00a0O(n)\u00a0time complexity. This insert() operation requires\u00a0O(n)\u00a0time complexity.</p> </li> <li> <p>findMax()\u00a0- Finding the maximum element in the queue is very simple because maximum element is at the end of the queue. This findMax() operation requires\u00a0O(1)\u00a0time complexity.</p> </li> <li> <p>remove()\u00a0- Removing an element from the queue is simple because the largest element is last node in the queue. This remove() operation requires\u00a0O(1)\u00a0time complexity.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#6-using-unordered-linked-list-with-reference-to-node-with-the-maximum-value","title":"6. Using Unordered Linked List with reference to node with the maximum value","text":"<ul> <li> <p>In this representation, we use a single linked list to represent max priority queue. We always maintain a reference (maxValue) to the node with the maximum value in the queue. In this representation, elements are inserted according to their arrival and the node with the maximum value is deleted first from the max priority queue.  </p> </li> <li> <p>For example, assume that elements are inserted in the order of 2, 8, 3 and 5. And they are removed in the order of 8, 5, 3 and 2.</p> </li> </ul> <p></p> <ul> <li> <p>Now, let us analyze each operation according to this representation..</p> </li> <li> <p>isEmpty()\u00a0- If 'head == NULL' queue is Empty. This operation requires\u00a0O(1)\u00a0time complexity which means constant time complexity.</p> </li> <li> <p>insert()\u00a0- New element is added at end of the queue which requires\u00a0O(1)\u00a0time complexity. And we need to update maxValue reference with address of largest element in the queue which requires\u00a0O(1)\u00a0time complexity. This insert() operation requires\u00a0O(1)\u00a0time complexity.</p> </li> <li> <p>findMax()\u00a0- Finding the maximum element in the queue is very simple because the address of largest element is stored at maxValue. This findMax() operation requires\u00a0O(1)\u00a0time complexity.</p> </li> <li> <p>remove()\u00a0- Removing an element from the queue is deleting the node which is referenced by maxValue which requires\u00a0O(1)\u00a0time complexity. And then we need to update maxValue reference to new node with maximum value in the queue which requires\u00a0O(n) time complexity. This remove() operation requires\u00a0O(n)\u00a0time complexity.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#2-min-priority-queue-representations","title":"2. Min Priority Queue Representations","text":"<ul> <li> <p>Min Priority Queue is similar to max priority queue except for the removal of maximum element first. We remove minimum element first in the min-priority queue.  </p> </li> <li> <p>The following operations are performed in Min Priority Queue...</p> </li> <li> <p>isEmpty()\u00a0- Check whether queue is Empty.</p> </li> <li> <p>insert()\u00a0- Inserts a new value into the queue.</p> </li> <li> <p>findMin()\u00a0- Find minimum value in the queue.</p> </li> <li> <p>remove()\u00a0- Delete minimum value from the queue.</p> </li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binary-heap","title":"Binary Heap","text":"<ul> <li>Geeks for Geeks</li> <li>Binary Heap<ul> <li>https://www.geeksforgeeks.org/binary-heap/?ref=lbp</li> <li>https://www.geeksforgeeks.org/difference-between-binary-heap-binomial-heap-and-fibonacci-heap/?ref=rp</li> </ul> </li> <li>Structure of Fibonacci Heaps</li> <li>Mergeable-heap operations</li> </ul> <p>A Binary Heap is a Binary Tree with following properties.  </p> <p>1) It\u2019s a complete tree (All levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.</p> <p>2) A Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap.</p> <p>How is Binary Heap represented? A Binary Heap is a Complete Binary Tree. A binary heap is typically represented as an array.</p> <ul> <li> <p>The root element will be at Arr[0].</p> </li> <li> <p>Below table shows indexes of other nodes for the ith\u00a0node, i.e., Arr[i]:  </p> </li> </ul> Arr[(i-1)/2] Returns the parent node Arr[(2*i)+1] Returns the left child node Arr[(2*i)+2] Returns the right child node <p>The traversal method use to achieve Array representation is\u00a0Level Order </p> <p>Please refer\u00a0Array Representation Of Binary Heap\u00a0for details.</p> <p>Applications of Heaps:</p> <p>1) Heap Sort: Heap Sort uses Binary Heap to sort an array in O(nLogn) time.</p> <p>2)\u00a0Priority Queue: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also efficiently.</p> <p>3)\u00a0Graph Algorithms: The priority queues are especially used in Graph Algorithms like\u00a0Dijkstra\u2019s Shortest Path\u00a0and\u00a0Prim\u2019s Minimum Spanning Tree.</p> <p>4)\u00a0Many problems can be efficiently solved using Heaps. See following for example. a)\u00a0K\u2019th Largest Element in an array. b)\u00a0Sort an almost sorted array/ c)\u00a0Merge K Sorted Arrays.</p> <p>Operations on Min Heap:</p> <p>1)\u00a0getMini(): It returns the root element of Min Heap. Time Complexity of this operation is O(1).</p> <p>2)\u00a0extractMin(): Removes the minimum element from MinHeap. Time Complexity of this Operation is O(Logn) as this operation needs to maintain the heap property (by calling heapify()) after removing root.</p> <p>3)\u00a0decreaseKey(): Decreases value of key. The time complexity of this operation is O(Logn). If the decreases key value of a node is greater than the parent of the node, then we don\u2019t need to do anything. Otherwise, we need to traverse up to fix the violated heap property.</p> <p>4)\u00a0insert(): Inserting a new key takes O(Logn) time. We add a new key at the end of the tree. IF new key is greater than its parent, then we don\u2019t need to do anything. Otherwise, we need to traverse up to fix the violated heap property.</p> <p>5)\u00a0delete(): Deleting a key also takes O(Logn) time. We replace the key to be deleted with minum infinite by calling decreaseKey(). After decreaseKey(), the minus infinite value must reach root, so we call extractMin() to remove the key.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#basic-heap-operations-in-c","title":"Basic Heap operations in C++","text":"<pre><code>// A C++ program to demonstrate common Binary Heap Operations\n#include&lt;iostream&gt;\n#include&lt;climits&gt;\nusing namespace std;\n\n// Prototype of a utility function to swap two integers\nvoid swap(int *x, int *y);\n\n// A class for Min Heap\nclass MinHeap\n{\n    int *harr; // pointer to array of elements in heap\n    int capacity; // maximum possible size of min heap\n    int heap_size; // Current number of elements in min heap\npublic:\n    // Constructor\n    MinHeap(int capacity);\n\n    // to heapify a subtree with the root at given index\n    void MinHeapify(int );\n\n    int parent(int i) { return (i-1)/2; }\n\n    // to get index of left child of node at index i\n    int left(int i) { return (2*i + 1); }\n\n    // to get index of right child of node at index i\n    int right(int i) { return (2*i + 2); }\n\n    // to extract the root which is the minimum element\n    int extractMin();\n\n    // Decreases key value of key at index i to new_val\n    void decreaseKey(int i, int new_val);\n\n    // Returns the minimum key (key at root) from min heap\n    int getMin() { return harr[0]; }\n\n    // Deletes a key stored at index i\n    void deleteKey(int i);\n\n    // Inserts a new key 'k'\n    void insertKey(int k);\n};\n\n// Constructor: Builds a heap from a given array a[] of given size\nMinHeap::MinHeap(int cap)\n{\n    heap_size = 0;\n    capacity = cap;\n    harr = new int[cap];\n}\n\n// Inserts a new key 'k'\nvoid MinHeap::insertKey(int k)\n{\n    if (heap_size == capacity)\n    {\n        cout &lt;&lt; \"\\nOverflow: Could not insertKey\\n\";\n        return;\n    }\n\n    // First insert the new key at the end\n    heap_size++;\n    int i = heap_size - 1;\n    harr[i] = k;\n\n    // Fix the min heap property if it is violated\n    while (i != 0 &amp;&amp; harr[parent(i)] &gt; harr[i])\n    {\n    swap(&amp;harr[i], &amp;harr[parent(i)]);\n    i = parent(i);\n    }\n}\n\n// Decreases value of key at index 'i' to new_val. It is assumed that\n// new_val is smaller than harr[i].\nvoid MinHeap::decreaseKey(int i, int new_val)\n{\n    harr[i] = new_val;\n    while (i != 0 &amp;&amp; harr[parent(i)] &gt; harr[i])\n    {\n    swap(&amp;harr[i], &amp;harr[parent(i)]);\n    i = parent(i);\n    }\n}\n\n// Method to remove minimum element (or root) from min heap\nint MinHeap::extractMin()\n{\n    if (heap_size &lt;= 0)\n        return INT_MAX;\n    if (heap_size == 1)\n    {\n        heap_size--;\n        return harr[0];\n    }\n\n    // Store the minimum value, and remove it from heap\n    int root = harr[0];\n    harr[0] = harr[heap_size-1];\n    heap_size--;\n    MinHeapify(0);\n\n    return root;\n}\n\n\n// This function deletes key at index i. It first reduced value to minus\n// infinite, then calls extractMin()\nvoid MinHeap::deleteKey(int i)\n{\n    decreaseKey(i, INT_MIN);\n    extractMin();\n}\n\n// A recursive method to heapify a subtree with the root at given index\n// This method assumes that the subtrees are already heapified\nvoid MinHeap::MinHeapify(int i)\n{\n    int l = left(i);\n    int r = right(i);\n    int smallest = i;\n    if (l &lt; heap_size &amp;&amp; harr[l] &lt; harr[i])\n        smallest = l;\n    if (r &lt; heap_size &amp;&amp; harr[r] &lt; harr[smallest])\n        smallest = r;\n    if (smallest != i)\n    {\n        swap(&amp;harr[i], &amp;harr[smallest]);\n        MinHeapify(smallest);\n    }\n}\n\n// A utility function to swap two elements\nvoid swap(int *x, int *y)\n{\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\n// Driver program to test above functions\nint main()\n{\n    MinHeap h(11);\n    h.insertKey(3);\n    h.insertKey(2);\n    h.deleteKey(1);\n    h.insertKey(15);\n    h.insertKey(5);\n    h.insertKey(4);\n    h.insertKey(45);\n    cout &lt;&lt; h.extractMin() &lt;&lt; \" \";\n    cout &lt;&lt; h.getMin() &lt;&lt; \" \";\n    h.decreaseKey(2, 1);\n    cout &lt;&lt; h.getMin();\n    return 0;\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#basic-heap-operations-in-c_1","title":"Basic Heap operations in C","text":"<pre><code>// C# program to demonstrate common\n// Binary Heap Operations - Min Heap\nusing System;\n\n// A class for Min Heap\nclass MinHeap{\n\n// To store array of elements in heap\npublic int[] heapArray{ get; set; }\n\n// max size of the heap\npublic int capacity{ get; set; }\n\n// Current number of elements in the heap\npublic int current_heap_size{ get; set; }\n\n// Constructor\npublic MinHeap(int n)\n{\n    capacity = n;\n    heapArray = new int[capacity];\n    current_heap_size = 0;\n}\n\n// Swapping using reference\npublic static void Swap&lt;T&gt;(ref T lhs, ref T rhs)\n{\n    T temp = lhs;\n    lhs = rhs;\n    rhs = temp;\n}\n\n// Get the Parent index for the given index\npublic int Parent(int key)\n{\n    return (key - 1) / 2;\n}\n\n// Get the Left Child index for the given index\npublic int Left(int key)\n{\n    return 2 * key + 1;\n}\n\n// Get the Right Child index for the given index\npublic int Right(int key)\n{\n    return 2 * key + 2;\n}\n\n// Inserts a new key\npublic bool insertKey(int key)\n{\n    if (current_heap_size == capacity)\n    {\n\n        // heap is full\n        return false;\n    }\n\n    // First insert the new key at the end\n    int i = current_heap_size;\n    heapArray[i] = key;\n    current_heap_size++;\n\n    // Fix the min heap property if it is violated\n    while (i != 0 &amp;&amp; heapArray[i] &lt;\n                    heapArray[Parent(i)])\n    {\n        Swap(ref heapArray[i],\n            ref heapArray[Parent(i)]);\n        i = Parent(i);\n    }\n    return true;\n}\n\n// Decreases value of given key to new_val.\n// It is assumed that new_val is smaller\n// than heapArray[key].\npublic void decreaseKey(int key, int new_val)\n{\n    heapArray[key] = new_val;\n\n    while (key != 0 &amp;&amp; heapArray[key] &lt;\n                    heapArray[Parent(key)])\n    {\n        Swap(ref heapArray[key],\n            ref heapArray[Parent(key)]);\n        key = Parent(key);\n    }\n}\n\n// Returns the minimum key (key at\n// root) from min heap\npublic int getMin()\n{\n    return heapArray[0];\n}\n\n// Method to remove minimum element\n// (or root) from min heap\npublic int extractMin()\n{\n    if (current_heap_size &lt;= 0)\n    {\n        return int.MaxValue;\n    }\n\n    if (current_heap_size == 1)\n    {\n        current_heap_size--;\n        return heapArray[0];\n    }\n\n    // Store the minimum value,\n    // and remove it from heap\n    int root = heapArray[0];\n\n    heapArray[0] = heapArray[current_heap_size - 1];\n    current_heap_size--;\n    MinHeapify(0);\n\n    return root;\n}\n\n// This function deletes key at the\n// given index. It first reduced value\n// to minus infinite, then calls extractMin()\npublic void deleteKey(int key)\n{\n    decreaseKey(key, int.MinValue);\n    extractMin();\n}\n\n// A recursive method to heapify a subtree\n// with the root at given index\n// This method assumes that the subtrees\n// are already heapified\npublic void MinHeapify(int key)\n{\n    int l = Left(key);\n    int r = Right(key);\n\n    int smallest = key;\n    if (l &lt; current_heap_size &amp;&amp;\n        heapArray[l] &lt; heapArray[smallest])\n    {\n        smallest = l;\n    }\n    if (r &lt; current_heap_size &amp;&amp;\n        heapArray[r] &lt; heapArray[smallest])\n    {\n        smallest = r;\n    }\n\n    if (smallest != key)\n    {\n        Swap(ref heapArray[key],\n            ref heapArray[smallest]);\n        MinHeapify(smallest);\n    }\n}\n\n// Increases value of given key to new_val.\n// It is assumed that new_val is greater\n// than heapArray[key].\n// Heapify from the given key\npublic void increaseKey(int key, int new_val)\n{\n    heapArray[key] = new_val;\n    MinHeapify(key);\n}\n\n// Changes value on a key\npublic void changeValueOnAKey(int key, int new_val)\n{\n    if (heapArray[key] == new_val)\n    {\n        return;\n    }\n    if (heapArray[key] &lt; new_val)\n    {\n        increaseKey(key, new_val);\n    } else\n    {\n        decreaseKey(key, new_val);\n    }\n}\n}\n\nstatic class MinHeapTest{\n\n// Driver code\npublic static void Main(string[] args)\n{\n    MinHeap h = new MinHeap(11);\n    h.insertKey(3);\n    h.insertKey(2);\n    h.deleteKey(1);\n    h.insertKey(15);\n    h.insertKey(5);\n    h.insertKey(4);\n    h.insertKey(45);\n\n    Console.Write(h.extractMin() + \" \");\n    Console.Write(h.getMin() + \" \");\n\n    h.decreaseKey(2, 1);\n    Console.Write(h.getMin());\n}\n}\n\n// This code is contributed by\n// Dinesh Clinton Albert(dineshclinton)\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#basic-heap-operations-in-java-built-in-functions","title":"Basic Heap operations in Java (Built-in Functions)","text":"<p>PriorityQueue in Java - GeeksforGeeks</p> <pre><code>// Java program to demonstrate the \n// working of PriorityQueue \nimport java.util.*; \n\nclass PriorityQueueDemo { \n\n    // Main Method \n    public static void main(String args[]) \n    { \n        // Creating empty priority queue \n        PriorityQueue&lt;Integer&gt; pQueue = new PriorityQueue&lt;Integer&gt;(); \n\n        // Adding items to the pQueue using add() \n        pQueue.add(10); \n        pQueue.add(20); \n        pQueue.add(15); \n\n        // Printing the top element of PriorityQueue \n        System.out.println(pQueue.peek()); \n\n        // Printing the top element and removing it \n        // from the PriorityQueue container \n        System.out.println(pQueue.poll()); \n\n        // Printing the top element again \n        System.out.println(pQueue.peek()); \n    } \n} \n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#output_3","title":"Output","text":"<pre><code>10\n10\n15\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#k-arr-heap","title":"K-Arr Heap","text":"<ul> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/k-ary-heap/?ref=lbp</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#k-arr-heap_1","title":"K-Arr Heap","text":"<p>K-ary heaps are a generalization of binary heap(K=2) in which each node have K children instead of 2. Just like binary heap, it follows two properties:</p> <ol> <li>Nearly complete binary tree, with all levels having maximum number of nodes except the last, which is filled in left to right manner.</li> <li>Like Binary Heap, it can be divided into two categories:\u00a0</li> <li>Max k-ary heap (key at root is greater than all descendants and same is recursively true for all nodes).\u00a0</li> <li>Min k-ary heap (key at root is lesser than all descendants and same is recursively true for all nodes)</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#k-arr-heap-example","title":"K-Arr Heap Example","text":"<pre><code>3-ary max heap - root node is maximum\n                 of all nodes\n         10\n     /    |   \\\n   7      9     8\n / | \\   /\n4  6  5 7\n\n\n3-ary min heap -root node is minimum \n                of all nodes\n         10\n      /   |  \\\n    12    11  13\n  / | \\\n14 15 18 \n</code></pre> <p>The height of a complete k-ary tree with n-nodes is given by \\(log_kn\\).</p> <p>Applications of K-ary Heap:\u00a0</p> <ul> <li>K-ary heap when used in the implementation of\u00a0priority queue\u00a0allows faster decrease key operation as compared to binary heap (\\(O(log_2n)\\)) for binary heap vs \\(O(log_kn)\\) for K-ary heap). </li> <li>Nevertheless, it causes the complexity of extractMin() operation to increase to \\(O(klog_kn)\\) as compared to the complexity of \\(O(log_2n)\\) when using binary heaps for priority queue. </li> <li>This allows K-ary heap to be more efficient in algorithms where decrease priority operations are more common than extractMin() operation.</li> <li>Example:\u00a0Dijkstra\u2019s\u00a0algorithm for single source shortest path and\u00a0Prim\u2019s\u00a0algorithm for minimum spanning tree</li> <li>K-ary heap has better memory cache behaviour than a binary heap which allows them to run more quickly in practice, although it has a larger worst case running time of both extractMin() and delete() operation (both being \\(O(klog_kn)\\) ).</li> </ul> <p>Implementation:</p> <p>Assuming 0 based indexing of array, an array represents a K-ary heap such that for any node we consider:\u00a0</p> <ul> <li>Parent of the node at index i (except root node) is located at index \\((i-1)/k\\)</li> <li>Children of the node at index i are at indices \\((k*i)+1 , (k*i)+2 \u2026. (k*i)+k\\)</li> <li>The last non-leaf node of a heap of size n is located at index \\((n-2)/k\\)</li> </ul> <p>buildHeap()\u00a0: Builds a heap from an input array.\u00a0</p> <p>This function runs a loop starting from the last non-leaf node all the way upto the root node, calling a function restoreDown(also known as maHeapify) for each index that restores the passed index at the correct position of the heap by shifting the node down in the K-ary heap building it in a bottom up manner.</p> <p>Why do we start the loop from the last non-leaf node ?  Because all the nodes after that are leaf nodes which will trivially satisfy the heap property as they don\u2019t have any children and hence, are already roots of a K-ary max heap.</p> <p>restoreDown() (or maxHeapify)\u00a0: Used to maintain heap property.\u00a0</p> <p>It runs a loop where it finds the maximum of all the node\u2019s children, compares it with its own value and swaps if the max(value of all children) &gt; (value at node). It repeats this step until the node is restored into its original position in the heap.</p> <p>extractMax() :\u00a0Extracting the root node.\u00a0</p> <p>A k-ary max heap stores the largest element in its root. It returns the root node, copies last node to the first, calls restore down on the first node thus maintaining the heap property.</p> <p>insert() :\u00a0Inserting a node into the heap\u00a0</p> <p>This can be achieved by inserting the node at the last position and calling restoreUp() on the given index to restore the node at its proper position in the heap. restoreUp() iteratively compares a given node with its parent, since in a max heap the parent is always greater than or equal to its children nodes, the node is swapped with its parent only when its key is greater than the parent.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#k-arr-heap-in-c","title":"K-Arr Heap in C++","text":"<pre><code>// C++ program to demonstrate all operations of\n// k-ary Heap\n#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// function to heapify (or restore the max- heap\n// property). This is used to build a k-ary heap\n// and in extractMin()\n// att[] -- Array that stores heap\n// len -- Size of array\n// index -- index of element to be restored\n//       (or heapified)\nvoid restoreDown(int arr[], int len, int index,\n                                        int k)\n{\n    // child array to store indexes of all\n    // the children of given node\n    int child[k+1];\n\n    while (1)\n    {\n        // child[i]=-1 if the node is a leaf\n        // children (no children)\n        for (int i=1; i&lt;=k; i++)\n            child[i] = ((k*index + i) &lt; len) ?\n                    (k*index + i) : -1;\n\n        // max_child stores the maximum child and\n        // max_child_index holds its index\n        int max_child = -1, max_child_index ;\n\n        // loop to find the maximum of all\n        // the children of a given node\n        for (int i=1; i&lt;=k; i++)\n        {\n            if (child[i] != -1 &amp;&amp;\n                arr[child[i]] &gt; max_child)\n            {\n                max_child_index = child[i];\n                max_child = arr[child[i]];\n            }\n        }\n\n        // leaf node\n        if (max_child == -1)\n            break;\n\n        // swap only if the key of max_child_index\n        // is greater than the key of node\n        if (arr[index] &lt; arr[max_child_index])\n            swap(arr[index], arr[max_child_index]);\n\n        index = max_child_index;\n    }\n}\n\n// Restores a given node up in the heap. This is used\n// in decreaseKey() and insert()\nvoid restoreUp(int arr[], int index, int k)\n{\n    // parent stores the index of the parent variable\n    // of the node\n    int parent = (index-1)/k;\n\n    // Loop should only run till root node in case the\n    // element inserted is the maximum restore up will\n    // send it to the root node\n    while (parent&gt;=0)\n    {\n        if (arr[index] &gt; arr[parent])\n        {\n            swap(arr[index], arr[parent]);\n            index = parent;\n            parent = (index -1)/k;\n        }\n\n        // node has been restored at the correct position\n        else\n            break;\n    }\n}\n\n// Function to build a heap of arr[0..n-1] and value of k.\nvoid buildHeap(int arr[], int n, int k)\n{\n    // Heapify all internal nodes starting from last\n    // non-leaf node all the way upto the root node\n    // and calling restore down on each\n    for (int i= (n-1)/k; i&gt;=0; i--)\n        restoreDown(arr, n, i, k);\n}\n\n// Function to insert a value in a heap. Parameters are\n// the array, size of heap, value k and the element to\n// be inserted\nvoid insert(int arr[], int* n, int k, int elem)\n{\n    // Put the new element in the last position\n    arr[*n] = elem;\n\n    // Increase heap size by 1\n    *n = *n+1;\n\n    // Call restoreUp on the last index\n    restoreUp(arr, *n-1, k);\n}\n\n// Function that returns the key of root node of\n// the heap and then restores the heap property\n// of the remaining nodes\nint extractMax(int arr[], int* n, int k)\n{\n    // Stores the key of root node to be returned\n    int max = arr[0];\n\n    // Copy the last node's key to the root node\n    arr[0] = arr[*n-1];\n\n    // Decrease heap size by 1\n    *n = *n-1;\n\n    // Call restoreDown on the root node to restore\n    // it to the correct position in the heap\n    restoreDown(arr, *n, 0, k);\n\n    return max;\n}\n\n// Driver program\nint main()\n{\n    const int capacity = 100;\n    int arr[capacity] = {4, 5, 6, 7, 8, 9, 10};\n    int n = 7;\n    int k = 3;\n\n    buildHeap(arr, n, k);\n\n    printf(\"Built Heap : \\n\");\n    for (int i=0; i&lt;n; i++)\n        printf(\"%d \", arr[i]);\n\n    int element = 3;\n    insert(arr, &amp;n, k, element);\n\n    printf(\"\\n\\nHeap after insertion of %d: \\n\",\n            element);\n    for (int i=0; i&lt;n; i++)\n        printf(\"%d \", arr[i]);\n\n    printf(\"\\n\\nExtracted max is %d\",\n                extractMax(arr, &amp;n, k));\n\n    printf(\"\\n\\nHeap after extract max: \\n\");\n    for (int i=0; i&lt;n; i++)\n        printf(\"%d \", arr[i]);\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#output_4","title":"Output","text":"<pre><code>Built Heap : \n10 9 6 7 8 4 5 \n\nHeap after insertion of 3: \n10 9 6 7 8 4 5 3 \n\nExtracted max is 10\n\nHeap after extract max: \n9 8 6 7 3 4 5 \n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#k-arr-heap-time-complexity-analysis","title":"### K-Arr Heap Time Complexity Analysis","text":"<ul> <li>For a k-ary heap, with n nodes the maximum height of the given heap will be logkn. So restoreUp() run for maximum of logkn times (as at every iteration the node is shifted one level up is case of restoreUp() or one level down in case of restoreDown).</li> <li>restoreDown() calls itself recursively for k children. So time complexity of this functions is O(k logkn).</li> <li>Insert and decreaseKey() operations call restoreUp() once. So complexity is O(logkn).</li> <li>Since extractMax() calls restoreDown() once, its complexity O(k logkn)</li> <li>Time complexity of build heap is O(n) (Analysis is similar to binary heap)\u00a0</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-heap","title":"Leftist Heap","text":"<ul> <li> <p>Geeks for Geeks</p> </li> <li> <p>https://www.geeksforgeeks.org/leftist-tree-leftist-heap/</p> </li> <li> <p>https://www.geeksforgeeks.org/leftist-tree-leftist-heap/?ref=lbp</p> </li> <li> <p>Toronto</p> </li> <li>CSC378: Leftist Trees</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap","title":"Leftist Tree / Leftist Heap","text":"<p>A leftist tree or leftist heap is a priority queue implemented with a variant of a binary heap. Every node has an\u00a0s-value (or rank or distance)\u00a0which is the distance to the nearest leaf. In contrast to a binary heap (Which is always a\u00a0complete binary tree), a leftist tree may be very unbalanced. Below are\u00a0time complexities\u00a0of\u00a0Leftist Tree / Heap.</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap_1","title":"Leftist Tree / Leftist Heap","text":"Function Complexity Comparison Get Min O(1) same as both Binary and Binomial Delete Min O(Log n) same as both Binary and Binomial Insert O(Log n) O(Log n) in Binary and O(1) in Binomial and O(Log n) for worst case Merge O(Log n) O(Log n) in Binomial","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap_2","title":"Leftist Tree / Leftist Heap","text":"<p>A leftist tree is a binary tree with properties:</p> <ol> <li>Normal Min Heap Property :\u00a0key(i) &gt;= key(parent(i))</li> <li>Heavier on left side :\u00a0dist(right(i)) &lt;= dist(left(i)). Here, dist(i) is the number of edges on the shortest path from node i to a leaf node in extended binary tree representation (In this representation, a null child is considered as external or leaf node). The shortest path to a descendant external node is through the right child. Every subtree is also a leftist tree and dist( i ) = 1 + dist( right( i ) ).</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap-example","title":"Leftist Tree / Leftist Heap Example","text":"<ul> <li> <p>The below leftist tree is presented with its distance calculated for each node with the procedure mentioned above. </p> </li> <li> <p>The rightmost node has a rank of 0 as the right subtree of this node is null and </p> </li> <li> <p>its parent has a distance of 1 by dist( i ) = 1 + dist( right( i )). </p> </li> <li> <p>The same is followed for each node and their s-value( or rank) is calculated.\u00a0</p> </li> </ul> <p></p> <p>From above second property, we can draw two conclusions :</p> <ol> <li>The path from root to rightmost leaf is the shortest path from root to a leaf.</li> <li>If the path to rightmost leaf has x nodes, then leftist heap has atleast 2x\u00a0\u2013 1 nodes. This means the length of path to rightmost leaf is O(log n) for a leftist heap with n nodes.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap-operations","title":"Leftist Tree / Leftist Heap Operations","text":"<ol> <li>The main operation is merge().</li> <li>deleteMin() (or extractMin() can be done by removing root and calling merge() for left and right subtrees.</li> <li>insert() can be done be create a leftist tree with single key (key to be inserted) and calling merge() for given tree and tree with single node.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap-operations_1","title":"Leftist Tree / Leftist Heap Operations","text":"<p>Idea behind Merging :\u00a0Since right subtree is smaller, the idea is to merge right subtree of a tree with other tree. Below are abstract steps.</p> <ol> <li>Put the root with smaller value as the new root.</li> <li>Hang its left subtree on the left.</li> <li>Recursively merge its right subtree and the other tree.</li> <li>Before returning from recursion: \u2013 Update dist() of merged root. \u2013 Swap left and right subtrees just below root, if needed, to keep leftist property of merged result</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap-operations_2","title":"Leftist Tree / Leftist Heap Operations","text":"<p>Detailed Steps for Merge:</p> <ol> <li>Compare the roots of two heaps.</li> <li>Push the smaller key into an empty stack, and move to the right child of smaller key.</li> <li>Recursively compare two keys and go on pushing the smaller key onto the stack and move to its right child.</li> <li>Repeat until a null node is reached.</li> <li>Take the last node processed and make it the right child of the node at top of the stack, and convert it to leftist heap if the properties of leftist heap are violated.</li> <li>Recursively go on popping the elements from the stack and making them the right child of new stack top.</li> </ol> <p>Example:\u00a0Consider two leftist heaps given below:\u00a0</p> <p></p> <p></p> <p>The subtree at node 7 violates the property of leftist heap so we swap it with the left child and retain the property of leftist heap.\u00a0</p> <p></p> <p>Convert to leftist heap. Repeat the process\u00a0</p> <p></p> <p></p> <p>The worst case time complexity of this algorithm is O(log n) in the worst case, where n is the number of nodes in the leftist heap.\u00a0Another example of merging two leftist heap: </p> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#leftist-tree-leftist-heap-in-c","title":"Leftist Tree / Leftist Heap in C++","text":"<pre><code>//C++ program for leftist heap / leftist tree\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Node Class Declaration\nclass LeftistNode\n{\npublic:\n    int element;\n    LeftistNode *left;\n    LeftistNode *right;\n    int dist;\n    LeftistNode(int &amp; element, LeftistNode *lt = NULL,\n                LeftistNode *rt = NULL, int np = 0)\n    {\n        this-&gt;element = element;\n        right = rt;\n        left = lt,\n        dist = np;\n    }\n};\n\n//Class Declaration\nclass LeftistHeap\n{\npublic:\n    LeftistHeap();\n    LeftistHeap(LeftistHeap &amp;rhs);\n    ~LeftistHeap();\n    bool isEmpty();\n    bool isFull();\n    int &amp;findMin();\n    void Insert(int &amp;x);\n    void deleteMin();\n    void deleteMin(int &amp;minItem);\n    void makeEmpty();\n    void Merge(LeftistHeap &amp;rhs);\n    LeftistHeap &amp; operator =(LeftistHeap &amp;rhs);\nprivate:\n    LeftistNode *root;\n    LeftistNode *Merge(LeftistNode *h1,\n                    LeftistNode *h2);\n    LeftistNode *Merge1(LeftistNode *h1,\n                        LeftistNode *h2);\n    void swapChildren(LeftistNode * t);\n    void reclaimMemory(LeftistNode * t);\n    LeftistNode *clone(LeftistNode *t);\n};\n\n// Construct the leftist heap\nLeftistHeap::LeftistHeap()\n{\n    root = NULL;\n}\n\n// Copy constructor.\nLeftistHeap::LeftistHeap(LeftistHeap &amp;rhs)\n{\n    root = NULL;\n    *this = rhs;\n}\n\n// Destruct the leftist heap\nLeftistHeap::~LeftistHeap()\n{\n    makeEmpty( );\n}\n\n/* Merge rhs into the priority queue.\nrhs becomes empty. rhs must be different\nfrom this.*/\nvoid LeftistHeap::Merge(LeftistHeap &amp;rhs)\n{\n    if (this == &amp;rhs)\n        return;\n    root = Merge(root, rhs.root);\n    rhs.root = NULL;\n}\n\n/* Internal method to merge two roots.\nDeals with deviant cases and calls recursive Merge1.*/\nLeftistNode *LeftistHeap::Merge(LeftistNode * h1,\n                                LeftistNode * h2)\n{\n    if (h1 == NULL)\n        return h2;\n    if (h2 == NULL)\n        return h1;\n    if (h1-&gt;element &lt; h2-&gt;element)\n        return Merge1(h1, h2);\n    else\n        return Merge1(h2, h1);\n}\n\n/* Internal method to merge two roots.\nAssumes trees are not empty, and h1's root contains\nsmallest item.*/\nLeftistNode *LeftistHeap::Merge1(LeftistNode * h1,\n                                LeftistNode * h2)\n{\n    if (h1-&gt;left == NULL)\n        h1-&gt;left = h2;\n    else\n    {\n        h1-&gt;right = Merge(h1-&gt;right, h2);\n        if (h1-&gt;left-&gt;dist &lt; h1-&gt;right-&gt;dist)\n            swapChildren(h1);\n        h1-&gt;dist = h1-&gt;right-&gt;dist + 1;\n    }\n    return h1;\n}\n\n// Swaps t's two children.\nvoid LeftistHeap::swapChildren(LeftistNode * t)\n{\n    LeftistNode *tmp = t-&gt;left;\n    t-&gt;left = t-&gt;right;\n    t-&gt;right = tmp;\n}\n\n/* Insert item x into the priority queue, maintaining\nheap order.*/\nvoid LeftistHeap::Insert(int &amp;x)\n{\n    root = Merge(new LeftistNode(x), root);\n}\n\n/* Find the smallest item in the priority queue.\nReturn the smallest item, or throw Underflow if empty.*/\nint &amp;LeftistHeap::findMin()\n{\n    return root-&gt;element;\n}\n\n/* Remove the smallest item from the priority queue.\nThrows Underflow if empty.*/\nvoid LeftistHeap::deleteMin()\n{\n    LeftistNode *oldRoot = root;\n    root = Merge(root-&gt;left, root-&gt;right);\n    delete oldRoot;\n}\n\n/* Remove the smallest item from the priority queue.\nPass back the smallest item, or throw Underflow if empty.*/\nvoid LeftistHeap::deleteMin(int &amp;minItem)\n{\n    if (isEmpty())\n    {\n        cout&lt;&lt;\"Heap is Empty\"&lt;&lt;endl;\n        return;\n    }\n    minItem = findMin();\n    deleteMin();\n}\n\n/* Test if the priority queue is logically empty.\nReturns true if empty, false otherwise*/\nbool LeftistHeap::isEmpty()\n{\n    return root == NULL;\n}\n\n/* Test if the priority queue is logically full.\nReturns false in this implementation.*/\nbool LeftistHeap::isFull()\n{\n    return false;\n}\n\n// Make the priority queue logically empty\nvoid LeftistHeap::makeEmpty()\n{\n    reclaimMemory(root);\n    root = NULL;\n}\n\n// Deep copy\nLeftistHeap &amp;LeftistHeap::operator =(LeftistHeap &amp; rhs)\n{\n    if (this != &amp;rhs)\n    {\n        makeEmpty();\n        root = clone(rhs.root);\n    }\n    return *this;\n}\n\n// Internal method to make the tree empty.\nvoid LeftistHeap::reclaimMemory(LeftistNode * t)\n{\n    if (t != NULL)\n    {\n        reclaimMemory(t-&gt;left);\n        reclaimMemory(t-&gt;right);\n        delete t;\n    }\n}\n\n// Internal method to clone subtree.\nLeftistNode *LeftistHeap::clone(LeftistNode * t)\n{\n    if (t == NULL)\n        return NULL;\n    else\n        return new LeftistNode(t-&gt;element, clone(t-&gt;left),\n                            clone(t-&gt;right), t-&gt;dist);\n}\n\n//Driver program\nint main()\n{\n    LeftistHeap h;\n    LeftistHeap h1;\n    LeftistHeap h2;\n    int x;\n    int arr[]= {1, 5, 7, 10, 15};\n    int arr1[]= {22, 75};\n\n    h.Insert(arr[0]);\n    h.Insert(arr[1]);\n    h.Insert(arr[2]);\n    h.Insert(arr[3]);\n    h.Insert(arr[4]);\n    h1.Insert(arr1[0]);\n    h1.Insert(arr1[1]);\n\n    h.deleteMin(x);\n    cout&lt;&lt; x &lt;&lt;endl;\n\n    h1.deleteMin(x);\n    cout&lt;&lt; x &lt;&lt;endl;\n\n    h.Merge(h1);\n    h2 = h;\n\n    h2.deleteMin(x);\n    cout&lt;&lt; x &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#output_5","title":"Output","text":"<pre><code>1\n22\n5\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binomial-heap","title":"Binomial Heap","text":"<ul> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/binomial-heap-2/</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binomial-heap_1","title":"Binomial Heap","text":"<p>The main application of\u00a0Binary Heap\u00a0is as implement a priority queue. Binomial Heap is an extension of\u00a0Binary Heap\u00a0that provides faster union or merge operation with other operations provided by Binary Heap.\u00a0</p> <p>A Binomial Heap is a collection of Binomial Trees </p> <p>What is a Binomial Tree? </p> <p>A Binomial Tree of order 0 has 1 node. A Binomial Tree of order k can be constructed by taking two binomial trees of order k-1 and making one the leftmost child or the other.</p> <p>A Binomial Tree of order k the has following properties.\u00a0</p> <ul> <li>It has exactly 2k\u00a0nodes.\u00a0</li> <li>It has depth as k.\u00a0</li> <li>There are exactly kaiCi\u00a0nodes at depth i for i = 0, 1, . . . , k.\u00a0</li> <li>The root has degree k and children of the root are themselves Binomial Trees with order k-1, k-2,.. 0 from left to right.</li> </ul> <pre><code>k = 0 (Single Node)\n\n o\n\nk = 1 (2 nodes) \n[We take two k = 0 order Binomial Trees, and\nmake one as a child of other]\n  o\n /  \no     \n\nk = 2 (4 nodes)\n[We take two k = 1 order Binomial Trees, and\nmake one as a child of other]\n     o\n   /   \\\n  o     o\n /       \no        \n\nk = 3 (8 nodes)\n[We take two k = 2 order Binomial Trees, and\nmake one as a child of other]\n      o   \n   /  | \\ \n  o   o  o\n / \\  | \no   o o   \n     \\           \n      o         \n</code></pre> <p>The following diagram is referred to from the 2<sup>nd</sup> Edition of the\u00a0CLRS book.\u00a0</p> <p></p> <p>Binomial Heap: </p> <p>A Binomial Heap is a set of Binomial Trees where each Binomial Tree follows the Min Heap property. And there can be at most one Binomial Tree of any degree.</p> <p>Examples Binomial Heap:</p> <pre><code>12------------10--------------------20\n             /  \\                 /  | \\\n           15    50             70  50  40\n           |                  / |    |     \n           30               80  85  65 \n                            |\n                           100\nA Binomial Heap with 13 nodes. It is a collection of 3 \nBinomial Trees of orders 0, 2, and 3 from left to right. \n\n    10--------------------20\n   /  \\                 /  | \\\n 15    50             70  50  40\n |                  / |    |     \n 30               80  85  65 \n                  |\n                 100\n</code></pre> <p>A Binomial Heap with 12 nodes. It is a collection of 2\u00a0 Binomial Trees of orders 2 and 3 from left to right.</p> <p>Binary Representation of a number and Binomial Heaps  A Binomial Heap with n nodes has the number of Binomial Trees equal to the number of set bits in the binary representation of n. For example, let n be 13, there are 3 set bits in the binary representation of n (00001101), hence 3 Binomial Trees. We can also relate the degree of these Binomial Trees with positions of set bits. With this relation, we can conclude that there are O(Logn) Binomial Trees in a Binomial Heap with \u2018n\u2019 nodes.</p> <p>Operations of Binomial Heap:  The main operation in Binomial Heap is a union(), all other operations mainly use this operation. The union() operation is to combine two Binomial Heaps into one. Let us first discuss other operations, we will discuss union later.</p> <ol> <li> <p>insert(H, k): Inserts a key \u2018k\u2019 to Binomial Heap \u2018H\u2019. This operation first creates a Binomial Heap with a single key \u2018k\u2019, then calls union on H and the new Binomial heap.\u00a0</p> </li> <li> <p>getting(H): A simple way to get in() is to traverse the list of the roots of Binomial Trees and return the minimum key. This implementation requires O(Logn) time. It can be optimized to O(1) by maintaining a pointer to the minimum key root.\u00a0</p> </li> <li> <p>extracting(H): This operation also uses a union(). We first call getMin() to find the minimum key Binomial Tree, then we remove the node and create a new Binomial Heap by connecting all subtrees of the removed minimum node. Finally, we call union() on H and the newly created Binomial Heap. This operation requires O(Logn) time.\u00a0</p> </li> <li> <p>delete(H): Like Binary Heap, the delete operation first reduces the key to minus infinite, then calls extracting().\u00a0</p> </li> <li> <p>decrease key(H): decrease key() is also similar to Binary Heap. We compare the decreased key with its parent and if the parent\u2019s key is more, we swap keys and recur for the parent. We stop when we either reach a node whose parent has a smaller key or we hit the root node. The time complexity of the decrease key() is O(Logn).\u00a0</p> </li> </ol> <p>Union operation in Binomial Heap:     Given two Binomial Heaps H1 and H2, union(H1, H2) creates a single Binomial Heap.\u00a0</p> <ol> <li> <p>The first step is to simply merge the two Heaps in non-decreasing order of degrees. In the following diagram, figure(b) shows the result after merging.\u00a0</p> </li> <li> <p>After the simple merge, we need to make sure that there is at most one Binomial Tree of any order. To do this, we need to combine Binomial Trees of the same order. We traverse the list of merged roots, we keep track of three-pointers, prev, x, and next-x. There can be the following 4 cases when we traverse the list of roots.\u00a0    \u2014\u2013Case 1: Orders of x and next-x are not the same, we simply move ahead.\u00a0    In the following 3 cases, orders of x and next-x are the same.\u00a0    \u2014\u2013Case 2: If the order of next-next-x is also the same, move ahead.\u00a0    \u2014\u2013Case 3: If the key of x is smaller than or equal to the key of next-x, then make next-x a child of x by linking it with x.\u00a0    \u2014\u2013Case 4: If the key of x is greater, then make x the child of next.\u00a0</p> </li> </ol> <p>The following diagram is taken from the 2<sup>nd</sup> Edition of the\u00a0CLRS book.\u00a0 </p> <p></p> <p>Time Complexity Analysis:</p> Operations Binary Heap Binomial Heap Fibonacci Heap Procedure Worst-case Worst-case Amortized Making Heap \u0398(1) \u0398(1) \u0398(1) Inserting a node \u0398(log(n)) O(log(n)) \u0398(1) Finding Minimum key \u0398(1) O(log(n)) O(1) Extract-Minimum key \u0398(log(n)) \u0398(log(n)) O(log(n)) Union or merging \u0398(n) O(log(n)) \u0398(1) Decreasing a Key \u0398(log(n)) \u0398(log(n)) \u0398(1) Deleting a node \u0398(log(n)) \u0398(log(n)) O(log(n)) <p>How to represent Binomial Heap?  A Binomial Heap is a set of Binomial Trees. A Binomial Tree must be represented in a way that allows sequential access to all siblings, starting from the leftmost sibling (We need this in and extracting() and delete()). The idea is to represent Binomial Trees as the leftmost child and right-sibling representation, i.e., every node stores two pointers, one to the leftmost child and the other to the right sibling.</p> <p>Examples Binomial Heap:</p> <pre><code>12------------10--------------------20\n             /  \\                 /  | \\\n           15    50             70  50  40\n           |                  / |    |     \n           30               80  85  65 \n                            |\n                           100\nA Binomial Heap with 13 nodes. It is a collection of 3 \nBinomial Trees of orders 0, 2 and 3 from left to right. \n\n    10--------------------20\n   /  \\                 /  | \\\n 15    50             70  50  40\n |                  / |    |     \n 30               80  85  65 \n                  |\n                 100\n</code></pre> <ol> <li>insert(H, k):\u00a0Inserts a key \u2018k\u2019 to Binomial Heap \u2018H\u2019. This operation first creates a Binomial Heap with single key \u2018k\u2019, then calls union on H and the new Binomial heap.</li> <li>getMin(H):\u00a0A simple way to getMin() is to traverse the list of root of Binomial Trees and return the minimum key. This implementation requires O(Logn) time. It can be optimized to O(1) by maintaining a pointer to minimum key root.</li> <li>extractMin(H):\u00a0This operation also uses union(). We first call getMin() to find the minimum key Binomial Tree, then we remove the node and create a new Binomial Heap by connecting all subtrees of the removed minimum node. Finally we call union() on H and the newly created Binomial Heap. This operation requires O(Logn) time.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binomial-heap-in-c","title":"Binomial Heap in C++","text":"<pre><code>// C++ program to implement different operations\n// on Binomial Heap\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// A Binomial Tree node.\nstruct Node\n{\nint data, degree;\nNode *child, *sibling, *parent;\n};\n\nNode* newNode(int key)\n{\nNode *temp = new Node;\ntemp-&gt;data = key;\ntemp-&gt;degree = 0;\ntemp-&gt;child = temp-&gt;parent = temp-&gt;sibling = NULL;\nreturn temp;\n}\n\n// This function merge two Binomial Trees.\nNode* mergeBinomialTrees(Node *b1, Node *b2)\n{\n// Make sure b1 is smaller\nif (b1-&gt;data &gt; b2-&gt;data)\n    swap(b1, b2);\n\n// We basically make larger valued tree\n// a child of smaller valued tree\nb2-&gt;parent = b1;\nb2-&gt;sibling = b1-&gt;child;\nb1-&gt;child = b2;\nb1-&gt;degree++;\n\nreturn b1;\n}\n\n// This function perform union operation on two\n// binomial heap i.e. l1 &amp; l2\nlist&lt;Node*&gt; unionBionomialHeap(list&lt;Node*&gt; l1,\n            list&lt;Node*&gt; l2)\n{\n// _new to another binomial heap which contain\n// new heap after merging l1 &amp; l2\nlist&lt;Node*&gt; _new;\nlist&lt;Node*&gt;::iterator it = l1.begin();\nlist&lt;Node*&gt;::iterator ot = l2.begin();\nwhile (it!=l1.end() &amp;&amp; ot!=l2.end())\n{\n    // if D(l1) &lt;= D(l2)\n    if((*it)-&gt;degree &lt;= (*ot)-&gt;degree)\n    {\n    _new.push_back(*it);\n    it++;\n    }\n    // if D(l1) &gt; D(l2)\n    else\n    {\n    _new.push_back(*ot);\n    ot++;\n    }\n}\n\n// if there remains some elements in l1\n// binomial heap\nwhile (it != l1.end())\n{\n    _new.push_back(*it);\n    it++;\n}\n\n// if there remains some elements in l2\n// binomial heap\nwhile (ot!=l2.end())\n{\n    _new.push_back(*ot);\n    ot++;\n}\nreturn _new;\n}\n\n// adjust function rearranges the heap so that\n// heap is in increasing order of degree and\n// no two binomial trees have same degree in this heap\nlist&lt;Node*&gt; adjust(list&lt;Node*&gt; _heap)\n{\nif (_heap.size() &lt;= 1)\n    return _heap;\nlist&lt;Node*&gt; new_heap;\nlist&lt;Node*&gt;::iterator it1,it2,it3;\nit1 = it2 = it3 = _heap.begin();\n\nif (_heap.size() == 2)\n{\n    it2 = it1;\n    it2++;\n    it3 = _heap.end();\n}\nelse\n{\n    it2++;\n    it3=it2;\n    it3++;\n}\nwhile (it1 != _heap.end())\n{\n    // if only one element remains to be processed\n    if (it2 == _heap.end())\n    it1++;\n\n    // If D(it1) &lt; D(it2) i.e. merging of Binomial\n    // Tree pointed by it1 &amp; it2 is not possible\n    // then move next in heap\n    else if ((*it1)-&gt;degree &lt; (*it2)-&gt;degree)\n    {\n    it1++;\n    it2++;\n    if(it3!=_heap.end())\n        it3++;\n    }\n\n    // if D(it1),D(it2) &amp; D(it3) are same i.e.\n    // degree of three consecutive Binomial Tree are same\n    // in heap\n    else if (it3!=_heap.end() &amp;&amp;\n        (*it1)-&gt;degree == (*it2)-&gt;degree &amp;&amp;\n        (*it1)-&gt;degree == (*it3)-&gt;degree)\n    {\n    it1++;\n    it2++;\n    it3++;\n    }\n\n    // if degree of two Binomial Tree are same in heap\n    else if ((*it1)-&gt;degree == (*it2)-&gt;degree)\n    {\n    Node *temp;\n    *it1 = mergeBinomialTrees(*it1,*it2);\n    it2 = _heap.erase(it2);\n    if(it3 != _heap.end())\n        it3++;\n    }\n}\nreturn _heap;\n}\n\n// inserting a Binomial Tree into binomial heap\nlist&lt;Node*&gt; insertATreeInHeap(list&lt;Node*&gt; _heap,\n            Node *tree)\n{\n// creating a new heap i.e temp\nlist&lt;Node*&gt; temp;\n\n// inserting Binomial Tree into heap\ntemp.push_back(tree);\n\n// perform union operation to finally insert\n// Binomial Tree in original heap\ntemp = unionBionomialHeap(_heap,temp);\n\nreturn adjust(temp);\n}\n\n// removing minimum key element from binomial heap\n// this function take Binomial Tree as input and return\n// binomial heap after\n// removing head of that tree i.e. minimum element\nlist&lt;Node*&gt; removeMinFromTreeReturnBHeap(Node *tree)\n{\nlist&lt;Node*&gt; heap;\nNode *temp = tree-&gt;child;\nNode *lo;\n\n// making a binomial heap from Binomial Tree\nwhile (temp)\n{\n    lo = temp;\n    temp = temp-&gt;sibling;\n    lo-&gt;sibling = NULL;\n    heap.push_front(lo);\n}\nreturn heap;\n}\n\n// inserting a key into the binomial heap\nlist&lt;Node*&gt; insert(list&lt;Node*&gt; _head, int key)\n{\nNode *temp = newNode(key);\nreturn insertATreeInHeap(_head,temp);\n}\n\n// return pointer of minimum value Node\n// present in the binomial heap\nNode* getMin(list&lt;Node*&gt; _heap)\n{\nlist&lt;Node*&gt;::iterator it = _heap.begin();\nNode *temp = *it;\nwhile (it != _heap.end())\n{\n    if ((*it)-&gt;data &lt; temp-&gt;data)\n    temp = *it;\n    it++;\n}\nreturn temp;\n}\n\nlist&lt;Node*&gt; extractMin(list&lt;Node*&gt; _heap)\n{\nlist&lt;Node*&gt; new_heap,lo;\nNode *temp;\n\n// temp contains the pointer of minimum value\n// element in heap\ntemp = getMin(_heap);\nlist&lt;Node*&gt;::iterator it;\nit = _heap.begin();\nwhile (it != _heap.end())\n{\n    if (*it != temp)\n    {\n    // inserting all Binomial Tree into new\n    // binomial heap except the Binomial Tree\n    // contains minimum element\n    new_heap.push_back(*it);\n    }\n    it++;\n}\nlo = removeMinFromTreeReturnBHeap(temp);\nnew_heap = unionBionomialHeap(new_heap,lo);\nnew_heap = adjust(new_heap);\nreturn new_heap;\n}\n\n// print function for Binomial Tree\nvoid printTree(Node *h)\n{\nwhile (h)\n{\n    cout &lt;&lt; h-&gt;data &lt;&lt; \" \";\n    printTree(h-&gt;child);\n    h = h-&gt;sibling;\n}\n}\n\n// print function for binomial heap\nvoid printHeap(list&lt;Node*&gt; _heap)\n{\nlist&lt;Node*&gt; ::iterator it;\nit = _heap.begin();\nwhile (it != _heap.end())\n{\n    printTree(*it);\n    it++;\n}\n}\n\n\n// Driver program to test above functions\nint main()\n{\nint ch,key;\nlist&lt;Node*&gt; _heap;\n\n// Insert data in the heap\n_heap = insert(_heap,10);\n_heap = insert(_heap,20);\n_heap = insert(_heap,30);\n\ncout &lt;&lt; \"Heap elements after insertion:\\n\";\nprintHeap(_heap);\n\nNode *temp = getMin(_heap);\ncout &lt;&lt; \"\\nMinimum element of heap \"\n    &lt;&lt; temp-&gt;data &lt;&lt; \"\\n\";\n\n// Delete minimum element of heap\n_heap = extractMin(_heap);\ncout &lt;&lt; \"Heap after deletion of minimum element\\n\";\nprintHeap(_heap);\n\nreturn 0;\n}\n</code></pre> <ol> <li>delete(H):\u00a0Like Binary Heap, delete operation first reduces the key to minus infinite, then calls extractMin().</li> <li>decreaseKey(H):\u00a0decreaseKey() is also similar to Binary Heap. We compare the decreases key with it parent and if parent\u2019s key is more, we swap keys and recur for parent. We stop when we either reach a node whose parent has smaller key or we hit the root node. Time complexity of decreaseKey() is O(Logn)</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#binomial-heap-in-c_1","title":"Binomial Heap in C++","text":"<pre><code>// C++ program for implementation of\n// Binomial Heap and Operations on it\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Structure of Node\nstruct Node {\n    int val, degree;\n    Node *parent, *child, *sibling;\n};\n\n// Making root global to avoid one extra\n// parameter in all functions.\nNode* root = NULL;\n\n// link two heaps by making h1 a child\n// of h2.\nint binomialLink(Node* h1, Node* h2)\n{\n    h1-&gt;parent = h2;\n    h1-&gt;sibling = h2-&gt;child;\n    h2-&gt;child = h1;\n    h2-&gt;degree = h2-&gt;degree + 1;\n}\n\n// create a Node\nNode* createNode(int n)\n{\n    Node* new_node = new Node;\n    new_node-&gt;val = n;\n    new_node-&gt;parent = NULL;\n    new_node-&gt;sibling = NULL;\n    new_node-&gt;child = NULL;\n    new_node-&gt;degree = 0;\n    return new_node;\n}\n\n// This function merge two Binomial Trees\nNode* mergeBHeaps(Node* h1, Node* h2)\n{\n    if (h1 == NULL)\n        return h2;\n    if (h2 == NULL)\n        return h1;\n\n    // define a Node\n    Node* res = NULL;\n\n    // check degree of both Node i.e.\n    // which is greater or smaller\n    if (h1-&gt;degree &lt;= h2-&gt;degree)\n        res = h1;\n\n    else if (h1-&gt;degree &gt; h2-&gt;degree)\n        res = h2;\n\n    // traverse till if any of heap gets empty\n    while (h1 != NULL &amp;&amp; h2 != NULL) {\n        // if degree of h1 is smaller, increment h1\n        if (h1-&gt;degree &lt; h2-&gt;degree)\n            h1 = h1-&gt;sibling;\n\n        // Link h1 with h2 in case of equal degree\n        else if (h1-&gt;degree == h2-&gt;degree) {\n            Node* sib = h1-&gt;sibling;\n            h1-&gt;sibling = h2;\n            h1 = sib;\n        }\n\n        // if h2 is greater\n        else {\n            Node* sib = h2-&gt;sibling;\n            h2-&gt;sibling = h1;\n            h2 = sib;\n        }\n    }\n    return res;\n}\n\n// This function perform union operation on two\n// binomial heap i.e. h1 &amp; h2\nNode* unionBHeaps(Node* h1, Node* h2)\n{\n    if (h1 == NULL &amp;&amp; h2 == NULL)\n        return NULL;\n\n    Node* res = mergeBHeaps(h1, h2);\n\n    // Traverse the merged list and set\n    // values according to the degree of\n    // Nodes\n    Node *prev = NULL, *curr = res, *next = curr-&gt;sibling;\n    while (next != NULL) {\n        if ((curr-&gt;degree != next-&gt;degree)\n            || ((next-&gt;sibling != NULL)\n                &amp;&amp; (next-&gt;sibling)-&gt;degree\n                    == curr-&gt;degree)) {\n            prev = curr;\n            curr = next;\n        }\n\n        else {\n            if (curr-&gt;val &lt;= next-&gt;val) {\n                curr-&gt;sibling = next-&gt;sibling;\n                binomialLink(next, curr);\n            }\n            else {\n                if (prev == NULL)\n                    res = next;\n                else\n                    prev-&gt;sibling = next;\n                binomialLink(curr, next);\n                curr = next;\n            }\n        }\n        next = curr-&gt;sibling;\n    }\n    return res;\n}\n\n// Function to insert a Node\nvoid binomialHeapInsert(int x)\n{\n    // Create a new node and do union of\n    // this node with root\n    root = unionBHeaps(root, createNode(x));\n}\n\n// Function to display the Nodes\nvoid display(Node* h)\n{\n    while (h) {\n        cout &lt;&lt; h-&gt;val &lt;&lt; \" \";\n        display(h-&gt;child);\n        h = h-&gt;sibling;\n    }\n}\n\n// Function to reverse a list\n// using recursion.\nint revertList(Node* h)\n{\n    if (h-&gt;sibling != NULL) {\n        revertList(h-&gt;sibling);\n        (h-&gt;sibling)-&gt;sibling = h;\n    }\n    else\n        root = h;\n}\n\n// Function to extract minimum value\nNode* extractMinBHeap(Node* h)\n{\n    if (h == NULL)\n        return NULL;\n\n    Node* min_node_prev = NULL;\n    Node* min_node = h;\n\n    // Find minimum value\n    int min = h-&gt;val;\n    Node* curr = h;\n    while (curr-&gt;sibling != NULL) {\n        if ((curr-&gt;sibling)-&gt;val &lt; min) {\n            min = (curr-&gt;sibling)-&gt;val;\n            min_node_prev = curr;\n            min_node = curr-&gt;sibling;\n        }\n        curr = curr-&gt;sibling;\n    }\n\n    // If there is a single Node\n    if (min_node_prev == NULL &amp;&amp; min_node-&gt;sibling == NULL)\n        h = NULL;\n\n    else if (min_node_prev == NULL)\n        h = min_node-&gt;sibling;\n\n    // Remove min node from list\n    else\n        min_node_prev-&gt;sibling = min_node-&gt;sibling;\n\n    // Set root (which is global) as children\n    // list of min node\n    if (min_node-&gt;child != NULL) {\n        revertList(min_node-&gt;child);\n        (min_node-&gt;child)-&gt;sibling = NULL;\n    }\n\n    // Do union of root h and children\n    return unionBHeaps(h, root);\n}\n\n// Function to search for an element\nNode* findNode(Node* h, int val)\n{\n    if (h == NULL)\n        return NULL;\n\n    // check if key is equal to the root's data\n    if (h-&gt;val == val)\n        return h;\n\n    // Recur for child\n    Node* res = findNode(h-&gt;child, val);\n    if (res != NULL)\n        return res;\n\n    return findNode(h-&gt;sibling, val);\n}\n\n// Function to decrease the value of old_val\n// to new_val\nvoid decreaseKeyBHeap(Node* H, int old_val, int new_val)\n{\n    // First check element present or not\n    Node* node = findNode(H, old_val);\n\n    // return if Node is not present\n    if (node == NULL)\n        return;\n\n    // Reduce the value to the minimum\n    node-&gt;val = new_val;\n    Node* parent = node-&gt;parent;\n\n    // Update the heap according to reduced value\n    while (parent != NULL &amp;&amp; node-&gt;val &lt; parent-&gt;val) {\n        swap(node-&gt;val, parent-&gt;val);\n        node = parent;\n        parent = parent-&gt;parent;\n    }\n}\n\n// Function to delete an element\nNode* binomialHeapDelete(Node* h, int val)\n{\n    // Check if heap is empty or not\n    if (h == NULL)\n        return NULL;\n\n    // Reduce the value of element to minimum\n    decreaseKeyBHeap(h, val, INT_MIN);\n\n    // Delete the minimum element from heap\n    return extractMinBHeap(h);\n}\n\n// Driver code\nint main()\n{\n    // Note that root is global\n    binomialHeapInsert(10);\n    binomialHeapInsert(20);\n    binomialHeapInsert(30);\n    binomialHeapInsert(40);\n    binomialHeapInsert(50);\n\n    cout &lt;&lt; \"The heap is:\\n\";\n    display(root);\n\n    // Delete a particular element from heap\n    root = binomialHeapDelete(root, 10);\n\n    cout &lt;&lt; \"\\nAfter deleting 10, the heap is:\\n\";\n\n    display(root);\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#output_6","title":"Output","text":"<pre><code>The heap is:\n50 10 30 40 20 \nAfter deleting 10, the heap is:\n20 30 40 50\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#fibonacci-heap","title":"Fibonacci Heap","text":"<ul> <li>William Fiset</li> <li>Algorithms/src/main/java/com/williamfiset/algorithms/datastructures/fibonacciheap at master \u00b7 williamfiset/Algorithms \u00b7 GitHub</li> <li>Geeks for Geeks</li> <li>Fibonacci Heap | Set 1 (Introduction) - GeeksforGeeks</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#fibonacci-heap_1","title":"Fibonacci Heap","text":"<ul> <li>https://www.geeksforgeeks.org/fibonacci-heap-insertion-and-union/?ref=lbp</li> <li>https://www.geeksforgeeks.org/fibonacci-heap-deletion-extract-min-and-decrease-key/?ref=lbp</li> <li>Decreasing a key and deleting a node</li> <li>Bounding the maximum degree</li> </ul> <p>https://www.cs.princeton.edu/~wayne/teaching/fibonacci-heap.pdf</p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#fibonacci-heap_2","title":"Fibonacci Heap","text":"<p>In terms of Time Complexity, Fibonacci Heap beats both Binary and Binomial Heaps.\u00a0</p> <p>Below are\u00a0amortized time complexities\u00a0of\u00a0Fibonacci Heap.</p> <pre><code>1) Find Min:      \u0398(1)     [Same as both Binary and Binomial]\n2) Delete Min:    O(Log n) [\u0398(Log n) in both Binary and Binomial]\n3) Insert:        \u0398(1)     [\u0398(Log n) in Binary and \u0398(1) in Binomial]\n4) Decrease-Key:  \u0398(1)     [\u0398(Log n) in both Binary and Binomial]\n5) Merge:         \u0398(1)     [\u0398(m Log n) or \u0398(m+n) in Binary and\n                            \u0398(Log n) in Binomial]\n</code></pre> <p>Like\u00a0Binomial Heap, Fibonacci Heap is a collection of trees with min-heap or max-heap property. In Fibonacci Heap, trees can have any shape even all trees can be single nodes (This is unlike Binomial Heap where every tree has to be Binomial Tree).</p> <p></p> <p>Fibonacci Heap maintains a pointer to minimum value (which is root of a tree). All tree roots are connected using circular doubly linked list, so all of them can be accessed using single \u2018min\u2019 pointer.\u00a0</p> <p>The main idea is to execute operations in \u201clazy\u201d way. For example merge operation simply links two heaps, insert operation simply adds a new tree with single node. The operation extract minimum is the most complicated operation. It does delayed work of consolidating trees. This makes delete also complicated as delete first decreases key to minus infinite, then calls extract minimum.</p> <p>Below are some interesting facts about Fibonacci Heap </p> <ol> <li>The reduced time complexity of Decrease-Key has importance in Dijkstra and Prim algorithms. With Binary Heap, time complexity of these algorithms is O(VLogV + ELogV). If Fibonacci Heap is used, then time complexity is improved to O(VLogV + E)</li> <li>Although Fibonacci Heap looks promising time complexity wise, it has been found slow in practice as hidden constants are high (Source\u00a0Wiki).</li> <li>Fibonacci heap are mainly called so because Fibonacci numbers are used in the running time analysis. Also, every node in Fibonacci Heap has degree at most O(log n) and the size of a subtree rooted in a node of degree k is at least Fk+2, where Fk\u00a0is the kth Fibonacci number.</li> </ol>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#fibonacci-heap-insertion-and-union","title":"Fibonacci Heap \u2013 Insertion and Union","text":"<p>Fibonacci Heap\u00a0is a collection of trees with min-heap or max-heap property. In Fibonacci Heap, trees can have any shape even all trees can be single nodes (This is unlike Binomial Heap where every tree has to be a Binomial Tree). In this article, we will discuss Insertion and Union operation on Fibonacci Heap.</p> <p>Insertion:\u00a0To insert a node in a Fibonacci heap H, the following algorithm is followed:</p> <pre><code>Create a new node \u2018x\u2019.\nCheck whether heap H is empty or not.\nIf H is empty then:     \n  Make x as the only node in the root list.\n  Set H(min) pointer to x.\nElse: \n  Insert x into root list and update H(min).\n</code></pre> <p></p> <p>Union:\u00a0Union of two Fibonacci heaps H1 and H2 can be accomplished as follows:</p> <pre><code>Join root lists of Fibonacci heaps H1 and H2 and make a single Fibonacci heap H.\nIf H1(min) &lt; H2(min) then: \n   H(min) = H1(min).\nElse: \n   H(min) = H2(min).\n</code></pre> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#fibonacci-heap-insertion-and-union-in-c","title":"Fibonacci Heap \u2013 Insertion and Union in C++","text":"<pre><code>// C++ program to demonstrate building\n// and inserting in a Fibonacci heap\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;malloc.h&gt;\nusing namespace std;\n\nstruct node {\n    node* parent;\n    node* child;\n    node* left;\n    node* right;\n    int key;\n};\n\n// Creating min pointer as \"mini\"\nstruct node* mini = NULL;\n\n// Declare an integer for number of nodes in the heap\nint no_of_nodes = 0;\n\n// Function to insert a node in heap\nvoid insertion(int val)\n{\n    struct node* new_node = (struct node*)malloc(sizeof(struct node));\n    new_node-&gt;key = val;\n    new_node-&gt;parent = NULL;\n    new_node-&gt;child = NULL;\n    new_node-&gt;left = new_node;\n    new_node-&gt;right = new_node;\n    if (mini != NULL) {\n        (mini-&gt;left)-&gt;right = new_node;\n        new_node-&gt;right = mini;\n        new_node-&gt;left = mini-&gt;left;\n        mini-&gt;left = new_node;\n        if (new_node-&gt;key &lt; mini-&gt;key)\n            mini = new_node;\n    }\n    else {\n        mini = new_node;\n    }\n}\n\n// Function to display the heap\nvoid display(struct node* mini)\n{\n    node* ptr = mini;\n    if (ptr == NULL)\n        cout &lt;&lt; \"The Heap is Empty\" &lt;&lt; endl;\n\n    else {\n        cout &lt;&lt; \"The root nodes of Heap are: \" &lt;&lt; endl;\n        do {\n            cout &lt;&lt; ptr-&gt;key;\n            ptr = ptr-&gt;right;\n            if (ptr != mini) {\n                cout &lt;&lt; \"--&gt;\";\n            }\n        } while (ptr != mini &amp;&amp; ptr-&gt;right != NULL);\n        cout &lt;&lt; endl\n            &lt;&lt; \"The heap has \" &lt;&lt; no_of_nodes &lt;&lt; \" nodes\" &lt;&lt; endl;\n    }\n}\n// Function to find min node in the heap\nvoid find_min(struct node* mini)\n{\n    cout &lt;&lt; \"min of heap is: \" &lt;&lt; mini-&gt;key &lt;&lt; endl;\n}\n\n\n// Driver code\nint main()\n{\n\n    no_of_nodes = 7;\n    insertion(4);\n    insertion(3);\n    insertion(7);\n    insertion(5);\n    insertion(2);\n    insertion(1);\n    insertion(10);\n\n    display(mini);\n\n    find_min(mini);\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#fibonacci-heap-deletion-extract-min-and-decrease-key","title":"Fibonacci Heap \u2013 Deletion, Extract min and Decrease key","text":"<pre><code>Extract_min():\nWe create a function for deleting the minimum node and setting the min pointer to the minimum value in the remaining heap. The following algorithm is followed:  \nDelete the min node.\nSet head to the next min node and add all the trees of the deleted node in the root list.\nCreate an array of degree pointers of the size of the deleted node.\nSet degree pointer to the current node.\nMove to the next node.\n  If degrees are different then set degree pointer to next node.\n  If degrees are the same then join the Fibonacci trees by union operation.\nRepeat steps 4 and 5 until the heap is completed.\n</code></pre> <p>Example: </p> <p></p> <pre><code>Decrease_key(): \n\nTo decrease the value of any element in the heap, we follow the following algorithm:\n\nDecrease the value of the node \u2018x\u2019 to the new chosen value.\nCASE 1) If min-heap property is not violated, \n  Update min pointer if necessary.\nCASE 2) If min-heap property is violated and parent of \u2018x\u2019 is unmarked, \n  Cut off the link between \u2018x\u2019 and its parent.\n  Mark the parent of \u2018x\u2019.\n  Add tree rooted at \u2018x\u2019 to the root list and update min pointer if necessary.\nCASE 3)If min-heap property is violated and parent of \u2018x\u2019 is marked, \n  Cut off the link between \u2018x\u2019 and its parent p[x].\n  Add \u2018x\u2019 to the root list, updating min pointer if necessary.\n  Cut off link between p[x] and p[p[x]].\n  Add p[x] to the root list, updating min pointer if necessary.\n  If p[p[x]] is unmarked, mark it.\n  Else, cut off p[p[x]] and repeat steps 4.2 to 4.5, taking p[p[x]] as \u2018x\u2019.\n</code></pre> <p>Example: </p> <p></p> <pre><code>Deletion(): \n\nTo delete any element in a Fibonacci heap, the following algorithm is followed:\n\nDecrease the value of the node to be deleted \u2018x\u2019 to a minimum by Decrease_key() function.\nBy using min-heap property, heapify the heap containing \u2018x\u2019, bringing \u2018x\u2019 to the root list.\nApply Extract_min() algorithm to the Fibonacci heap.\n</code></pre> <p>Example: </p> <p></p>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#fibonacci-heap-deletion-extract-min-and-decrease-key-in-c","title":"Fibonacci Heap \u2013 Deletion, Extract min and Decrease key in C++","text":"<pre><code>// C++ program to demonstrate Extract min, Deletion()\n// and Decrease key() operations in a fibonacci heap\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;malloc.h&gt;\nusing namespace std;\n\n// Creating a structure to represent a node in the heap\nstruct node {\n    node* parent; // Parent pointer\n    node* child; // Child pointer\n    node* left; // Pointer to the node on the left\n    node* right; // Pointer to the node on the right\n    int key; // Value of the node\n    int degree; // Degree of the node\n    char mark; // Black or white mark of the node\n    char c; // Flag for assisting in the Find node function\n};\n\n// Creating min pointer as \"mini\"\nstruct node* mini = NULL;\n\n// Declare an integer for number of nodes in the heap\nint no_of_nodes = 0;\n\n// Function to insert a node in heap\nvoid insertion(int val)\n{\n    struct node* new_node = new node();\n    new_node-&gt;key = val;\n    new_node-&gt;degree = 0;\n    new_node-&gt;mark = 'W';\n    new_node-&gt;c = 'N';\n    new_node-&gt;parent = NULL;\n    new_node-&gt;child = NULL;\n    new_node-&gt;left = new_node;\n    new_node-&gt;right = new_node;\n    if (mini != NULL) {\n        (mini-&gt;left)-&gt;right = new_node;\n        new_node-&gt;right = mini;\n        new_node-&gt;left = mini-&gt;left;\n        mini-&gt;left = new_node;\n        if (new_node-&gt;key &lt; mini-&gt;key)\n            mini = new_node;\n    }\n    else {\n        mini = new_node;\n    }\n    no_of_nodes++;\n}\n// Linking the heap nodes in parent child relationship\nvoid Fibonnaci_link(struct node* ptr2, struct node* ptr1)\n{\n    (ptr2-&gt;left)-&gt;right = ptr2-&gt;right;\n    (ptr2-&gt;right)-&gt;left = ptr2-&gt;left;\n    if (ptr1-&gt;right == ptr1)\n        mini = ptr1;\n    ptr2-&gt;left = ptr2;\n    ptr2-&gt;right = ptr2;\n    ptr2-&gt;parent = ptr1;\n    if (ptr1-&gt;child == NULL)\n        ptr1-&gt;child = ptr2;\n    ptr2-&gt;right = ptr1-&gt;child;\n    ptr2-&gt;left = (ptr1-&gt;child)-&gt;left;\n    ((ptr1-&gt;child)-&gt;left)-&gt;right = ptr2;\n    (ptr1-&gt;child)-&gt;left = ptr2;\n    if (ptr2-&gt;key &lt; (ptr1-&gt;child)-&gt;key)\n        ptr1-&gt;child = ptr2;\n    ptr1-&gt;degree++;\n}\n// Consolidating the heap\nvoid Consolidate()\n{\n    int temp1;\n    float temp2 = (log(no_of_nodes)) / (log(2));\n    int temp3 = temp2;\n    struct node* arr[temp3+1];\n    for (int i = 0; i &lt;= temp3; i++)\n        arr[i] = NULL;\n    node* ptr1 = mini;\n    node* ptr2;\n    node* ptr3;\n    node* ptr4 = ptr1;\n    do {\n        ptr4 = ptr4-&gt;right;\n        temp1 = ptr1-&gt;degree;\n        while (arr[temp1] != NULL) {\n            ptr2 = arr[temp1];\n            if (ptr1-&gt;key &gt; ptr2-&gt;key) {\n                ptr3 = ptr1;\n                ptr1 = ptr2;\n                ptr2 = ptr3;\n            }\n            if (ptr2 == mini)\n                mini = ptr1;\n            Fibonnaci_link(ptr2, ptr1);\n            if (ptr1-&gt;right == ptr1)\n                mini = ptr1;\n            arr[temp1] = NULL;\n            temp1++;\n        }\n        arr[temp1] = ptr1;\n        ptr1 = ptr1-&gt;right;\n    } while (ptr1 != mini);\n    mini = NULL;\n    for (int j = 0; j &lt;= temp3; j++) {\n        if (arr[j] != NULL) {\n            arr[j]-&gt;left = arr[j];\n            arr[j]-&gt;right = arr[j];\n            if (mini != NULL) {\n                (mini-&gt;left)-&gt;right = arr[j];\n                arr[j]-&gt;right = mini;\n                arr[j]-&gt;left = mini-&gt;left;\n                mini-&gt;left = arr[j];\n                if (arr[j]-&gt;key &lt; mini-&gt;key)\n                    mini = arr[j];\n            }\n            else {\n                mini = arr[j];\n            }\n            if (mini == NULL)\n                mini = arr[j];\n            else if (arr[j]-&gt;key &lt; mini-&gt;key)\n                mini = arr[j];\n        }\n    }\n}\n\n// Function to extract minimum node in the heap\nvoid Extract_min()\n{\n    if (mini == NULL)\n        cout &lt;&lt; \"The heap is empty\" &lt;&lt; endl;\n    else {\n        node* temp = mini;\n        node* pntr;\n        pntr = temp;\n        node* x = NULL;\n        if (temp-&gt;child != NULL) {\n\n            x = temp-&gt;child;\n            do {\n                pntr = x-&gt;right;\n                (mini-&gt;left)-&gt;right = x;\n                x-&gt;right = mini;\n                x-&gt;left = mini-&gt;left;\n                mini-&gt;left = x;\n                if (x-&gt;key &lt; mini-&gt;key)\n                    mini = x;\n                x-&gt;parent = NULL;\n                x = pntr;\n            } while (pntr != temp-&gt;child);\n        }\n        (temp-&gt;left)-&gt;right = temp-&gt;right;\n        (temp-&gt;right)-&gt;left = temp-&gt;left;\n        mini = temp-&gt;right;\n        if (temp == temp-&gt;right &amp;&amp; temp-&gt;child == NULL)\n            mini = NULL;\n        else {\n            mini = temp-&gt;right;\n            Consolidate();\n        }\n        no_of_nodes--;\n    }\n}\n\n// Cutting a node in the heap to be placed in the root list\nvoid Cut(struct node* found, struct node* temp)\n{\n    if (found == found-&gt;right)\n        temp-&gt;child = NULL;\n\n    (found-&gt;left)-&gt;right = found-&gt;right;\n    (found-&gt;right)-&gt;left = found-&gt;left;\n    if (found == temp-&gt;child)\n        temp-&gt;child = found-&gt;right;\n\n    temp-&gt;degree = temp-&gt;degree - 1;\n    found-&gt;right = found;\n    found-&gt;left = found;\n    (mini-&gt;left)-&gt;right = found;\n    found-&gt;right = mini;\n    found-&gt;left = mini-&gt;left;\n    mini-&gt;left = found;\n    found-&gt;parent = NULL;\n    found-&gt;mark = 'B';\n}\n\n// Recursive cascade cutting function\nvoid Cascase_cut(struct node* temp)\n{\n    node* ptr5 = temp-&gt;parent;\n    if (ptr5 != NULL) {\n        if (temp-&gt;mark == 'W') {\n            temp-&gt;mark = 'B';\n        }\n        else {\n            Cut(temp, ptr5);\n            Cascase_cut(ptr5);\n        }\n    }\n}\n\n// Function to decrease the value of a node in the heap\nvoid Decrease_key(struct node* found, int val)\n{\n    if (mini == NULL)\n        cout &lt;&lt; \"The Heap is Empty\" &lt;&lt; endl;\n\n    if (found == NULL)\n        cout &lt;&lt; \"Node not found in the Heap\" &lt;&lt; endl;\n\n    found-&gt;key = val;\n\n    struct node* temp = found-&gt;parent;\n    if (temp != NULL &amp;&amp; found-&gt;key &lt; temp-&gt;key) {\n        Cut(found, temp);\n        Cascase_cut(temp);\n    }\n    if (found-&gt;key &lt; mini-&gt;key)\n        mini = found;\n}\n\n// Function to find the given node\nvoid Find(struct node* mini, int old_val, int val)\n{\n    struct node* found = NULL;\n    node* temp5 = mini;\n    temp5-&gt;c = 'Y';\n    node* found_ptr = NULL;\n    if (temp5-&gt;key == old_val) {\n        found_ptr = temp5;\n        temp5-&gt;c = 'N';\n        found = found_ptr;\n        Decrease_key(found, val);\n    }\n    if (found_ptr == NULL) {\n        if (temp5-&gt;child != NULL)\n            Find(temp5-&gt;child, old_val, val);\n        if ((temp5-&gt;right)-&gt;c != 'Y')\n            Find(temp5-&gt;right, old_val, val);\n    }\n    temp5-&gt;c = 'N';\n    found = found_ptr;\n}\n\n// Deleting a node from the heap\nvoid Deletion(int val)\n{\n    if (mini == NULL)\n        cout &lt;&lt; \"The heap is empty\" &lt;&lt; endl;\n    else {\n\n        // Decreasing the value of the node to 0\n        Find(mini, val, 0);\n\n        // Calling Extract_min function to\n        // delete minimum value node, which is 0\n        Extract_min();\n        cout &lt;&lt; \"Key Deleted\" &lt;&lt; endl;\n    }\n}\n\n// Function to display the heap\nvoid display()\n{\n    node* ptr = mini;\n    if (ptr == NULL)\n        cout &lt;&lt; \"The Heap is Empty\" &lt;&lt; endl;\n\n    else {\n        cout &lt;&lt; \"The root nodes of Heap are: \" &lt;&lt; endl;\n        do {\n            cout &lt;&lt; ptr-&gt;key;\n            ptr = ptr-&gt;right;\n            if (ptr != mini) {\n                cout &lt;&lt; \"--&gt;\";\n            }\n        } while (ptr != mini &amp;&amp; ptr-&gt;right != NULL);\n        cout &lt;&lt; endl\n            &lt;&lt; \"The heap has \" &lt;&lt; no_of_nodes &lt;&lt; \" nodes\" &lt;&lt; endl\n            &lt;&lt; endl;\n    }\n}\n\n// Driver code\nint main()\n{\n    // We will create a heap and insert 3 nodes into it\n    cout &lt;&lt; \"Creating an initial heap\" &lt;&lt; endl;\n    insertion(5);\n    insertion(2);\n    insertion(8);\n\n    // Now we will display the root list of the heap\n    display();\n\n    // Now we will extract the minimum value node from the heap\n    cout &lt;&lt; \"Extracting min\" &lt;&lt; endl;\n    Extract_min();\n    display();\n\n    // Now we will decrease the value of node '8' to '7'\n    cout &lt;&lt; \"Decrease value of 8 to 7\" &lt;&lt; endl;\n    Find(mini, 8, 7);\n    display();\n\n    // Now we will delete the node '7'\n    cout &lt;&lt; \"Delete the node 7\" &lt;&lt; endl;\n    Deletion(7);\n    display();\n\n    return 0;\n}\n</code></pre>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#heap-sort","title":"Heap Sort","text":"<ul> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-4/ce100-week-4-heap/</li> </ul>","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-4-tree-structures/ce205-week-4-tree-structures/#huffman-coding","title":"Huffman Coding","text":"<ul> <li>Huffman Coding</li> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-9/ce100-week-9-huffman/</li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/difference-between-binary-heap-binomial-heap-and-fibonacci-heap/?ref=rp </li> </ul> </li> </ul> \\[ End-Of-Week-4 \\]","tags":["ce205-week-4","tree-structures","binary-tree","heaps","traversals"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/","title":"CE205 Data Structures Week-5","text":"","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#week-5","title":"Week-5","text":"","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-data-structure-and-traversals","title":"Graph Data Structure and Traversals","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#outline","title":"Outline","text":"<ul> <li>Introduction to Graphs</li> <li>Graph Representations</li> <li>Graph Traversal</li> <li>Water Jug Problem</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs","title":"Introduction to Graphs","text":"<ul> <li>Vertex</li> <li>Edge</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs_1","title":"Introduction to Graphs","text":"<ul> <li>Undirected Graph</li> <li>Directed Graph</li> <li>Mixed Graph</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs_2","title":"Introduction to Graphs","text":"<ul> <li>End Vertices or Endpoints</li> <li>Origin</li> <li>Destination</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs_3","title":"Introduction to Graphs","text":"<ul> <li>Adjacent</li> <li>Incident</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs_4","title":"Introduction to Graphs","text":"<ul> <li>Outgoing Edge</li> <li>Incoming Edge</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs_5","title":"Introduction to Graphs","text":"<ul> <li>Degree</li> <li>Indegree</li> <li>Outdegree</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs_6","title":"Introduction to Graphs","text":"<ul> <li>Parallel edges or Multiple edges</li> <li>Self-loop</li> <li>Simple Graph</li> <li>Path</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#introduction-to-graphs_7","title":"Introduction to Graphs","text":"<ul> <li>Btech Smart Class</li> <li>http://www.btechsmartclass.com/data_structures/introduction-to-graphs.html</li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-representations","title":"Graph Representations","text":"<ol> <li>Adjacency Matrix</li> <li>Incidence Matrix</li> <li> <p>Adjacency List</p> </li> <li> <p>Btech Smart Class</p> </li> <li>http://www.btechsmartclass.com/data_structures/graph-representations.html</li> </ol>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-traversal-dfs","title":"Graph Traversal - DFS","text":"<ol> <li>Depth-First Search (DFS)</li> <li> <p>Iterative Deepening Search(IDS) or Iterative Deepening Depth First Search(IDDFS)</p> </li> <li> <p>Btech Smart Class</p> </li> <li>http://www.btechsmartclass.com/data_structures/graph-traversal-dfs.html</li> </ol>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-traversal-bfs","title":"Graph Traversal - BFS","text":"<ul> <li>Breadth-First Search (BFS)</li> <li>Btech Smart Class<ul> <li>http://www.btechsmartclass.com/data_structures/graph-traversal-bfs.html</li> </ul> </li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-traversal-dls","title":"Graph Traversal - DLS","text":"<ul> <li>Depth-limited Search</li> <li>Educba<ul> <li>https://www.educba.com/depth-limited-search/ </li> </ul> </li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-traversal","title":"Graph Traversal","text":"<ul> <li>Uniform Cost Search</li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/uniform-cost-search-dijkstra-for-large-graphs/</li> </ul> </li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-traversal_1","title":"Graph Traversal","text":"<ul> <li>Bidirectional Search</li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/bidirectional-search/</li> </ul> </li> </ul>","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-5-graph-structures/ce205-week-5-graph-structures/#graph-traversal_2","title":"Graph Traversal","text":"<ul> <li>Water Jug Problem</li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/water-jug-problem-using-bfs/ </li> </ul> </li> <li>Tamu Edu<ul> <li>https://www.math.tamu.edu/~dallen/hollywood/diehard/diehard.htm</li> </ul> </li> <li>Udel Edu<ul> <li>https://www.eecis.udel.edu/~mccoy/courses/cisc4-681.10f/lec-materials/handouts/search-water-jug-handout.pdf</li> </ul> </li> </ul> \\[ End-Of-Week-5 \\]","tags":["ce205-week-5","graph-structures","graph-traversals","algorithms"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/","title":"CE205 Data Structures Week-6","text":"","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#week-6","title":"Week-6","text":"","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-mst-backtracking-topological-sorting-shortest-paths-connectivitymax-flow-and-cycle-detection-algorithms","title":"Graph MST, Backtracking, Topological Sorting, Shortest Paths, Connectivity,Max Flow and Cycle Detection Algorithms.","text":"","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-isomorphism-and-canonization","title":"Graph Isomorphism and canonization","text":"","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-cuts","title":"Graph Cuts","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#outline-1","title":"Outline-1","text":"<ul> <li>Graph Topological Sorting </li> <li>Graph MST </li> <li>Graph Backtracking</li> <li>Tug of War </li> <li>n-Queen's Problem</li> <li>m Coloring Problem</li> <li>Euler &amp; Hamiltonian Path</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#outline-2","title":"Outline-2","text":"<ul> <li>Graph Sortest Paths </li> <li>Graph Connectivity - SCC</li> <li>Graph Max Flow </li> <li>Graph Isomorphism</li> <li>Graph canonization</li> <li>Graph Cuts</li> <li>Min Cut</li> <li>Max Cut</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#outline-3","title":"Outline-3","text":"<ul> <li>Alpha-Beta Pruning</li> <li>Hasse Diagrams</li> <li>Petri Nets</li> <li>Bipartite Graphs</li> <li>Cycle Detection</li> <li>Brent\u2019s Algorithm</li> <li>Hare and Tortoise Algorithm</li> <li>Bayesian Network</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-topological-sorting","title":"Graph Topological Sorting","text":"<ul> <li>CE100</li> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-10/ce100-week-10-graphs/?h=topolo#directed-acyclic-graphs-dag</li> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/topological-sorting/ </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-mst","title":"Graph MST","text":"<ul> <li>CE100</li> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-10/ce100-week-10-graphs/?h=mst#minimum-spanning-tree-mst</li> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/prims-minimum-spanning-tree-mst-greedy-algo-5/ </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-backtracking","title":"Graph Backtracking","text":"<ul> <li>Tug of War  </li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/tug-of-war/</li> </ul> </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-backtracking_1","title":"Graph Backtracking","text":"<ul> <li>n-Queen's Problem</li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/n-queen-problem-backtracking-3/?ref=lbp </li> </ul> </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-backtracking_2","title":"Graph Backtracking","text":"<ul> <li>m Coloring Problem </li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/m-coloring-problem-backtracking-5/ </li> </ul> </li> <li>Tutorials Point<ul> <li>https://www.tutorialspoint.com/M-Coloring-Problem#:~:text=The%20problem%20is%20to%20find,is%20assigned%20on%20which%20vertex.</li> </ul> </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-backtracking_3","title":"Graph Backtracking","text":"<ul> <li>Euler &amp; Hamiltonian Path</li> <li>https://www.geeksforgeeks.org/mathematics-euler-hamiltonian-paths/</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-sortest-paths","title":"Graph Sortest Paths","text":"<ul> <li>Single-Source Shortest Paths (SSSP)</li> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-11/ce100-week-11-shortestpath/</li> <li>https://visualgo.net/en/sssp?slide=1</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-connectivity","title":"Graph Connectivity","text":"<ul> <li>Strongly Connected Components</li> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/tr/week-10/ce100-week-10-graphs/?h=scc#strongly-connected-components-scc</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-max-flow","title":"Graph Max Flow","text":"<ul> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/max-flow-problem-introduction/</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-isomorphism","title":"Graph Isomorphism","text":"<ul> <li>https://www.sciencedirect.com/science/article/pii/S0747717113001193</li> <li>https://www3.cs.stonybrook.edu/~algorith/implement/nauty/implement.shtml </li> <li>https://github.com/Mith13/Graphs-isomorphism </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-cuts_1","title":"Graph Cuts","text":"<ol> <li>Min Cuts</li> <li> <p>Max Cuts</p> </li> <li> <p>Wikipedia</p> </li> <li>https://en.wikipedia.org/wiki/Cut_(graph_theory)#:~:text=In%20graph%20theory%2C%20a%20cut,said%20to%20cross%20the%20cut.</li> </ol>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-canonization","title":"Graph canonization","text":"<ul> <li>Wikipedia</li> <li>https://en.wikipedia.org/wiki/  Graph_canonization</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#cycle-detection","title":"Cycle Detection","text":"<ul> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-10/ce100-week-10-graphs/#cycle-detection</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#graph-coloring","title":"Graph Coloring","text":"<ul> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-10/ce100-week-10-graphs/#graph-coloring</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#alpha-beta-pruning","title":"Alpha-Beta Pruning","text":"<ul> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-4-alpha-beta-pruning/ </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#hasse-diagrams","title":"Hasse Diagrams","text":"<ul> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/discrete-mathematics-hasse-diagrams/ </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#petri-nets","title":"Petri Nets","text":"<ul> <li>Wikipedia</li> <li>https://en.wikipedia.org/wiki/Petri_net </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#bipartite-graphs","title":"Bipartite Graphs","text":"<ul> <li>CE100</li> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-10/ce100-week-10-graphs/?h=bipartite#biparitite-checker</li> <li>Geeks for Geeks</li> <li>https://www.geeksforgeeks.org/bipartite-graph/ </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#cycle-detection_1","title":"Cycle Detection","text":"<ul> <li>Brent\u2019s Algorithm</li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/brents-cycle-detection-algorithm/ </li> </ul> </li> <li>Hare and Tortoise Algorithm</li> <li>Geeks for Geeks<ul> <li>https://www.geeksforgeeks.org/tag/tortoise-hare-approach/ </li> </ul> </li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#cycle-detection_2","title":"Cycle Detection","text":"<ul> <li>CE100</li> <li>https://ucoruh.github.io/ce100-algorithms-and-programming-II/week-10/ce100-week-10-graphs/?h=bipartite#cycle-detection</li> </ul>","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-6-graph-algorithms/ce205-week-6-graph-algorithms/#bayesian-network","title":"Bayesian Network","text":"<ul> <li>https://towardsdatascience.com/introduction-to-bayesian-networks-81031eeed94e</li> </ul> \\[ End-Of-Week-6 \\]","tags":["ce205-week-6","graph-algorithms","mst","backtracking","topological-sorting","max-flow"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/","title":"CE205 Data Structures Week-7","text":"","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#week-7","title":"Week-7","text":"","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#linear-binary-and-fibonacci-search-hashing-and-hash-tables-with-perpect-hashing","title":"Linear, Binary and Fibonacci Search, Hashing and Hash Tables with Perpect Hashing","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#outline-1","title":"Outline-1","text":"<ul> <li>Linear Search</li> <li>Binary Search</li> <li>Binary Search vs Linear Search</li> <li>Interpolation Search</li> <li>Interpolation search vs Binary search</li> <li>Fibonacci Search</li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#outline-2","title":"Outline-2","text":"<ul> <li>Hashing and Hash Tables</li> <li>Direct-Address Tables</li> <li>Hash Tables</li> <li>Hash Functions</li> <li>Open Adressing</li> <li>Perfect Hashing</li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#linear-search","title":"Linear Search","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/linear-search.html </li> <li>https://www.geeksforgeeks.org/linear-search/ </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#binary-search","title":"Binary Search","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/binary-search.html </li> <li>https://www.geeksforgeeks.org/binary-search/ </li> <li>https://visualgo.net/en/bst </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#binary-search-vs-linear-search","title":"Binary Search vs Linear Search","text":"<ul> <li>https://www.geeksforgeeks.org/linear-search-vs-binary-search/?ref=rp </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#interpolation-search","title":"Interpolation Search","text":"<ul> <li>https://www.geeksforgeeks.org/interpolation-search/ </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#interpolation-search-vs-binary-search","title":"Interpolation search vs Binary search","text":"<ul> <li>https://www.geeksforgeeks.org/g-fact-84/?ref=rp </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#fibonacci-search","title":"Fibonacci Search","text":"<ul> <li>https://www.geeksforgeeks.org/fibonacci-search/ </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#hashing-and-hash-tables","title":"Hashing and Hash Tables","text":"<ul> <li>https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/ </li> <li>http://www.btechsmartclass.com/data_structures/hashing.html</li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#direct-address-tables","title":"Direct-Address Tables","text":"<ul> <li>https://www.geeksforgeeks.org/direct-address-table/ </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#hash-tables","title":"Hash Tables","text":"<ul> <li>https://www.tutorialspoint.com/data_structures_algorithms/hash_data_structure.htm </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#hash-functions","title":"Hash Functions","text":"<ul> <li>https://www.geeksforgeeks.org/what-are-hash-functions-and-how-to-choose-a-good-hash-function/ </li> <li>https://www.tutorialspoint.com/cryptography/cryptography_hash_functions.htm </li> <li>https://www.cs.hmc.edu/~geoff/classes/hmc.cs070.200101/homework10/hashfuncs.html </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#open-adressing","title":"Open Adressing","text":"<ul> <li>https://www.geeksforgeeks.org/hashing-set-3-open-addressing/ </li> </ul>","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-7-search-hashing/ce205-week-7-search-hashing/#perfect-hashing","title":"Perfect Hashing","text":"<ul> <li>https://en.wikipedia.org/wiki/Perfect_hash_function#:~:text=In%20computer%20science%2C%20a%20perfect,constant%20worst%2Dcase%20access%20time.</li> </ul> \\[ End-Of-Week-6 \\]","tags":["ce205-week-7","search-algorithms","hashing","binary-search","perfect-hashing"]},{"location":"week-8-midterm/ce205-week-8-midterm/","title":"CE205 Data Structures Week-8","text":"","tags":["ce205-week-8","midterm"]},{"location":"week-8-midterm/ce205-week-8-midterm/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-8","midterm"]},{"location":"week-8-midterm/ce205-week-8-midterm/#week-8","title":"Week-8","text":"","tags":["ce205-week-8","midterm"]},{"location":"week-8-midterm/ce205-week-8-midterm/#midterm","title":"Midterm","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p> <p>No Content</p>","tags":["ce205-week-8","midterm"]},{"location":"week-9-sorting/ce205-week-9-sorting/","title":"CE205 Data Structures Week-9","text":"","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#ce205-data-structures","title":"CE205 Data Structures","text":"","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#week-9","title":"Week-9","text":"","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#sorting-algorithms-taxonomy-and-comparisons","title":"Sorting Algorithms, Taxonomy and Comparisons","text":"<p>Download PDF,DOCX, SLIDE, PPTX</p>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#outline","title":"Outline","text":"<ul> <li>Resources</li> <li>Sortings</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#outline_1","title":"Outline","text":"<ul> <li>Insertion Sort</li> <li>Selection Sort</li> <li>Radix Sort </li> <li>Quick Sort </li> <li>Heap Sort</li> <li>Permutation Sort</li> <li>Gnome Sort</li> <li>Comb Sort</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#outline_2","title":"Outline","text":"<ul> <li>Flash Sort</li> <li>Stooge Sort</li> <li>Bees Algorithm</li> <li>Lucky Sort</li> <li>Indirect Sort (Pointer Sort)</li> <li>External Sort (Segmented Sort)</li> <li>Shaker Sort / Bidirectional Bubble Sort</li> <li>Shell Sort</li> <li>Comparison of Sorting Methods</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#resources","title":"Resources","text":"<ul> <li>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html </li> <li>https://www.geeksforgeeks.org/sorting-algorithms/ </li> <li>https://sorting.at/ </li> <li>https://xlinux.nist.gov/dads/HTML/sort.html</li> <li>https://xlinux.nist.gov/dads/</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#insertion-sort","title":"Insertion Sort","text":"<ul> <li>https://www.programiz.com/dsa/insertion-sort</li> <li>https://visualgo.net/en/sorting (select INS)</li> <li>http://www.btechsmartclass.com/data_structures/insertion-sort.html </li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Insertion_sort</li> <li>https://xlinux.nist.gov/dads/HTML/insertionSort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#selection-sort","title":"Selection Sort","text":"<ul> <li>https://www.programiz.com/dsa/selection-sort</li> <li>https://visualgo.net/en/sorting (select SEL)</li> <li>http://www.btechsmartclass.com/data_structures/selection-sort.html </li> <li>https://www.geeksforgeeks.org/selection-sort/ </li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Selection_sort</li> <li>https://xlinux.nist.gov/dads/HTML/selectionSort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#radix-sort","title":"Radix Sort","text":"<ul> <li>https://www.programiz.com/dsa/radix-sort</li> <li>https://visualgo.net/en/sorting (select RAD)</li> <li>http://www.btechsmartclass.com/data_structures/radix-sort.html </li> <li>https://www.geeksforgeeks.org/radix-sort/</li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Radix_sort</li> <li>https://xlinux.nist.gov/dads/HTML/radixsort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#quick-sort","title":"Quick Sort","text":"<ul> <li>https://www.programiz.com/dsa/quick-sort</li> <li>https://visualgo.net/en/sorting (select QUI)</li> <li>http://www.btechsmartclass.com/data_structures/quick-sort.html </li> <li>https://www.geeksforgeeks.org/quick-sort/ </li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Quicksort</li> <li>https://xlinux.nist.gov/dads/HTML/quicksort.html</li> <li>https://xlinux.nist.gov/dads/HTML/multikeyQuicksort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#heap-sort","title":"Heap Sort","text":"<ul> <li>https://www.programiz.com/dsa/heap-sort</li> <li>http://www.btechsmartclass.com/data_structures/heap-sort.html </li> <li>https://visualgo.net/en/heap</li> <li>https://www.geeksforgeeks.org/heap-sort/</li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Heapsort</li> <li>https://xlinux.nist.gov/dads/HTML/heapSort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#permutation-sort","title":"Permutation Sort","text":"<ul> <li>https://www.geeksforgeeks.org/bogosort-permutation-sort/ </li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Permutation_sort</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#gnome-sort","title":"Gnome Sort","text":"<ul> <li>https://www.geeksforgeeks.org/gnome-sort-a-stupid-one/?ref=lbp</li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Gnome_sort</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#comb-sort","title":"Comb Sort","text":"<ul> <li>https://www.geeksforgeeks.org/comb-sort/ </li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Comb_sort</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#flash-sort","title":"Flash Sort","text":"<ul> <li>https://en.wikipedia.org/wiki/Flashsort</li> <li>https://www.drdobbs.com/database/the-flashsort1-algorithm/184410496</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#stooge-sort","title":"Stooge Sort","text":"<ul> <li>https://xlinux.nist.gov/dads/HTML/stoogesort.html</li> <li>https://en.wikipedia.org/wiki/Stooge_sort</li> <li>https://courses.cs.washington.edu/courses/cse373/13wi/lectures/02-22/18-sorting1-bogo-stooge-bubble.pdf</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#bees-algorithm","title":"Bees Algorithm","text":"<ul> <li>https://en.wikipedia.org/wiki/Bees_algorithm</li> <li>http://beesalgorithmsite.altervista.org/Downloads.htm</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#lucky-sort","title":"Lucky Sort","text":"<ul> <li>https://xlinux.nist.gov/dads/HTML/luckySort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#indirect-sort-pointer-sort","title":"Indirect Sort (Pointer Sort)","text":"<ul> <li>https://xlinux.nist.gov/dads/HTML/internalsort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#external-sort-segmented-sort","title":"External Sort (Segmented Sort)","text":"<ul> <li>https://xlinux.nist.gov/dads/HTML/externalsort.html</li> <li>https://xlinux.nist.gov/dads/HTML/externalMemoryAlgo.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#shaker-sort-bidirectional-bubble-sort","title":"Shaker Sort / Bidirectional Bubble Sort","text":"<ul> <li>https://xlinux.nist.gov/dads/HTML/bidirectionalBubbleSort.html</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#shell-sort","title":"Shell Sort","text":"<ul> <li>https://www.programiz.com/dsa/shell-sort</li> <li>https://rosettacode.org/wiki/Sorting_algorithms/Shell_sort</li> </ul>","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"week-9-sorting/ce205-week-9-sorting/#comparison-of-sorting-methods","title":"Comparison of Sorting Methods","text":"<ul> <li>http://www.btechsmartclass.com/data_structures/comparison-of-sorting-methods.html </li> </ul> \\[ End-Of-Week-9 \\]","tags":["ce205-week-9","sorting-algorithms","comparisons","taxonomy"]},{"location":"tr/license/","title":"Lisans","text":""},{"location":"tr/license/#code-license","title":"Code License","text":"<p>MIT Lisans\u0131</p> <p>Telif hakk\u0131 \u00a9 2019-2024 U\u011fur CORUH</p> <p>Bu yaz\u0131l\u0131m\u0131n ve ili\u015fkili dok\u00fcmantasyon dosyalar\u0131n\u0131n (\"Yaz\u0131l\u0131m\") bir kopyas\u0131n\u0131 edinen her ki\u015fiye, a\u015fa\u011f\u0131daki ko\u015fullara tabi olmak kayd\u0131yla, Yaz\u0131l\u0131m\u0131 herhangi bir k\u0131s\u0131tlama olmaks\u0131z\u0131n kullanma, kopyalama, de\u011fi\u015ftirme, birle\u015ftirme, yay\u0131nlama, da\u011f\u0131tma, alt lisanslama ve/veya Yaz\u0131l\u0131m\u0131n kopyalar\u0131n\u0131 satma hakk\u0131 \u00fccretsiz olarak verilmektedir, ayr\u0131ca Yaz\u0131l\u0131m\u0131n sa\u011fland\u0131\u011f\u0131 ki\u015filere de bu haklar\u0131n verilmesine izin verilmektedir:</p> <p>Yukar\u0131daki telif hakk\u0131 bildirimi ve bu izin bildirimi, Yaz\u0131l\u0131m\u0131n t\u00fcm kopyalar\u0131na veya \u00f6nemli k\u0131s\u0131mlar\u0131na dahil edilecektir.</p> <p>YAZILIM, \"OLDU\u011eU G\u0130B\u0130\" SA\u011eLANMAKTADIR, T\u0130CAR\u0130 ELVER\u0130\u015eL\u0130L\u0130K, BEL\u0130RL\u0130 B\u0130R AMACA UYGUNLUK VE \u0130HLAL ETMEME DAH\u0130L ANCAK BUNLARLA SINIRLI OLMAMAK \u00dcZERE A\u00c7IK VEYA ZIMN\u0130 HERHANG\u0130 B\u0130R GARANT\u0130 OLMAKSIZIN SA\u011eLANMAKTADIR. H\u0130\u00c7B\u0130R DURUMDA YAZARLAR VEYA TEL\u0130F HAKKI SAH\u0130PLER\u0130, YAZILIMIN VEYA YAZILIMIN KULLANIMI VEYA BA\u015eKA B\u0130R \u015eEK\u0130LDE \u0130LG\u0130L\u0130 OLAN HERHANG\u0130 B\u0130R TALEP, ZARAR VEYA D\u0130\u011eER Y\u00dcK\u00dcML\u00dcL\u00dcKLERDEN SORUMLU TUTULAMAZ.</p>"},{"location":"tr/license/#content-license","title":"Content License","text":"<p>Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 Uluslararas\u0131 Lisans\u0131 (CC BY-NC-ND 4.0)</p> <p>Serbestsiniz:</p> <ul> <li>Payla\u015fmak: Materyali her ortamda veya formatta kopyalayabilir ve yeniden da\u011f\u0131tabilirsiniz.</li> </ul> <p>A\u015fa\u011f\u0131daki ko\u015fullar alt\u0131nda:</p> <ul> <li>At\u0131f: Uygun at\u0131f yapmal\u0131s\u0131n\u0131z, lisansa bir ba\u011flant\u0131 sa\u011flamal\u0131s\u0131n\u0131z ve de\u011fi\u015fiklik yap\u0131l\u0131p yap\u0131lmad\u0131\u011f\u0131n\u0131 belirtmelisiniz. Bunu makul bir \u015fekilde yapabilirsiniz, ancak lisans verenin sizi veya kullan\u0131m\u0131n\u0131z\u0131 onaylad\u0131\u011f\u0131n\u0131 ima edecek bir \u015fekilde de\u011fil.</li> <li>Ticari Olmayan: Materyali ticari ama\u00e7larla kullanamazs\u0131n\u0131z.</li> <li>T\u00fcrev Yaratamazs\u0131n\u0131z: Materyali yeniden kar\u0131\u015ft\u0131ramaz, d\u00f6n\u00fc\u015ft\u00fcremez veya \u00fczerine in\u015fa edemezsiniz.</li> </ul> <p>Ek k\u0131s\u0131tlama yoktur \u2014 Lisans\u0131n izin verdi\u011fi hi\u00e7bir \u015feyi ba\u015fkalar\u0131n\u0131n yapmas\u0131n\u0131 yasal olarak k\u0131s\u0131tlayan yasal terimler veya teknolojik \u00f6nlemler uygulayamazs\u0131n\u0131z.</p> <p>Daha fazla detay i\u00e7in: Creative Commons CC BY-NC-ND 4.0</p>"},{"location":"tr/tags/#tag:advanced-tree-structures","title":"advanced-tree-structures","text":"<ul> <li>            Hafta-10 (\u0130leri A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:algorithms","title":"algorithms","text":"<ul> <li>            Hafta-2 (Ba\u011fl\u0131 Listeler)          </li> <li>            Hafta-3 (Y\u0131\u011f\u0131nlar ve Kuyruklar)          </li> <li>            Week-5 (Grapy Data Structures)          </li> </ul>"},{"location":"tr/tags/#tag:alignment-algorithms","title":"alignment-algorithms","text":"<ul> <li>            Hafta-11 (Dize Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:arrays","title":"arrays","text":"<ul> <li>            Hafta-2 (Ba\u011fl\u0131 Listeler)          </li> </ul>"},{"location":"tr/tags/#tag:asn-1","title":"asn-1","text":"<ul> <li>            Ders Program\u0131          </li> <li>            Hafta-1 (Veri Yap\u0131lar\u0131na Giri\u015f)          </li> </ul>"},{"location":"tr/tags/#tag:avl-tree","title":"avl-tree","text":"<ul> <li>            Hafta-10 (\u0130leri A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:backtracking","title":"backtracking","text":"<ul> <li>            Hafta-6 (Graf Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:ber-tlv","title":"ber-tlv","text":"<ul> <li>            Hafta-1 (Veri Yap\u0131lar\u0131na Giri\u015f)          </li> </ul>"},{"location":"tr/tags/#tag:binary-search","title":"binary-search","text":"<ul> <li>            Hafta-7 (Arama ve Hashleme)          </li> </ul>"},{"location":"tr/tags/#tag:binary-search-tree","title":"binary-search-tree","text":"<ul> <li>            Hafta-10 (\u0130leri A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:binary-tree","title":"binary-tree","text":"<ul> <li>            Hafta-4 (A\u011fa\u00e7 Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:binarytree","title":"binarytree","text":"<ul> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:binsearch","title":"binsearch","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:bloomfilter","title":"bloomfilter","text":"<ul> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:btree","title":"btree","text":"<ul> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:ce205","title":"ce205","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> <li>            Hafta-16 (Final)          </li> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-syllabus","title":"ce205-syllabus","text":"<ul> <li>            Ders Program\u0131          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-1","title":"ce205-week-1","text":"<ul> <li>            Hafta-1 (Veri Yap\u0131lar\u0131na Giri\u015f)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-10","title":"ce205-week-10","text":"<ul> <li>            Hafta-10 (\u0130leri A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-11","title":"ce205-week-11","text":"<ul> <li>            Hafta-11 (Dize Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-12","title":"ce205-week-12","text":"<ul> <li>            Hafta-12 (Dize Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-2","title":"ce205-week-2","text":"<ul> <li>            Hafta-2 (Ba\u011fl\u0131 Listeler)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-3","title":"ce205-week-3","text":"<ul> <li>            Hafta-3 (Y\u0131\u011f\u0131nlar ve Kuyruklar)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-4","title":"ce205-week-4","text":"<ul> <li>            Hafta-4 (A\u011fa\u00e7 Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-6","title":"ce205-week-6","text":"<ul> <li>            Hafta-6 (Graf Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-7","title":"ce205-week-7","text":"<ul> <li>            Hafta-7 (Arama ve Hashleme)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-8","title":"ce205-week-8","text":"<ul> <li>            Hafta-8 (Ara S\u0131nav)          </li> </ul>"},{"location":"tr/tags/#tag:ce205-week-9","title":"ce205-week-9","text":"<ul> <li>            Hafta-9 (S\u0131ralama)          </li> </ul>"},{"location":"tr/tags/#tag:coalesced","title":"coalesced","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:collision","title":"collision","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:comparison-algorithms","title":"comparison-algorithms","text":"<ul> <li>            Hafta-11 (Dize Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:comparisons","title":"comparisons","text":"<ul> <li>            Hafta-9 (S\u0131ralama)          </li> </ul>"},{"location":"tr/tags/#tag:data-structures","title":"data-structures","text":"<ul> <li>            Ders Program\u0131          </li> </ul>"},{"location":"tr/tags/#tag:datastruct","title":"datastruct","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:dblhash","title":"dblhash","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:directfile","title":"directfile","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:disjoint-sets","title":"disjoint-sets","text":"<ul> <li>            Hafta-12 (Dize Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:fall-2024","title":"fall-2024","text":"<ul> <li>            Ders Program\u0131          </li> </ul>"},{"location":"tr/tags/#tag:fileorg","title":"fileorg","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:final","title":"final","text":"<ul> <li>            Hafta-16 (Final)          </li> </ul>"},{"location":"tr/tags/#tag:graph-algorithms","title":"graph-algorithms","text":"<ul> <li>            Hafta-6 (Graf Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:hashfunc","title":"hashfunc","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:hashing","title":"hashing","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> <li>            Hafta-7 (Arama ve Hashleme)          </li> <li>            Week-15 (Hashing Techniques, String Matching, Trie, Secondary Key Retrival, File Sorting)          </li> </ul>"},{"location":"tr/tags/#tag:hashtable","title":"hashtable","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:heaps","title":"heaps","text":"<ul> <li>            Hafta-4 (A\u011fa\u00e7 Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:interpsearch","title":"interpsearch","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:invfile","title":"invfile","text":"<ul> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:linked-lists","title":"linked-lists","text":"<ul> <li>            Hafta-2 (Ba\u011fl\u0131 Listeler)          </li> </ul>"},{"location":"tr/tags/#tag:linprobe","title":"linprobe","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:matrices","title":"matrices","text":"<ul> <li>            Hafta-2 (Ba\u011fl\u0131 Listeler)          </li> </ul>"},{"location":"tr/tags/#tag:max-flow","title":"max-flow","text":"<ul> <li>            Hafta-6 (Graf Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:midterm","title":"midterm","text":"<ul> <li>            Hafta-8 (Ara S\u0131nav)          </li> </ul>"},{"location":"tr/tags/#tag:mst","title":"mst","text":"<ul> <li>            Hafta-6 (Graf Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:multilist","title":"multilist","text":"<ul> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:overflow","title":"overflow","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:per-tlv","title":"per-tlv","text":"<ul> <li>            Hafta-1 (Veri Yap\u0131lar\u0131na Giri\u015f)          </li> </ul>"},{"location":"tr/tags/#tag:perfect-hashing","title":"perfect-hashing","text":"<ul> <li>            Hafta-7 (Arama ve Hashleme)          </li> </ul>"},{"location":"tr/tags/#tag:perhash","title":"perhash","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:quadprobe","title":"quadprobe","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:queues","title":"queues","text":"<ul> <li>            Hafta-3 (Y\u0131\u011f\u0131nlar ve Kuyruklar)          </li> </ul>"},{"location":"tr/tags/#tag:red-black-tree","title":"red-black-tree","text":"<ul> <li>            Hafta-10 (\u0130leri A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:search-algorithms","title":"search-algorithms","text":"<ul> <li>            Hafta-7 (Arama ve Hashleme)          </li> </ul>"},{"location":"tr/tags/#tag:selfsearch","title":"selfsearch","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:seqfile","title":"seqfile","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:signature","title":"signature","text":"<ul> <li>            Hafta-14 (Dosya i\u00e7in Do\u011frudan Dosya ve B A\u011fa\u00e7 Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:simhash","title":"simhash","text":"<ul> <li>            Hafta-13 (S\u0131ral\u0131 ve Do\u011frudan Dosya D\u00fczeni)          </li> </ul>"},{"location":"tr/tags/#tag:sorting-algorithms","title":"sorting-algorithms","text":"<ul> <li>            Hafta-9 (S\u0131ralama)          </li> </ul>"},{"location":"tr/tags/#tag:stacks","title":"stacks","text":"<ul> <li>            Hafta-3 (Y\u0131\u011f\u0131nlar ve Kuyruklar)          </li> </ul>"},{"location":"tr/tags/#tag:string-data-structure","title":"string-data-structure","text":"<ul> <li>            Hafta-11 (Dize Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:string-search-algorithms","title":"string-search-algorithms","text":"<ul> <li>            Hafta-12 (Dize Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:subsequence-search","title":"subsequence-search","text":"<ul> <li>            Hafta-11 (Dize Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:taxonomy","title":"taxonomy","text":"<ul> <li>            Hafta-9 (S\u0131ralama)          </li> </ul>"},{"location":"tr/tags/#tag:topological-sorting","title":"topological-sorting","text":"<ul> <li>            Hafta-6 (Graf Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:traversals","title":"traversals","text":"<ul> <li>            Hafta-4 (A\u011fa\u00e7 Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:tree-structures","title":"tree-structures","text":"<ul> <li>            Hafta-4 (A\u011fa\u00e7 Veri Yap\u0131lar\u0131)          </li> </ul>"},{"location":"tr/tags/#tag:tries","title":"tries","text":"<ul> <li>            Hafta-12 (Dize Algoritmalar\u0131)          </li> </ul>"},{"location":"tr/changelog/","title":"Revizyonlar","text":""},{"location":"tr/project-guide/","title":"Proje Rehberi","text":""},{"location":"tr/project-guide/#common-features_15","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow parents or caregivers to create accounts to personalize the activity planning for their children. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Scheduling Activities and Playdates: Implement a calendar or scheduling system where parents can plan and schedule activities, playdates, and events for their kids. Parents can set date, time, location, and descriptions for each activity.</p> </li> <li> <p>Educational Resource Integration: Integrate educational resources such as educational games, videos, or articles relevant to children's  development. Parents can access and share these resources with their kids.</p> </li> <li> <p>Development Milestone Tracker: Provide a milestone tracking feature that helps parents monitor their child's developmental progress. Parents can record and view milestones achieved in areas like language development, motor skills, and social interactions.</p> </li> <li> <p>Parental Notes and Reminders: Allow parents to add notes and reminders related to their children's activities and development. These can include specific instructions, appointments, or important dates.</p> </li> </ul>"},{"location":"tr/project-guide/#common-features_38","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their plant care information, track their indoor plants, and set reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Plant Species Information: Provide a database of indoor plant species with detailed information about each plant, including common names,  scientific names, growth habits, and care requirements.</p> </li> <li> <p>Watering and Fertilization Schedule: Enable users to create customized watering and fertilization schedules for their indoor plants. Users can set frequency and quantity based on plant type and individual needs.</p> </li> <li> <p>Sunlight and Temperature Requirements: Offer guidance on the sunlight and temperature preferences of various indoor plant species. Users can understand the ideal conditions for their plants.</p> </li> <li> <p>Pest and Disease Management Tips: Include a section with advice on identifying and managing common pests and diseases that affect indoor plants. Users can learn how to keep their plants healthy.</p> </li> </ul>"},{"location":"tr/project-guide/#common-features_41","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their task lists, set reminders, and manage their tasks. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Task Creation: Implement tools for users to create tasks, including task names, descriptions, categories, and due dates. Users can organize  tasks by categories such as work, personal, and more.</p> </li> <li> <p>Deadline Setting: Enable users to assign deadlines to tasks. Users can specify due dates and times for each task.</p> </li> <li> <p>Reminder System: Provide a reminder system that notifies users of upcoming task deadlines. Users can receive notifications via email, SMS, or in-app notifications.</p> </li> <li> <p>Task Prioritization: Allow users to prioritize tasks by marking them as high, medium, or low importance. Users can also reorder tasks within categories based on priority.</p> </li> </ul>"},{"location":"tr/project-guide/#common-features_49","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their language learning experience, build vocabulary, complete grammar exercises, track progress, and access language resources. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vocabulary Builder: Implement tools for users to add new words to their vocabulary, including translations, definitions, example sentences, and pronunciation. Users can practice and review their vocabulary.</p> </li> <li> <p>Grammar Exercises: Create a system for creating and completing grammar tests and exercises. Users can choose from different grammar topics,  complete exercises, and receive feedback on their performance.</p> </li> <li> <p>Progress Tracking: Provide progress tracking features that allow users to monitor their learning milestones, track their vocabulary size, and view their performance in grammar exercises.</p> </li> <li> <p>Language Resources: Compile a collection of useful language learning links, including online courses, dictionaries, language forums, and other resources that can help users improve their language skills.</p> </li> </ul>"},{"location":"tr/project-guide/#common-features_56","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their rental property management, maintain property listings, manage tenant records, track rent payments, and log maintenance activities. This feature is optional but can  enhance the user experience.</p> </li> <li> <p>Property Listing: Implement tools for users to manage rental property details. Users can list properties with information such as property type, address, rent amount, and availability status.</p> </li> <li> <p>Tenant Records: Create a system for keeping track of tenants and lease terms. Users can record tenant details, lease start and end dates, and contact information.</p> </li> <li> <p>Rent Tracking: Enable users to record rent payments and due dates. Users can log payment amounts, methods, and generate rent receipts.</p> </li> <li> <p>Maintenance Log: Provide features for scheduling and tracking property maintenance. Users can schedule maintenance tasks, record maintenance  history, and set reminders for future maintenance.</p> </li> </ul>"},{"location":"tr/project-guide/#common-features_59","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including administrators, teachers, and staff, to create accounts or profiles within the application to personalize their attendance management, manage student and teacher profiles, track attendance, generate reports, and view attendance  summaries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Student and Teacher Profiles: Implement tools for users to register, update, and delete student and teacher profiles. Users can collect details such as names, contact information, and class assignments.</p> </li> <li> <p>Attendance Tracking: Create a system for daily attendance recording for each class. Teachers can mark students present or absent for each class session.</p> </li> <li> <p>Reporting: Enable users to generate monthly attendance reports for students. Reports can include individual student attendance records, class-wise reports, and subject-wise reports.</p> </li> <li> <p>Summary: Provide an overview of attendance trends and anomalies. Users can view summary statistics, such as average attendance rates, frequently absent students, and trends over time.</p> </li> </ul>"},{"location":"tr/project-guide/#common-features_63","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including sales representatives and customer support agents, to create accounts or profiles within the application to personalize their CRM activities, store customer data, log interactions, track sales, and manage customer inquiries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customer Data: Implement tools for storing and managing customer information. Users can create customer profiles, record contact details, demographic information, and preferences.</p> </li> <li> <p>Interaction Logging: Create a system for recording customer interactions and notes. Users can log phone calls, emails, meetings, and other  interactions, along with relevant details and follow-up actions.</p> </li> <li> <p>Sales Tracking: Provide features for monitoring sales activities and history. Users can track leads, opportunities, quotes, orders, and invoices associated with each customer.</p> </li> <li> <p>Customer Service: Enable users to manage customer inquiries and resolutions. Users can log and track customer service requests, assign them to agents, and document solutions.</p> </li> </ul>"},{"location":"tr/project-guide/#c-specific-details_74","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like project progress visualization (e.g., Gantt charts), project timeline tracking, and project priority setting. Additionally, provide tools for generating project cost reports, material shopping lists, and project completion certificates. Ensure that the application helps DIY enthusiasts plan, track, and manage their projects efficiently, whether they involve home improvement, crafting, or any other DIY endeavor.</p> <p></p> <p>\\(END-OF-DOCUMENT\\)</p>"},{"location":"tr/resume/","title":"\u00d6zge\u00e7mi\u015f","text":""},{"location":"tr/resume/#ozgecmis","title":"\u00d6zge\u00e7mi\u015f","text":"<ul> <li>\u00d6zge\u00e7mi\u015fi \u0130ndir</li> </ul>"},{"location":"tr/syllabus/syllabus/","title":"CE205 Veri Yap\u0131lar\u0131","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#recep-tayyip-erdogan-universitesi","title":"Recep Tayyip Erdo\u011fan \u00dcniversitesi","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#muhendislik-ve-mimarlk-fakultesi","title":"M\u00fchendislik ve Mimarl\u0131k Fak\u00fcltesi","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#bilgisayar-muhendisligi","title":"Bilgisayar M\u00fchendisli\u011fi","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#ce205-veri-yaplar","title":"CE205-Veri Yap\u0131lar\u0131","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#ders-icerigi","title":"Ders \u0130\u00e7eri\u011fi","text":"","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#guz-donemi-2024-2025","title":"G\u00fcz D\u00f6nemi, 2024-2025","text":"<p>Download </p> <ul> <li>PDF</li> <li>DOCX</li> <li>SLIDE</li> </ul> <p>Download Legacy </p> <ul> <li>WORD</li> <li>PDF</li> </ul> \u00d6\u011fretim \u00dcyesi Dr. \u00d6\u011fr. \u00dcyesi U\u011fur CORUH \u0130leti\u015fim Bilgileri ugur.coruh@erdogan.edu.tr Ofis Numaras\u0131 F-301 Teams Kodu h3cl51i Ders Saatleri ve G\u00fcnleri Cuma\u00a0 09:00-12:00 \u0130\u0130BF 402 Kat-4 Ofis Saatleri Toplant\u0131lar Google Meet \u00fczerinden \u00fcniversite hesab\u0131n\u0131zla ve email ile planlanacakt\u0131r. H\u0131zl\u0131 cevap i\u00e7in l\u00fctfen e-postan\u0131n ba\u015fl\u0131\u011f\u0131n\u0131 [CE205] etiketi ile g\u00f6nderin ve resmi, net ve k\u0131sa yaz\u0131n. Ders ve \u0130leti\u015fim Dili \u0130ngilizce Teori Haftal\u0131k Ders Saati 3 Saat Kredi 4 \u00d6n Ko\u015ful CE103- Algoritmalar ve Programlama I, CE100- Algoritmalar ve Programlama II Yan Ko\u015ful Tan\u0131mlanacak Zorunluluk Tan\u0131mlanacak <p>*Tan\u0131mlanacak (TBD).</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#a-ders-tanm","title":"A.    Ders Tan\u0131m\u0131","text":"<p>Bu ders, veri yap\u0131lar\u0131n\u0131n ve dosya organizasyonunun temellerini kapsamaktad\u0131r. Ders, dijital verilerin programlamada kullan\u0131lmas\u0131n\u0131 ve verilerin uygulama \u00e7al\u0131\u015fma zaman\u0131 belle\u011finde ya da uzun s\u00fcreli dosya depolama alan\u0131nda nas\u0131l kullan\u0131ld\u0131\u011f\u0131n\u0131 a\u00e7\u0131klar. Veri nesnelerinin \u00e7e\u015fitli uygulamalar\u0131 ve programlama tarzlar\u0131 \u00fczerinde durulur. Ayr\u0131ca s\u0131ralama, arama ve grafik algoritmalar\u0131 da i\u015flenir. Bu dersin amac\u0131, ger\u00e7ek d\u00fcnya problemleri i\u00e7in dijital veri yap\u0131lar\u0131 sa\u011flamak, verilerin belle\u011fe veya depolama \u00e7\u00f6z\u00fcmlerine nas\u0131l haritaland\u0131\u011f\u0131n\u0131 g\u00f6stermektir. Ders programlama uygulamalar\u0131 ve projeleri ile peki\u015ftirilerek, teoriden ziyade pratik yap\u0131larak \u00f6\u011frenme s\u00fcreci g\u00fc\u00e7lendirilecektir.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#b-dersin-ogrenme-cktlar","title":"B.    Dersin \u00d6\u011frenme \u00c7\u0131kt\u0131lar\u0131","text":"<p>Bu dersi ba\u015far\u0131yla tamamlayan bir \u00f6\u011frenci:</p> <ul> <li> <p>Diziler, matrisler, ba\u011flant\u0131l\u0131 yap\u0131lar, kuyruklar, y\u0131\u011f\u0131nlar, a\u011fa\u00e7lar ve grafikler gibi yayg\u0131n lineer ve non-lineer veri yap\u0131lar\u0131n\u0131 tan\u0131mlayabilecek.</p> </li> <li> <p>Dinamik ve statik veri yap\u0131lar\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131p faydalar\u0131n\u0131 analiz edebilecek.</p> </li> </ul> <ul> <li> <p>End\u00fcstriyel veri yap\u0131lar\u0131na y\u00f6nelik ASN.1 / BER TLV / PER TLV gibi temel tan\u0131mlar\u0131 anlayacak.</p> </li> <li> <p>Uygulama \u00e7al\u0131\u015fma zaman\u0131 verilerini dosyada nas\u0131l depolad\u0131\u011f\u0131n\u0131 ve organize etti\u011fini a\u00e7\u0131klayabilecek.</p> </li> <li> <p>Veri yap\u0131s\u0131 temelli bir problem \u00e7\u00f6z\u00fcm\u00fc i\u00e7in C/C++, Java veya C# uygulamalar\u0131yla bu problemin \u00e7\u00f6z\u00fcm\u00fcnde veri yap\u0131lar\u0131 kullanabilecek.</p> </li> <li> <p>Veri yap\u0131lar\u0131n\u0131 performans ve analiz a\u00e7\u0131s\u0131ndan kar\u015f\u0131la\u015ft\u0131r\u0131p, zaman ve alan karma\u015f\u0131kl\u0131\u011f\u0131n\u0131 analiz edebilecek.</p> </li> </ul> <ul> <li> <p>Veri yap\u0131lar\u0131 temelli s\u0131ralama ve arama algoritmalar\u0131n\u0131 anlayacak.</p> </li> <li> <p>Dosya organizasyonu ve i\u015flenmesi i\u00e7in hashing ve indeksleme y\u00f6ntemlerini a\u00e7\u0131klayabilecek.</p> </li> <li> <p>Bellek ve dosya depolama alan\u0131ndaki temel s\u0131ralama, arama ve hashing algoritmalar\u0131n\u0131n hesaplama verimlili\u011fini tart\u0131\u015fabilecek.</p> </li> <li> <p>Programlama becerilerini veri yap\u0131lar\u0131 bilgisiyle birle\u015ftirip ger\u00e7ek hayattaki problemlere etkin \u00e7\u00f6z\u00fcmler \u00fcretebilecek.</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#c-ders-konular","title":"C.    Ders Konular\u0131","text":"<ul> <li> <p>Kullan\u0131lan Veri, Aktar\u0131lan Veri ve Hareketsiz Veri kavramlar\u0131.</p> </li> <li> <p>Veri Yap\u0131lar\u0131nda Zaman ve Mekan Karma\u015f\u0131kl\u0131\u011f\u0131 Analizi</p> </li> <li> <p>Veri ve De\u011fi\u015fken Haritalamalar\u0131</p> </li> </ul> <ul> <li>ASN.1 / BER TLV / PER TLV</li> </ul> <ul> <li> <p>Ba\u011flant\u0131l\u0131 Listeler (Tek, Dairesel, \u00c7ift, XOR)</p> </li> <li> <p>Skip List</p> </li> </ul> <ul> <li> <p>Strand S\u0131ralama Algoritmas\u0131</p> </li> <li> <p>Diziler (D\u00f6nd\u00fcrme, D\u00fczenleme, Yeniden D\u00fczenleme, Arama ve S\u0131ralama)</p> </li> </ul> <ul> <li>Matrisler ve Seyrek Matrisler</li> </ul> <ul> <li> <p>Y\u0131\u011f\u0131nlar (Dizi ve Ba\u011flant\u0131l\u0131 Liste) ve FILO (\u0130lk Giren Son \u00c7\u0131kar)</p> </li> <li> <p>\u0130fadeler (Infix, Postfix ve Prefix) ve Infix\u2019ten Postfix\u2019e D\u00f6n\u00fc\u015f\u00fcmler ve Postfix De\u011ferlendirme</p> </li> <li> <p>Kuyruklar (Standart, Dairesel ve \u00c7ift U\u00e7lu) (Dizi ve Ba\u011flant\u0131l\u0131 Liste) (FIFO-\u0130lk Giren \u0130lk \u00c7\u0131kar veya FCFS-\u0130lk Gelen \u0130lk Hizmet Al\u0131r)</p> </li> <li> <p>\u00c7ok Seviyeli Kuyruklar (MLQ)</p> </li> <li> <p>Hanoi Kulesi Problemi</p> </li> </ul> <ul> <li> <p>A\u011fa\u00e7 Yap\u0131lar\u0131 ve \u0130kili A\u011fa\u00e7lar ve Gezinmeler (S\u0131ral\u0131, \u00d6ncelikli, Artikullu)</p> </li> <li> <p>Heap\u2019ler (Max, Min, \u0130kili, Binom, Fibonacci, Solcu, K-ary) ve \u00d6ncelikli Kuyruk</p> </li> <li> <p>Heap S\u0131ralama</p> </li> <li> <p>Huffman Kodlamas\u0131</p> </li> </ul> <ul> <li> <p>Grafik Temsilleri (Biti\u015fiklik Matrisi, Olay Matrisi, Biti\u015fiklik Listesi) ve Temel Kavramlar</p> </li> <li> <p>Grafik Gezinme Algoritmalar\u0131 (Derinlik \u00d6ncelikli Arama (DFS), \u0130teratif Derinle\u015fen Arama (IDS) veya \u0130teratif Derinle\u015fen Derinlik \u00d6ncelikli Arama (IDDFS), Geni\u015flik \u00d6ncelikli Arama (BFS), Derinlik S\u0131n\u0131rl\u0131 Arama, Tekd\u00fcze Maliyet Aramas\u0131, \u0130ki Y\u00f6nl\u00fc Arama)</p> </li> <li> <p>Su Kovas\u0131 Problemi</p> </li> </ul> <ul> <li> <p>Grafik \u00dcst S\u0131ralama (Topolojik S\u0131ralama)</p> </li> <li> <p>Grafik Minimum \u00d6rt\u00fcc\u00fc A\u011fa\u00e7 (MST)</p> </li> <li> <p>Grafik Geri \u0130zleme (n-Dam Problemi, m-Renkleme, Euler ve Hamilton Yollar\u0131)</p> </li> <li> <p>Grafik En K\u0131sa Yollar</p> </li> <li> <p>Grafik Ba\u011flant\u0131s\u0131, Max Ak\u0131\u015f, \u0130zomorfizm, Kanonizasyon ve Kesitler (Max /Min)</p> </li> </ul> <ul> <li> <p>Alpha-Beta Budamas\u0131</p> </li> <li> <p>Hasse Diyagramlar\u0131</p> </li> <li> <p>Petri A\u011flar\u0131</p> </li> <li> <p>\u0130ki B\u00f6lmeli Grafikler</p> </li> <li> <p>Grafik D\u00f6ng\u00fc Alg\u0131lama (Brent, Tav\u015fan ve Kaplumba\u011fa Algoritmalar\u0131)</p> </li> <li> <p>Bayes A\u011f\u0131</p> </li> <li> <p>Do\u011frusal, \u0130kili, Aral\u0131kl\u0131 ve Fibonacci Arama Algoritmalar\u0131</p> </li> <li> <p>Hashing ve Hash Tablolar\u0131 (Do\u011frudan Adres Tablolar\u0131, Hash Tablolar\u0131, Hash Fonksiyonlar\u0131, A\u00e7\u0131k Adresleme, M\u00fckemmel Hashing)</p> </li> </ul> <ul> <li> <p>Yayg\u0131n S\u0131ralama Algoritmalar\u0131 (Ekleme, Se\u00e7im, Radix, Quick, Heap, Perm\u00fctasyon, Gnome, Comb, Flash, Stooge, Ar\u0131, \u015eansl\u0131, Dolayl\u0131 (Pointer), Harici (Segmentlenmi\u015f), \u00c7alkalama/\u00c7ift Y\u00f6nl\u00fc Bubble, Shell S\u0131ralama)</p> </li> <li> <p>S\u0131ralama Y\u00f6ntemlerinin Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131</p> </li> <li> <p>Yayg\u0131n A\u011fa\u00e7 Veri Yap\u0131lar\u0131 ve \u0130\u015flemleri (\u0130kili Arama A\u011fac\u0131, AVL A\u011fac\u0131, B A\u011fac\u0131 ve T\u00fcrevleri (2 3 4 A\u011fa\u00e7lar, 2 3 A\u011fa\u00e7lar\u0131, B+ A\u011fa\u00e7lar\u0131, B# A\u011fa\u00e7lar\u0131), R A\u011fac\u0131, K\u0131rm\u0131z\u0131-Siyah A\u011fac\u0131, Splay A\u011fac\u0131, Van Emde Boas A\u011fac\u0131, Binom A\u011fac\u0131, Minimax A\u011fac\u0131)</p> </li> <li> <p>Arama A\u011fa\u00e7lar\u0131n\u0131n Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131</p> </li> </ul> <ul> <li> <p>Veri Yap\u0131lar\u0131n\u0131 Geli\u015ftirme</p> </li> <li> <p>Dize LCS Problemi (Hunt Macllory, Levenstein, Wagner-Fischer)</p> </li> <li> <p>Dize Hizalama (Needleman Wunsch, Smith Waterman, Hunt Macllory), Tokenizer ve Kar\u015f\u0131la\u015ft\u0131rma</p> </li> <li> <p>Dize Arama (Ters Fakt\u00f6r) Algoritmalar\u0131 (Knuth-Morris-Pratt, Horspool, Boyer Moore, Brute-Force, DFA Metin Arama)</p> </li> </ul> <ul> <li> <p>Tries ve Patricia A\u011fa\u00e7lar\u0131 (Radix A\u011fac\u0131)</p> </li> <li> <p>Ayr\u0131k K\u00fcmeler i\u00e7in Veri Yap\u0131lar\u0131</p> </li> <li> <p>Ard\u0131\u015f\u0131k Dosya Organizasyonu (\u0130kili Arama, Aral\u0131kl\u0131 Arama, Kendini D\u00fczenleyen Ard\u0131\u015f\u0131k Arama)</p> </li> <li> <p>Do\u011frudan Dosya Organizasyonu Bilgi Bulma</p> </li> <li> <p>Do\u011frudan Dosya Organizasyonu Hashing Fonksiyonlar\u0131 (MD5, HAVAL, SHA1, Anahtar Mod N, Anahtar Mod P, K\u0131saltma, Katlama, Kareleme, Radix D\u00f6n\u00fc\u015f\u00fcm\u00fc, Polinom Hashing, Alfabetik Anahtarlar, \u00c7at\u0131\u015fmalar)</p> </li> <li> <p>Do\u011frudan Dosya Organizasyonu \u00c7at\u0131\u015fma \u00c7\u00f6z\u00fcm\u00fc</p> </li> </ul> <ul> <li> <p>Do\u011frudan Dosya Organizasyonu Birle\u015fik Hashing (EISCH, LISCH, BEISCH, BLISCH, REISCH, RLISCH, EICH, LICH)</p> </li> <li> <p>Do\u011frudan Dosya Organizasyonu \u0130lerleyici Ta\u015fma (Do\u011frusal Denetim, Kuadratik Denetim)</p> </li> <li> <p>Do\u011frudan Dosya Organizasyonu \u00c7ift Hashing, Kova Kullan\u0131m\u0131, Do\u011frusal Katsay\u0131, Brent Y\u00f6ntemi, \u0130kili A\u011fa\u00e7 ve Hesaplanm\u0131\u015f Zincirleme Ekleme (CCI)</p> </li> <li> <p>M\u00fckemmel Hashing ve SimHash Do\u011frudan Dosya Organizasyonu</p> </li> <li> <p>\u00c7at\u0131\u015fma \u00c7\u00f6zme Y\u00f6ntemlerinin Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131</p> </li> </ul> <ul> <li> <p>\u0130ndeksli Ard\u0131\u015f\u0131k Dosya Organizasyonu</p> </li> <li> <p>\u0130kincil Anahtar Eri\u015fimleri ve S\u0131n\u0131fland\u0131rma ve Kontrol i\u00e7in Bitler ve Hashing</p> </li> <li> <p>Dosyalar i\u00e7in \u0130kili A\u011fa\u00e7 Yap\u0131lar\u0131 (\u0130kili Arama, AVL A\u011fa\u00e7lar\u0131, Dahili Yol Azaltma A\u011fa\u00e7lar\u0131)</p> </li> <li> <p>Dosyalar i\u00e7in B A\u011fa\u00e7lar\u0131 ve T\u00fcrevleri (B A\u011fac\u0131, B+ A\u011fac\u0131, B# A\u011fac\u0131)</p> </li> <li> <p>Geni\u015fletilebilir Dosyalar i\u00e7in Hashing Teknikleri (Geni\u015fletilebilir, Dinamik ve Do\u011frusal Hashing)</p> </li> </ul> <ul> <li> <p>Tries, Yakla\u015f\u0131k Dize E\u015fle\u015fmesi, Trie Hashing, Patricia A\u011fac\u0131 ve Dijital Arama A\u011fac\u0131 Dosya Organizasyonu</p> </li> <li> <p>\u0130kincil Anahtar Eri\u015fimi (K-d A\u011fa\u00e7lar\u0131 ve Izgara Dosyalar\u0131)</p> </li> <li> <p>Dosya S\u0131ralama (Ekleme, H\u0131zl\u0131, Y\u0131\u011f\u0131n S\u0131ralama, Harici S\u0131ralama, Birle\u015ftirerek S\u0131ralama ve Disk S\u0131ralamas\u0131)</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#d-ders-kitaplar-ve-gerekli-donanm-veya-ekipman","title":"D.    Ders Kitaplar\u0131 ve Gerekli Donan\u0131m veya Ekipman","text":"<p>Bu dersin bir ders kitab\u0131 gerekmemektedir. Gerekirse, a\u015fa\u011f\u0131daki kitaplar ve a\u00e7\u0131k kaynakl\u0131 \u00e7evrimi\u00e7i kaynaklar kullan\u0131labilir.</p> <ul> <li> <p>C Nas\u0131l Programlan\u0131r, 7/E. Deitel &amp; Deitel. 2013, Prentice-Hall.</p> </li> <li> <p>Java Programlamaya Giri\u015f, Kapsaml\u0131 Versiyon (10. Bask\u0131) 10. Bask\u0131 Y. Daniel Liang</p> </li> <li> <p>Algoritmalara Giri\u015f, \u00dc\u00e7\u00fcnc\u00fc Bask\u0131 Thomas H. Cormen,   Charles E. Leiserson, Ronald L. Rivest ve Clifford Stein taraf\u0131ndan</p> </li> </ul> <ul> <li> <p>C'de Problem \u00c7\u00f6zme ve Program Tasar\u0131m\u0131, J.R. Hanly ve E.B. Koffman, 6. Bask\u0131.</p> </li> <li> <p>Alan L. Tharp. 1988. Dosya organizasyonu ve i\u015fleme. John Wiley &amp; Sons, Inc., ABD.</p> </li> <li> <p>Richard Jankowski. 2010. Peter Brass taraf\u0131ndan ileri veri yap\u0131lar\u0131.   Cambridge University Press 2008. SIGACT News 41, 1 (Mart 2010), 19\u201320.   DOI:https://doi.org/10.1145/1753171.1753176</p> </li> <li> <p>Robert Sedgewick ve Kevin Wayne. 2011. Algoritmalar (4. bask\u0131).   Addison-Wesley Professional.</p> </li> </ul> <ul> <li>Ek Kitaplar Tan\u0131mlanacak</li> </ul> <p>Bu ders boyunca programlama uygulamalar\u0131 i\u00e7in bir diz\u00fcst\u00fc bilgisayara ihtiyac\u0131n\u0131z olacakt\u0131r. Geli\u015ftirme ortam\u0131n\u0131z olacak ve bunu s\u0131navlar, \u00f6devler ve s\u0131n\u0131f uygulamalar\u0131 i\u00e7in kullanacaks\u0131n\u0131z. </p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#edegerlendirme","title":"E.De\u011ferlendirme","text":"<p>D\u00f6nem boyunca 1 adet Proje ve 2 adet yaz\u0131l\u0131 Quiz olacaks\u0131n\u0131z. Vize zaman\u0131 Proje Ara Raporu Teslim Etmeniz ve Projenizin \u0130lermesini \u0130spatlay\u0131c\u0131 \u015eekilde \u00c7\u0131kt\u0131lar Olu\u015fturman\u0131z ve Projenizin Proje Plan\u0131na Sad\u0131k Kalman\u0131z Gerekiyor. 15. Hafta Projenizin Sonu\u00e7 Raporunu ve Sunumunu Yapacaks\u0131n\u0131z. 8. Hafta 1 Adet Yaz\u0131l\u0131 Quiz Olacaks\u0131n\u0131z ve 14. Hafta da 1 adet Yaz\u0131l\u0131 Quiz Olacaks\u0131n\u0131z. </p> De\u011ferlendirme K\u0131saltma Oran Kapsam Proje Ara Raporu Teslimi RAP1 %60 Vize Quiz-1 QUIZ1 %40 Vize Proje Final Raporu RAP2 %70 Final Quiz-2 QUIZ2 %30 Final \\[ Not_{Vize} = 0.6RAP1 + 0.4QUIZ1 \\] \\[ Not_{Final}=0.7RAP2 + 0.3QUIZ2 \\] \\[ \\text{Ge\u00e7me Notu}=(40*Not{Vize}+60*Not_{Final})/100 \\]","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#f-ogretim-stratejileri-ve-yontemleri","title":"F. \u00d6\u011fretim Stratejileri ve Y\u00f6ntemleri","text":"<p>Bu dersin temel \u00f6\u011fretim y\u00f6ntemi, s\u0131n\u0131fta y\u00fcz y\u00fcze e\u011fitim olarak planlanm\u0131\u015ft\u0131r ve destekleyici kaynaklar, \u00f6devler ve duyurular Google Classroom \u00fczerinden payla\u015f\u0131lacakt\u0131r. \u00d6\u011frencilerin \u00fcniversitede olmas\u0131 beklenmektedir. Bu sorumluluk, bu dersi ba\u015far\u0131yla tamamlaman\u0131n \u00f6nemli bir par\u00e7as\u0131d\u0131r. Pandemi durumu de\u011fi\u015fir ve bu dersin uzaktan e\u011fitim ile yap\u0131lmas\u0131 gerekirse, bu ders e\u015fzamanl\u0131 ve e\u015fzamans\u0131z uzaktan e\u011fitim y\u00f6ntemleri ile yap\u0131lacakt\u0131r. Bu senaryoda, ders program\u0131nda belirtilen zamanda \u00e7evrimi\u00e7i platformda (zoom veya meet) olman\u0131z beklenmektedir. Yoklama al\u0131nacakt\u0131r.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#g-gec-teslim-edilen-odevler","title":"G. Ge\u00e7 Teslim Edilen \u00d6devler","text":"<p>D\u00f6nem boyunca verilen \u00f6devler belirtilen tarihe kadar teslim edilmelidir. Ge\u00e7 teslim edilen \u00f6devler kabul edilmeyecektir.</p> <p>Beklenmedik durumlar i\u00e7in \u00f6\u011frencilerin \u00f6dev gecikmelerini \u00f6\u011fretim \u00fcyesine bildirmesi gerekmektedir.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#h-ders-platformu-ve-iletisim","title":"H. Ders Platformu ve \u0130leti\u015fim","text":"<p>Ders \u00f6\u011frenme y\u00f6netim sistemi olarak Google Classroom kullan\u0131lacakt\u0131r. Dersle ilgili t\u00fcm elektronik kaynaklar ve duyurular bu platformda payla\u015f\u0131lacakt\u0131r. Ba\u015far\u0131yla tamamlayabilmek i\u00e7in ders sayfas\u0131n\u0131 g\u00fcnl\u00fck olarak kontrol etmek, gerekli kaynaklara ve duyurulara eri\u015fmek ve ihtiya\u00e7 duydu\u011funuzda \u00f6\u011fretim \u00fcyesi ile ileti\u015fim kurmak \u00e7ok \u00f6nemlidir.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#i-akademik-durustluk-plagiarizm-ve-kopya","title":"I. Akademik D\u00fcr\u00fcstl\u00fck, Plagiarizm ve Kopya","text":"<p>Akademik d\u00fcr\u00fcstl\u00fck, Recep Tayyip Erdo\u011fan \u00dcniversitesi'nin en \u00f6nemli ilkelerinden biridir. Akademik d\u00fcr\u00fcstl\u00fck ilkelerine ayk\u0131r\u0131 davranan herkes a\u011f\u0131r \u015fekilde cezaland\u0131r\u0131l\u0131r.</p> <p>S\u0131n\u0131f arkada\u015flar\u0131n\u0131zla \"birlikte \u00e7al\u0131\u015fmak\" i\u00e7in etkile\u015fimde bulunmak do\u011fald\u0131r. Bir \u00f6\u011frenci zor bir konuyu veya t\u00fcm dersi daha iyi anlamak i\u00e7in \u00fccretli veya \u00fccretsiz olarak ba\u015fka birinden yard\u0131m istemesi de do\u011fal olabilir. Ancak, \"birlikte \u00e7al\u0131\u015fmak\" veya \"\u00f6zel ders almak\" ile \"akademik sahtekarl\u0131k\" aras\u0131ndaki s\u0131n\u0131r nedir? Plagiarizm (intihal) ne zaman olur, kopya ne zaman olur?</p> <p>Bir ba\u015fka \u00f6\u011frencinin ka\u011f\u0131d\u0131na veya s\u0131navda izin verilen kaynaklar d\u0131\u015f\u0131nda herhangi bir kayna\u011fa bakman\u0131n kopya oldu\u011fu a\u00e7\u0131kt\u0131r ve cezaland\u0131r\u0131l\u0131r. Ancak, bir\u00e7ok \u00f6\u011frencinin \u00fcniversiteye \u00e7ok az deneyimle geldi\u011fi, neyin kabul edilebilir oldu\u011fu ve \"kopya\" olarak say\u0131ld\u0131\u011f\u0131 konusunda \u00e7ok az deneyime sahip oldu\u011fu bilinmektedir, \u00f6zellikle \u00f6devler s\u00f6z konusu oldu\u011funda.</p> <p>M\u00fchendislik ve Mimarl\u0131k Fak\u00fcltesi \u00f6\u011frencileri i\u00e7in akademik d\u00fcr\u00fcstl\u00fck felsefesini vurgulamak i\u00e7in a\u015fa\u011f\u0131daki y\u00f6nergeler belirlenmi\u015ftir. A\u015fa\u011f\u0131da belirtilmeyen bir durumla kar\u015f\u0131la\u015f\u0131lmas\u0131 durumunda, \u00f6\u011frencinin yapmak istedi\u011fi \u015feyin akademik d\u00fcr\u00fcstl\u00fck \u00e7er\u00e7evesinde kal\u0131p kalmayaca\u011f\u0131n\u0131 sormas\u0131 \u00f6nerilir.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#a-bir-odev-hazrlarken-ne-kabul-edilebilir","title":"a. Bir \u00f6dev haz\u0131rlarken ne kabul edilebilir?","text":"<ul> <li>\u00d6devi daha iyi anlamak i\u00e7in s\u0131n\u0131f arkada\u015flar\u0131n\u0131zla ileti\u015fim kurmak</li> </ul> <ul> <li> <p>\u0130nternette veya ba\u015fka bir yerde buldu\u011funuz fikirler, al\u0131nt\u0131lar, paragraflar, k\u00fc\u00e7\u00fck kod par\u00e7alar\u0131n\u0131 (snippet) \u00f6devinize eklemek, ancak</p> </li> <li> <p>bunlar \u00f6devin t\u00fcm \u00e7\u00f6z\u00fcm\u00fc de\u011filse,</p> </li> <li> <p>kaynaklar\u0131 do\u011fru bir \u015fekilde belirtirseniz</p> </li> </ul> <ul> <li> <p>\u00d6devinizin \u0130ngilizce i\u00e7eri\u011fi i\u00e7in kaynaklardan yard\u0131m almak.</p> </li> <li> <p>Tart\u0131\u015fmal\u0131 konular \u00fczerine s\u0131n\u0131fta tart\u0131\u015fma yaratmak i\u00e7in \u00f6devinizin k\u00fc\u00e7\u00fck bir k\u0131sm\u0131n\u0131 payla\u015fmak.</p> </li> </ul> <ul> <li> <p>Teknik zorluklar i\u00e7in talimatlar, referanslar ve \u00e7\u00f6z\u00fcmler aramak, ancak \u00f6devin do\u011frudan cevaplar\u0131n\u0131 bulmaya \u00e7al\u0131\u015fmamak.</p> </li> <li> <p>\u00d6dev \u00e7\u00f6z\u00fcmlerini ba\u015fkalar\u0131yla \u015femalar veya \u00f6zetlenmi\u015f ifadelerle tart\u0131\u015fmak, ancak ger\u00e7ek metin veya kod payla\u015fmamak.</p> </li> <li> <p>Dersle ilgili bir \u00f6\u011fretmenden yard\u0131m almak (hatta \u00fccretli), ancak \u00f6\u011fretmenin \u00f6devi sizin yerinize yapmamas\u0131 ko\u015fuluyla.</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#b-ne-kabul-edilemez","title":"b. Ne kabul edilemez?","text":"<ul> <li> <p>\u00d6devinizi teslim etmeden \u00f6nce bir arkada\u015f\u0131n\u0131zdan \u00e7\u00f6z\u00fcm\u00fcn\u00fc istemek.</p> </li> <li> <p>Ders d\u0131\u015f\u0131 kaynaklardan buldu\u011funuz metinlerin (veya programlama derslerinde kodlar\u0131n) kaynaklar\u0131n\u0131 belirtmemek.</p> </li> <li> <p>Bir s\u0131n\u0131f arkada\u015f\u0131n\u0131za \u00e7\u00f6z\u00fcm\u00fc g\u00f6stermek veya zorland\u0131\u011f\u0131nda \u00e7\u00f6z\u00fcm\u00fc vermek.</p> </li> </ul>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#j-beklentiler","title":"J. Beklentiler","text":"<p>Derslere zaman\u0131nda kat\u0131lman\u0131z ve d\u00f6nem boyunca haftal\u0131k ders gereksinimlerini (okumalar ve \u00f6devler) tamamlaman\u0131z beklenmektedir. \u00d6\u011fretim \u00fcyesi ile \u00f6\u011frenciler aras\u0131ndaki ana ileti\u015fim kanal\u0131 email olacakt\u0131r. L\u00fctfen dersle ilgili sorular\u0131n\u0131z\u0131 \u00fcniversitenin size sa\u011flad\u0131\u011f\u0131 e-posta adresi \u00fczerinden \u00f6\u011fretim \u00fcyesine iletin. Mesaj\u0131n\u0131z\u0131n konu alan\u0131na ders ad\u0131n\u0131 ve metin alan\u0131na isminizi ekledi\u011finizden emin olun. Ayr\u0131ca, \u00f6\u011fretim \u00fcyesi gerekli oldu\u011funda sizinle e-posta yoluyla ileti\u015fime ge\u00e7ecektir. Bu nedenle, sa\u011fl\u0131kl\u0131 bir ileti\u015fim i\u00e7in e-posta adresinizi her g\u00fcn kontrol etmeniz \u00e7ok \u00f6nemlidir.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#k-ders-icerigi-ve-guncellemeler","title":"K. Ders \u0130\u00e7eri\u011fi ve G\u00fcncellemeler","text":"<p>Gerekirse, ders i\u00e7eri\u011fi veya ders program\u0131nda de\u011fi\u015fiklikler yap\u0131labilir. Bu belgenin kapsam\u0131ndaki herhangi bir de\u011fi\u015fiklik yap\u0131l\u0131rsa, \u00f6\u011fretim \u00fcyesi sizi bilgilendirecektir.</p>","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]},{"location":"tr/syllabus/syllabus/#ders-plan-genel-gorunumu","title":"Ders Plan\u0131 Genel G\u00f6r\u00fcn\u00fcm\u00fc","text":"Haftalar Tarihler Konular Di\u011fer G\u00f6revler Hafta 1 27.09.2024 Ders Plan\u0131 ve \u0130leti\u015fim, Do\u011frusal ve Do\u011frusal Olmayan Veri Yap\u0131lar\u0131 ve Performans Analizi, Veri ve De\u011fi\u015fkenler i\u00e7in G\u00f6sterici ve Nesne Uygulamalar\u0131, ASN.1 / BER TLV / PER TLV Temelleri TBD Hafta 2 04.10.2024 Ba\u011fl\u0131 Listeler ve \u0130lgili Algoritmalar, Diziler ve Matrisler TBD Hafta 3 11.10.2024 Y\u0131\u011f\u0131nlar, Kuyruk Yap\u0131lar\u0131 ve \u0130lgili Algoritmalar ve Problemler TBD Hafta 4 18.10.2024 A\u011fa\u00e7 Veri Yap\u0131s\u0131 T\u00fcrleri ve Uygulamalar\u0131 (\u0130kili A\u011fa\u00e7, A\u011fa\u00e7 Dola\u015fmalar\u0131, Y\u0131\u011f\u0131nlar) TBD Hafta 5 25.10.2024 Grafik Veri Yap\u0131lar\u0131 ve Dola\u015fmalar Hafta-6 01.11.2024 Grafik MST, Geri \u0130zleme, Topolojik S\u0131ralama, En K\u0131sa Yollar, Ba\u011flant\u0131, Maksimum Ak\u0131\u015f ve D\u00f6ng\u00fc Alg\u0131lama Algoritmalar\u0131. Grafik \u0130zomorfizmi ve Kanonizasyon, Grafik Kesitleri TBD Hafta-7 08.11.2024 Do\u011frusal, \u0130kili ve Fibonacci Arama, Hashing ve Hash Tablolar\u0131 ile M\u00fckemmel Hashing TBD Hafta-8 15.11.2024 Quiz-1 + Ara Proje Raporu Teslimi TBD Hafta-9 22.11.2024 S\u0131ralama Algoritmalar\u0131, S\u0131n\u0131fland\u0131rma ve Kar\u015f\u0131la\u015ft\u0131rmalar TBD Hafta-10 29.11.2024 \u0130leri A\u011fa\u00e7 Veri Yap\u0131lar\u0131 (\u0130kili Arama A\u011fac\u0131, AVL A\u011fac\u0131, B A\u011fa\u00e7lar\u0131 ve t\u00fcrevleri, K\u0131rm\u0131z\u0131-Siyah A\u011fa\u00e7lar, Splay A\u011fa\u00e7lar\u0131 ve Geli\u015fmi\u015f Veri Yap\u0131lar\u0131, van Emde Boas A\u011fa\u00e7lar\u0131, Binom ve Minimax A\u011fa\u00e7lar) ve Kar\u015f\u0131la\u015ft\u0131rmalar. TBD Hafta-11 06.12.2024 Dize Veri Yap\u0131s\u0131, Alt Dizi Arama, Hizalama ve Kar\u015f\u0131la\u015ft\u0131rma Algoritmalar\u0131 TBD Hafta-12 13.12.2024 Dize Arama Algoritmalar\u0131, Tries, Ba\u011f\u0131ms\u0131z K\u00fcmeler i\u00e7in Veri Yap\u0131lar\u0131 TBD Hafta-13 20.12.2024 Dosya Organizasyonu ve \u0130\u015fleme Giri\u015f, S\u0131ral\u0131 Dosya Organizasyonu, Do\u011frudan Dosya Organizasyonu Hash Y\u00f6ntemleri + Do\u011frudan Dosya Organizasyonu \u0130ndeksleri, \u0130kili ve B A\u011fa\u00e7 Yap\u0131lar\u0131 TBD Hafta-14 27.12.2024 Quiz-2 TBD Hafta-15 03.01.2025 Proje \u0130ncelemesi ve Sunumu TBD \\[ Ders-\u0130zlence-Sonu \\]","tags":["ce205-syllabus","data-structures","fall-2024","asn-1"]}]}